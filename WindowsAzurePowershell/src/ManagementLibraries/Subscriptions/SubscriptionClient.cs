// 
// Copyright (c) Microsoft.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Threading;
using System.Threading.Tasks;
using System.Xml.Linq;
using Microsoft.WindowsAzure.Common;
using Microsoft.WindowsAzure.Common.Internals;
using Microsoft.WindowsAzure.Subscriptions.Models;

namespace Microsoft.WindowsAzure.Subscriptions.Models
{
    /// <summary>
    /// A standard service response including an HTTP status code and request
    /// ID.
    /// </summary>
    public partial class SubscriptionListOperationResponse : OperationResponse, IEnumerable<SubscriptionListOperationResponse.Subscription>
    {
        private IList<SubscriptionListOperationResponse.Subscription> _subscriptions;
        
        public IList<SubscriptionListOperationResponse.Subscription> Subscriptions
        {
            get { return this._subscriptions; }
            set { this._subscriptions = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the SubscriptionListOperationResponse
        /// class.
        /// </summary>
        public SubscriptionListOperationResponse()
        {
            this._subscriptions = new List<SubscriptionListOperationResponse.Subscription>();
        }
        
        /// <summary>
        /// Gets the sequence of Subscriptions.
        /// </summary>
        public IEnumerator<SubscriptionListOperationResponse.Subscription> GetEnumerator()
        {
            return this.Subscriptions.GetEnumerator();
        }
        
        /// <summary>
        /// Gets the sequence of Subscriptions.
        /// </summary>
        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
        {
            return this.GetEnumerator();
        }
        
        public partial class Subscription
        {
            private string _accountAdminLiveEmailId;
            
            public string AccountAdminLiveEmailId
            {
                get { return this._accountAdminLiveEmailId; }
                set { this._accountAdminLiveEmailId = value; }
            }
            
            private string _activeDirectoryTenantId;
            
            public string ActiveDirectoryTenantId
            {
                get { return this._activeDirectoryTenantId; }
                set { this._activeDirectoryTenantId = value; }
            }
            
            private DateTime _created;
            
            public DateTime Created
            {
                get { return this._created; }
                set { this._created = value; }
            }
            
            private int _currentCoreCount;
            
            public int CurrentCoreCount
            {
                get { return this._currentCoreCount; }
                set { this._currentCoreCount = value; }
            }
            
            private int _currentHostedServices;
            
            public int CurrentHostedServices
            {
                get { return this._currentHostedServices; }
                set { this._currentHostedServices = value; }
            }
            
            private int _currentStorageAccounts;
            
            public int CurrentStorageAccounts
            {
                get { return this._currentStorageAccounts; }
                set { this._currentStorageAccounts = value; }
            }
            
            private int _maximumCoreCount;
            
            public int MaximumCoreCount
            {
                get { return this._maximumCoreCount; }
                set { this._maximumCoreCount = value; }
            }
            
            private int _maximumDnsServers;
            
            public int MaximumDnsServers
            {
                get { return this._maximumDnsServers; }
                set { this._maximumDnsServers = value; }
            }
            
            private int _maximumExtraVirtualIPCount;
            
            public int MaximumExtraVirtualIPCount
            {
                get { return this._maximumExtraVirtualIPCount; }
                set { this._maximumExtraVirtualIPCount = value; }
            }
            
            private int _maximumHostedServices;
            
            public int MaximumHostedServices
            {
                get { return this._maximumHostedServices; }
                set { this._maximumHostedServices = value; }
            }
            
            private int _maximumLocalNetworkSites;
            
            public int MaximumLocalNetworkSites
            {
                get { return this._maximumLocalNetworkSites; }
                set { this._maximumLocalNetworkSites = value; }
            }
            
            private int _maximumStorageAccounts;
            
            public int MaximumStorageAccounts
            {
                get { return this._maximumStorageAccounts; }
                set { this._maximumStorageAccounts = value; }
            }
            
            private int _maximumVirtualNetworkSites;
            
            public int MaximumVirtualNetworkSites
            {
                get { return this._maximumVirtualNetworkSites; }
                set { this._maximumVirtualNetworkSites = value; }
            }
            
            private string _serviceAdminLiveEmailId;
            
            public string ServiceAdminLiveEmailId
            {
                get { return this._serviceAdminLiveEmailId; }
                set { this._serviceAdminLiveEmailId = value; }
            }
            
            private string _subscriptionId;
            
            public string SubscriptionId
            {
                get { return this._subscriptionId; }
                set { this._subscriptionId = value; }
            }
            
            private string _subscriptionName;
            
            public string SubscriptionName
            {
                get { return this._subscriptionName; }
                set { this._subscriptionName = value; }
            }
            
            private SubscriptionStatus _subscriptionStatus;
            
            public SubscriptionStatus SubscriptionStatus
            {
                get { return this._subscriptionStatus; }
                set { this._subscriptionStatus = value; }
            }
            
            /// <summary>
            /// Initializes a new instance of the Subscription class.
            /// </summary>
            public Subscription()
            {
            }
        }
    }
    
    public enum SubscriptionStatus
    {
        Active = 0,
        
        Disabled = 1,
    }
}

namespace Microsoft.WindowsAzure.Subscriptions
{
    public partial interface ISubscriptionClient
    {
        /// <summary>
        /// The URI used as the base for all Service Management requests.
        /// </summary>
        Uri BaseUri
        {
            get; 
        }
        
        /// <summary>
        /// Credentials used to authenticate requests.
        /// </summary>
        CloudCredentials Credentials
        {
            get; 
        }
        
        ISubscriptionOperations Subscriptions
        {
            get; 
        }
    }
    
    public static partial class SubscriptionClientExtensions
    {
    }
    
    public partial class SubscriptionClient : ServiceClient<SubscriptionClient>, ISubscriptionClient
    {
        private Uri _baseUri;
        
        /// <summary>
        /// The URI used as the base for all Service Management requests.
        /// </summary>
        public Uri BaseUri
        {
            get { return this._baseUri; }
        }
        
        private CloudCredentials _credentials;
        
        /// <summary>
        /// Credentials used to authenticate requests.
        /// </summary>
        public CloudCredentials Credentials
        {
            get { return this._credentials; }
        }
        
        private ISubscriptionOperations _subscriptions;
        
        public virtual ISubscriptionOperations Subscriptions
        {
            get { return this._subscriptions; }
        }
        
        /// <summary>
        /// Initializes a new instance of the SubscriptionClient class.
        /// </summary>
        private SubscriptionClient()
            : base()
        {
            this._subscriptions = new SubscriptionOperations(this);
            this.HttpClient.Timeout = TimeSpan.FromSeconds(300);
        }
        
        /// <summary>
        /// Initializes a new instance of the SubscriptionClient class.
        /// </summary>
        /// <param name='credentials'>
        /// Credentials used to authenticate requests.
        /// </param>
        /// <param name='baseUri'>
        /// The URI used as the base for all Service Management requests.
        /// </param>
        public SubscriptionClient(CloudCredentials credentials, Uri baseUri)
            : this()
        {
            if (credentials == null)
            {
                throw new ArgumentNullException("credentials");
            }
            if (baseUri == null)
            {
                throw new ArgumentNullException("baseUri");
            }
            this._credentials = credentials;
            this._baseUri = baseUri;
            
            this.Credentials.InitializeServiceClient(this);
        }
        
        /// <summary>
        /// Initializes a new instance of the SubscriptionClient class.
        /// </summary>
        /// <param name='credentials'>
        /// Credentials used to authenticate requests.
        /// </param>
        public SubscriptionClient(CloudCredentials credentials)
            : this()
        {
            if (credentials == null)
            {
                throw new ArgumentNullException("credentials");
            }
            this._credentials = credentials;
            this._baseUri = new Uri("https://management.core.windows.net");
            
            this.Credentials.InitializeServiceClient(this);
        }
    }
    
    public partial interface ISubscriptionOperations
    {
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        Task<SubscriptionListOperationResponse> ListAsync(CancellationToken cancellationToken);
    }
    
    public static partial class SubscriptionOperationsExtensions
    {
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Subscriptions.ISubscriptionOperations.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static SubscriptionListOperationResponse List(this ISubscriptionOperations operations)
        {
            try
            {
                return operations.ListAsync().Result;
            }
            catch (AggregateException ex)
            {
                if (ex.InnerExceptions.Count > 1)
                {
                    throw;
                }
                else
                {
                    throw ex.InnerException;
                }
            }
        }
        
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Subscriptions.ISubscriptionOperations.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<SubscriptionListOperationResponse> ListAsync(this ISubscriptionOperations operations)
        {
            return operations.ListAsync(CancellationToken.None);
        }
    }
    
    internal partial class SubscriptionOperations : IServiceOperations<SubscriptionClient>, ISubscriptionOperations
    {
        /// <summary>
        /// Initializes a new instance of the SubscriptionOperations class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        internal SubscriptionOperations(SubscriptionClient client)
        {
            this._client = client;
        }
        
        private SubscriptionClient _client;
        
        /// <summary>
        /// Gets a reference to the
        /// Microsoft.WindowsAzure.Subscriptions.SubscriptionClient.
        /// </summary>
        public SubscriptionClient Client
        {
            get { return this._client; }
        }
        
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<SubscriptionListOperationResponse> ListAsync(CancellationToken cancellationToken)
        {
            // Validate
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                Tracing.Enter(invocationId, this, "ListAsync", tracingParameters);
            }
            
            // Construct URL
            string url = this.Client.BaseUri + "/subscriptions";
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2013-08-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.CreateFromXml(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    SubscriptionListOperationResponse result = new SubscriptionListOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    XDocument responseDoc = XDocument.Parse(responseContent);
                    
                    XElement subscriptionsElement = responseDoc.Element(XName.Get("Subscriptions", "http://schemas.microsoft.com/windowsazure"));
                    if (subscriptionsElement != null)
                    {
                        if (subscriptionsElement != null)
                        {
                            foreach (XElement subscriptionsElement2 in subscriptionsElement.Elements(XName.Get("Subscription", "http://schemas.microsoft.com/windowsazure")))
                            {
                                SubscriptionListOperationResponse.Subscription subscriptionInstance = new SubscriptionListOperationResponse.Subscription();
                                result.Subscriptions.Add(subscriptionInstance);
                                
                                XElement subscriptionIDElement = subscriptionsElement2.Element(XName.Get("SubscriptionID", "http://schemas.microsoft.com/windowsazure"));
                                if (subscriptionIDElement != null)
                                {
                                    string subscriptionIDInstance = subscriptionIDElement.Value;
                                    subscriptionInstance.SubscriptionId = subscriptionIDInstance;
                                }
                                
                                XElement subscriptionNameElement = subscriptionsElement2.Element(XName.Get("SubscriptionName", "http://schemas.microsoft.com/windowsazure"));
                                if (subscriptionNameElement != null)
                                {
                                    string subscriptionNameInstance = subscriptionNameElement.Value;
                                    subscriptionInstance.SubscriptionName = subscriptionNameInstance;
                                }
                                
                                XElement subscriptionStatusElement = subscriptionsElement2.Element(XName.Get("SubscriptionStatus", "http://schemas.microsoft.com/windowsazure"));
                                if (subscriptionStatusElement != null)
                                {
                                    SubscriptionStatus subscriptionStatusInstance = (SubscriptionStatus)Enum.Parse(typeof(SubscriptionStatus), subscriptionStatusElement.Value, false);
                                    subscriptionInstance.SubscriptionStatus = subscriptionStatusInstance;
                                }
                                
                                XElement accountAdminLiveEmailIdElement = subscriptionsElement2.Element(XName.Get("AccountAdminLiveEmailId", "http://schemas.microsoft.com/windowsazure"));
                                if (accountAdminLiveEmailIdElement != null)
                                {
                                    string accountAdminLiveEmailIdInstance = accountAdminLiveEmailIdElement.Value;
                                    subscriptionInstance.AccountAdminLiveEmailId = accountAdminLiveEmailIdInstance;
                                }
                                
                                XElement serviceAdminLiveEmailIdElement = subscriptionsElement2.Element(XName.Get("ServiceAdminLiveEmailId", "http://schemas.microsoft.com/windowsazure"));
                                if (serviceAdminLiveEmailIdElement != null)
                                {
                                    string serviceAdminLiveEmailIdInstance = serviceAdminLiveEmailIdElement.Value;
                                    subscriptionInstance.ServiceAdminLiveEmailId = serviceAdminLiveEmailIdInstance;
                                }
                                
                                XElement maxCoreCountElement = subscriptionsElement2.Element(XName.Get("MaxCoreCount", "http://schemas.microsoft.com/windowsazure"));
                                if (maxCoreCountElement != null)
                                {
                                    int maxCoreCountInstance = int.Parse(maxCoreCountElement.Value, CultureInfo.InvariantCulture);
                                    subscriptionInstance.MaximumCoreCount = maxCoreCountInstance;
                                }
                                
                                XElement maxStorageAccountsElement = subscriptionsElement2.Element(XName.Get("MaxStorageAccounts", "http://schemas.microsoft.com/windowsazure"));
                                if (maxStorageAccountsElement != null)
                                {
                                    int maxStorageAccountsInstance = int.Parse(maxStorageAccountsElement.Value, CultureInfo.InvariantCulture);
                                    subscriptionInstance.MaximumStorageAccounts = maxStorageAccountsInstance;
                                }
                                
                                XElement maxHostedServicesElement = subscriptionsElement2.Element(XName.Get("MaxHostedServices", "http://schemas.microsoft.com/windowsazure"));
                                if (maxHostedServicesElement != null)
                                {
                                    int maxHostedServicesInstance = int.Parse(maxHostedServicesElement.Value, CultureInfo.InvariantCulture);
                                    subscriptionInstance.MaximumHostedServices = maxHostedServicesInstance;
                                }
                                
                                XElement currentCoreCountElement = subscriptionsElement2.Element(XName.Get("CurrentCoreCount", "http://schemas.microsoft.com/windowsazure"));
                                if (currentCoreCountElement != null)
                                {
                                    int currentCoreCountInstance = int.Parse(currentCoreCountElement.Value, CultureInfo.InvariantCulture);
                                    subscriptionInstance.CurrentCoreCount = currentCoreCountInstance;
                                }
                                
                                XElement currentStorageAccountsElement = subscriptionsElement2.Element(XName.Get("CurrentStorageAccounts", "http://schemas.microsoft.com/windowsazure"));
                                if (currentStorageAccountsElement != null)
                                {
                                    int currentStorageAccountsInstance = int.Parse(currentStorageAccountsElement.Value, CultureInfo.InvariantCulture);
                                    subscriptionInstance.CurrentStorageAccounts = currentStorageAccountsInstance;
                                }
                                
                                XElement currentHostedServicesElement = subscriptionsElement2.Element(XName.Get("CurrentHostedServices", "http://schemas.microsoft.com/windowsazure"));
                                if (currentHostedServicesElement != null)
                                {
                                    int currentHostedServicesInstance = int.Parse(currentHostedServicesElement.Value, CultureInfo.InvariantCulture);
                                    subscriptionInstance.CurrentHostedServices = currentHostedServicesInstance;
                                }
                                
                                XElement maxVirtualNetworkSitesElement = subscriptionsElement2.Element(XName.Get("MaxVirtualNetworkSites", "http://schemas.microsoft.com/windowsazure"));
                                if (maxVirtualNetworkSitesElement != null)
                                {
                                    int maxVirtualNetworkSitesInstance = int.Parse(maxVirtualNetworkSitesElement.Value, CultureInfo.InvariantCulture);
                                    subscriptionInstance.MaximumVirtualNetworkSites = maxVirtualNetworkSitesInstance;
                                }
                                
                                XElement maxLocalNetworkSitesElement = subscriptionsElement2.Element(XName.Get("MaxLocalNetworkSites", "http://schemas.microsoft.com/windowsazure"));
                                if (maxLocalNetworkSitesElement != null)
                                {
                                    int maxLocalNetworkSitesInstance = int.Parse(maxLocalNetworkSitesElement.Value, CultureInfo.InvariantCulture);
                                    subscriptionInstance.MaximumLocalNetworkSites = maxLocalNetworkSitesInstance;
                                }
                                
                                XElement maxDnsServersElement = subscriptionsElement2.Element(XName.Get("MaxDnsServers", "http://schemas.microsoft.com/windowsazure"));
                                if (maxDnsServersElement != null)
                                {
                                    int maxDnsServersInstance = int.Parse(maxDnsServersElement.Value, CultureInfo.InvariantCulture);
                                    subscriptionInstance.MaximumDnsServers = maxDnsServersInstance;
                                }
                                
                                XElement maxExtraVIPCountElement = subscriptionsElement2.Element(XName.Get("MaxExtraVIPCount", "http://schemas.microsoft.com/windowsazure"));
                                if (maxExtraVIPCountElement != null)
                                {
                                    int maxExtraVIPCountInstance = int.Parse(maxExtraVIPCountElement.Value, CultureInfo.InvariantCulture);
                                    subscriptionInstance.MaximumExtraVirtualIPCount = maxExtraVIPCountInstance;
                                }
                                
                                XElement aADTenantIDElement = subscriptionsElement2.Element(XName.Get("AADTenantID", "http://schemas.microsoft.com/windowsazure"));
                                if (aADTenantIDElement != null)
                                {
                                    string aADTenantIDInstance = aADTenantIDElement.Value;
                                    subscriptionInstance.ActiveDirectoryTenantId = aADTenantIDInstance;
                                }
                                
                                XElement createdTimeElement = subscriptionsElement2.Element(XName.Get("CreatedTime", "http://schemas.microsoft.com/windowsazure"));
                                if (createdTimeElement != null)
                                {
                                    DateTime createdTimeInstance = DateTime.Parse(createdTimeElement.Value, CultureInfo.InvariantCulture);
                                    subscriptionInstance.Created = createdTimeInstance;
                                }
                            }
                        }
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
    }
}
