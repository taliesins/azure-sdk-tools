// 
// Copyright (c) Microsoft.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using System.Xml.Linq;
using Microsoft.WindowsAzure;
using Microsoft.WindowsAzure.Common;
using Microsoft.WindowsAzure.Common.Internals;
using Microsoft.WindowsAzure.Management.Sql;
using Microsoft.WindowsAzure.Management.Sql.Models;

namespace Microsoft.WindowsAzure.Management.Sql.Models
{
    /// <summary>
    /// Parameters supplied to the DAC Export operation.
    /// </summary>
    public partial class DacExportParameters
    {
        private DacExportParameters.BlobCredentialsParameter _blobCredentials;
        
        /// <summary>
        /// Credentials for getting the DAC.
        /// </summary>
        public DacExportParameters.BlobCredentialsParameter BlobCredentials
        {
            get { return this._blobCredentials; }
            set { this._blobCredentials = value; }
        }
        
        private DacExportParameters.ConnectionInfoParameter _connectionInfo;
        
        /// <summary>
        /// Connection information for the SQL Server Database.
        /// </summary>
        public DacExportParameters.ConnectionInfoParameter ConnectionInfo
        {
            get { return this._connectionInfo; }
            set { this._connectionInfo = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the DacExportParameters class.
        /// </summary>
        public DacExportParameters()
        {
        }
        
        /// <summary>
        /// Credentials for getting the DAC
        /// </summary>
        public partial class BlobCredentialsParameter
        {
            private string _storageAccessKey;
            
            /// <summary>
            /// The key for the Windows Azure Storage account.
            /// </summary>
            public string StorageAccessKey
            {
                get { return this._storageAccessKey; }
                set { this._storageAccessKey = value; }
            }
            
            private Uri _uri;
            
            /// <summary>
            /// The URI of the DAC file in stored in Windows Azure Blob Storage.
            /// </summary>
            public Uri Uri
            {
                get { return this._uri; }
                set { this._uri = value; }
            }
            
            /// <summary>
            /// Initializes a new instance of the BlobCredentialsParameter
            /// class.
            /// </summary>
            public BlobCredentialsParameter()
            {
            }
        }
        
        /// <summary>
        /// Connection information for the SQL Server Database.
        /// </summary>
        public partial class ConnectionInfoParameter
        {
            private string _databaseName;
            
            /// <summary>
            /// The name of the database.
            /// </summary>
            public string DatabaseName
            {
                get { return this._databaseName; }
                set { this._databaseName = value; }
            }
            
            private string _password;
            
            /// <summary>
            /// The password for the database user.
            /// </summary>
            public string Password
            {
                get { return this._password; }
                set { this._password = value; }
            }
            
            private string _serverName;
            
            /// <summary>
            /// The SQL server name.
            /// </summary>
            public string ServerName
            {
                get { return this._serverName; }
                set { this._serverName = value; }
            }
            
            private string _userName;
            
            /// <summary>
            /// The username of the database user.
            /// </summary>
            public string UserName
            {
                get { return this._userName; }
                set { this._userName = value; }
            }
            
            /// <summary>
            /// Initializes a new instance of the ConnectionInfoParameter class.
            /// </summary>
            public ConnectionInfoParameter()
            {
            }
        }
    }
    
    /// <summary>
    /// The response structure for the DAC GetStatus operation
    /// </summary>
    public partial class DacGetStatusResponse : OperationResponse, IEnumerable<DacGetStatusResponse.StatusInfo>
    {
        private IList<DacGetStatusResponse.StatusInfo> _statusInfoList;
        
        /// <summary>
        /// The list of statuses relevant to this import/export request.
        /// </summary>
        public IList<DacGetStatusResponse.StatusInfo> StatusInfoList
        {
            get { return this._statusInfoList; }
            set { this._statusInfoList = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the DacGetStatusResponse class.
        /// </summary>
        public DacGetStatusResponse()
        {
            this._statusInfoList = new List<DacGetStatusResponse.StatusInfo>();
        }
        
        /// <summary>
        /// Gets the sequence of StatusInfoList.
        /// </summary>
        public IEnumerator<DacGetStatusResponse.StatusInfo> GetEnumerator()
        {
            return this.StatusInfoList.GetEnumerator();
        }
        
        /// <summary>
        /// Gets the sequence of StatusInfoList.
        /// </summary>
        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
        {
            return this.GetEnumerator();
        }
        
        /// <summary>
        /// Status of a DAC import
        /// </summary>
        public partial class StatusInfo
        {
            private Uri _blobUri;
            
            /// <summary>
            /// The URI of the DAC file stored in Windows Azure Blob Storage to
            /// be imported.
            /// </summary>
            public Uri BlobUri
            {
                get { return this._blobUri; }
                set { this._blobUri = value; }
            }
            
            private string _databaseName;
            
            /// <summary>
            /// The name of the database into which this DAC will be imported.
            /// </summary>
            public string DatabaseName
            {
                get { return this._databaseName; }
                set { this._databaseName = value; }
            }
            
            private string _errorMessage;
            
            /// <summary>
            /// The error message of the request if the request failed in some
            /// way.
            /// </summary>
            public string ErrorMessage
            {
                get { return this._errorMessage; }
                set { this._errorMessage = value; }
            }
            
            private DateTime _lastModifiedTime;
            
            /// <summary>
            /// The last time the status changed.
            /// </summary>
            public DateTime LastModifiedTime
            {
                get { return this._lastModifiedTime; }
                set { this._lastModifiedTime = value; }
            }
            
            private DateTime _queuedTime;
            
            /// <summary>
            /// The time at which the import/export request was queued and the
            /// process initiated.
            /// </summary>
            public DateTime QueuedTime
            {
                get { return this._queuedTime; }
                set { this._queuedTime = value; }
            }
            
            private string _requestId;
            
            /// <summary>
            /// The request ID of this import/export request, so that it can be
            /// tracked with future calls to GetStatus.
            /// </summary>
            public string RequestId
            {
                get { return this._requestId; }
                set { this._requestId = value; }
            }
            
            private string _requestType;
            
            /// <summary>
            /// The type (Import/Export) of this request.
            /// </summary>
            public string RequestType
            {
                get { return this._requestType; }
                set { this._requestType = value; }
            }
            
            private string _serverName;
            
            /// <summary>
            /// The name of the SQL database server into which this DAC will be
            /// imported or from which it will be exported.
            /// </summary>
            public string ServerName
            {
                get { return this._serverName; }
                set { this._serverName = value; }
            }
            
            private string _status;
            
            /// <summary>
            /// The status of the import/export request.
            /// </summary>
            public string Status
            {
                get { return this._status; }
                set { this._status = value; }
            }
            
            /// <summary>
            /// Initializes a new instance of the StatusInfo class.
            /// </summary>
            public StatusInfo()
            {
            }
        }
    }
    
    /// <summary>
    /// Response for an DAC Import/Export request.
    /// </summary>
    public partial class DacImportExportResponse : OperationResponse
    {
        private string _guid;
        
        /// <summary>
        /// The operation's identifier.
        /// </summary>
        public string Guid
        {
            get { return this._guid; }
            set { this._guid = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the DacImportExportResponse class.
        /// </summary>
        public DacImportExportResponse()
        {
        }
    }
    
    /// <summary>
    /// Parameters supplied to the DAC Import operation.
    /// </summary>
    public partial class DacImportParameters
    {
        private DacImportParameters.BlobCredentialsParameter _blobCredentials;
        
        /// <summary>
        /// Credentials for getting the DAC.
        /// </summary>
        public DacImportParameters.BlobCredentialsParameter BlobCredentials
        {
            get { return this._blobCredentials; }
            set { this._blobCredentials = value; }
        }
        
        private DacImportParameters.ConnectionInfoParameter _connectionInfo;
        
        /// <summary>
        /// Connection information for the SQL Server Database.
        /// </summary>
        public DacImportParameters.ConnectionInfoParameter ConnectionInfo
        {
            get { return this._connectionInfo; }
            set { this._connectionInfo = value; }
        }
        
        private int _databaseSizeInGB;
        
        /// <summary>
        /// The size of this database.
        /// </summary>
        public int DatabaseSizeInGB
        {
            get { return this._databaseSizeInGB; }
            set { this._databaseSizeInGB = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the DacImportParameters class.
        /// </summary>
        public DacImportParameters()
        {
        }
        
        /// <summary>
        /// Credentials for getting the DAC
        /// </summary>
        public partial class BlobCredentialsParameter
        {
            private string _storageAccessKey;
            
            /// <summary>
            /// The key for the Windows Azure Storage account.
            /// </summary>
            public string StorageAccessKey
            {
                get { return this._storageAccessKey; }
                set { this._storageAccessKey = value; }
            }
            
            private Uri _uri;
            
            public Uri Uri
            {
                get { return this._uri; }
                set { this._uri = value; }
            }
            
            /// <summary>
            /// Initializes a new instance of the BlobCredentialsParameter
            /// class.
            /// </summary>
            public BlobCredentialsParameter()
            {
            }
        }
        
        /// <summary>
        /// Connection information for the SQL Server Database.
        /// </summary>
        public partial class ConnectionInfoParameter
        {
            private string _databaseName;
            
            /// <summary>
            /// The name of the database.
            /// </summary>
            public string DatabaseName
            {
                get { return this._databaseName; }
                set { this._databaseName = value; }
            }
            
            private string _password;
            
            /// <summary>
            /// The password for the database user.
            /// </summary>
            public string Password
            {
                get { return this._password; }
                set { this._password = value; }
            }
            
            private string _serverName;
            
            /// <summary>
            /// The SQL server name.
            /// </summary>
            public string ServerName
            {
                get { return this._serverName; }
                set { this._serverName = value; }
            }
            
            private string _userName;
            
            /// <summary>
            /// The username of the database user.
            /// </summary>
            public string UserName
            {
                get { return this._userName; }
                set { this._userName = value; }
            }
            
            /// <summary>
            /// Initializes a new instance of the ConnectionInfoParameter class.
            /// </summary>
            public ConnectionInfoParameter()
            {
            }
        }
    }
    
    /// <summary>
    /// Parameters supplied to the Create Database operation.
    /// </summary>
    public partial class DatabaseCreateParameters
    {
        private string _collationName;
        
        /// <summary>
        /// The collation name for the new database.
        /// </summary>
        public string CollationName
        {
            get { return this._collationName; }
            set { this._collationName = value; }
        }
        
        private string _edition;
        
        /// <summary>
        /// The edition for the new database.
        /// </summary>
        public string Edition
        {
            get { return this._edition; }
            set { this._edition = value; }
        }
        
        private long _maximumDatabaseSizeInGB;
        
        /// <summary>
        /// Maximum size of this database, in Gigabytes.
        /// </summary>
        public long MaximumDatabaseSizeInGB
        {
            get { return this._maximumDatabaseSizeInGB; }
            set { this._maximumDatabaseSizeInGB = value; }
        }
        
        private string _name;
        
        /// <summary>
        /// The name for the new database.
        /// </summary>
        public string Name
        {
            get { return this._name; }
            set { this._name = value; }
        }
        
        private string _serviceObjectiveId;
        
        /// <summary>
        /// The id of this service objective.
        /// </summary>
        public string ServiceObjectiveId
        {
            get { return this._serviceObjectiveId; }
            set { this._serviceObjectiveId = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the DatabaseCreateParameters class.
        /// </summary>
        public DatabaseCreateParameters()
        {
        }
    }
    
    /// <summary>
    /// A standard service response including an HTTP status code and request
    /// ID.
    /// </summary>
    public partial class DatabaseCreateResponse : OperationResponse
    {
        private string _collationName;
        
        /// <summary>
        /// This database resource's collation name.
        /// </summary>
        public string CollationName
        {
            get { return this._collationName; }
            set { this._collationName = value; }
        }
        
        private DateTime _creationDate;
        
        /// <summary>
        /// The date this database was created.
        /// </summary>
        public DateTime CreationDate
        {
            get { return this._creationDate; }
            set { this._creationDate = value; }
        }
        
        private string _edition;
        
        /// <summary>
        /// This database resource's edition.
        /// </summary>
        public string Edition
        {
            get { return this._edition; }
            set { this._edition = value; }
        }
        
        private int _id;
        
        /// <summary>
        /// The id of the database.
        /// </summary>
        public int Id
        {
            get { return this._id; }
            set { this._id = value; }
        }
        
        private bool _isFederationRoot;
        
        /// <summary>
        /// Determines if this database is a federation root.
        /// </summary>
        public bool IsFederationRoot
        {
            get { return this._isFederationRoot; }
            set { this._isFederationRoot = value; }
        }
        
        private bool _isSystemObject;
        
        /// <summary>
        /// Determines if this database a system object.
        /// </summary>
        public bool IsSystemObject
        {
            get { return this._isSystemObject; }
            set { this._isSystemObject = value; }
        }
        
        private long _maximumDatabaseSizeInGB;
        
        /// <summary>
        /// Maximum size of this database, in Gigabytes.
        /// </summary>
        public long MaximumDatabaseSizeInGB
        {
            get { return this._maximumDatabaseSizeInGB; }
            set { this._maximumDatabaseSizeInGB = value; }
        }
        
        private string _name;
        
        /// <summary>
        /// The name of the database.
        /// </summary>
        public string Name
        {
            get { return this._name; }
            set { this._name = value; }
        }
        
        private string _serviceObjectiveAssignmentErrorCode;
        
        /// <summary>
        /// The error code for this sevice objective.
        /// </summary>
        public string ServiceObjectiveAssignmentErrorCode
        {
            get { return this._serviceObjectiveAssignmentErrorCode; }
            set { this._serviceObjectiveAssignmentErrorCode = value; }
        }
        
        private string _serviceObjectiveAssignmentErrorDescription;
        
        /// <summary>
        /// The error description, if any.
        /// </summary>
        public string ServiceObjectiveAssignmentErrorDescription
        {
            get { return this._serviceObjectiveAssignmentErrorDescription; }
            set { this._serviceObjectiveAssignmentErrorDescription = value; }
        }
        
        private string _serviceObjectiveAssignmentState;
        
        /// <summary>
        /// The state of the current assignment.
        /// </summary>
        public string ServiceObjectiveAssignmentState
        {
            get { return this._serviceObjectiveAssignmentState; }
            set { this._serviceObjectiveAssignmentState = value; }
        }
        
        private string _serviceObjectiveAssignmentStateDescription;
        
        /// <summary>
        /// The state description.
        /// </summary>
        public string ServiceObjectiveAssignmentStateDescription
        {
            get { return this._serviceObjectiveAssignmentStateDescription; }
            set { this._serviceObjectiveAssignmentStateDescription = value; }
        }
        
        private string _serviceObjectiveAssignmentSuccessDate;
        
        /// <summary>
        /// The date the service's assignment succeeded.
        /// </summary>
        public string ServiceObjectiveAssignmentSuccessDate
        {
            get { return this._serviceObjectiveAssignmentSuccessDate; }
            set { this._serviceObjectiveAssignmentSuccessDate = value; }
        }
        
        private string _serviceObjectiveId;
        
        /// <summary>
        /// The id of this service objective.
        /// </summary>
        public string ServiceObjectiveId
        {
            get { return this._serviceObjectiveId; }
            set { this._serviceObjectiveId = value; }
        }
        
        private string _sizeMB;
        
        /// <summary>
        /// The size of this database in megabytes (MB).
        /// </summary>
        public string SizeMB
        {
            get { return this._sizeMB; }
            set { this._sizeMB = value; }
        }
        
        private string _state;
        
        /// <summary>
        /// The state of the database.
        /// </summary>
        public string State
        {
            get { return this._state; }
            set { this._state = value; }
        }
        
        private string _type;
        
        /// <summary>
        /// The type of resource.
        /// </summary>
        public string Type
        {
            get { return this._type; }
            set { this._type = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the DatabaseCreateResponse class.
        /// </summary>
        public DatabaseCreateResponse()
        {
        }
    }
    
    /// <summary>
    /// Specifies the edition of the SQL database
    /// </summary>
    public static partial class DatabaseEditions
    {
        /// <summary>
        /// The Web Edition Database is best suited for small Web applications
        /// and workgroup or departmental applications. This edition supports
        /// a database with a maximum size of 1 or 5 GB of data.
        /// </summary>
        public const string Web = "Web";
        
        /// <summary>
        /// The Business Edition Database is best suited for independent
        /// software vendors (ISVs), line-of-business (LOB) applications, and
        /// enterprise applications. This edition supports a database of up to
        /// 150 GB of data, in 10GB increments up to 50GB, and then 50 GB
        /// increments.
        /// </summary>
        public const string Business = "Business";
    }
    
    /// <summary>
    /// A standard service response including an HTTP status code and request
    /// ID.
    /// </summary>
    public partial class DatabaseGetResponse : OperationResponse
    {
        private string _collationName;
        
        /// <summary>
        /// This database resource's collation name.
        /// </summary>
        public string CollationName
        {
            get { return this._collationName; }
            set { this._collationName = value; }
        }
        
        private DateTime _creationDate;
        
        /// <summary>
        /// The date this database was created.
        /// </summary>
        public DateTime CreationDate
        {
            get { return this._creationDate; }
            set { this._creationDate = value; }
        }
        
        private string _edition;
        
        /// <summary>
        /// This database resource's edition.
        /// </summary>
        public string Edition
        {
            get { return this._edition; }
            set { this._edition = value; }
        }
        
        private int _id;
        
        /// <summary>
        /// The id of the database.
        /// </summary>
        public int Id
        {
            get { return this._id; }
            set { this._id = value; }
        }
        
        private bool _isFederationRoot;
        
        /// <summary>
        /// Determines if this database is a federation root.
        /// </summary>
        public bool IsFederationRoot
        {
            get { return this._isFederationRoot; }
            set { this._isFederationRoot = value; }
        }
        
        private bool _isSystemObject;
        
        /// <summary>
        /// Determines if this database a system object.
        /// </summary>
        public bool IsSystemObject
        {
            get { return this._isSystemObject; }
            set { this._isSystemObject = value; }
        }
        
        private long _maximumDatabaseSizeInGB;
        
        /// <summary>
        /// Maximum size of this database, in Gigabytes.
        /// </summary>
        public long MaximumDatabaseSizeInGB
        {
            get { return this._maximumDatabaseSizeInGB; }
            set { this._maximumDatabaseSizeInGB = value; }
        }
        
        private string _name;
        
        /// <summary>
        /// The name of the database.
        /// </summary>
        public string Name
        {
            get { return this._name; }
            set { this._name = value; }
        }
        
        private string _serviceObjectiveAssignmentErrorCode;
        
        /// <summary>
        /// The error code for this sevice objective.
        /// </summary>
        public string ServiceObjectiveAssignmentErrorCode
        {
            get { return this._serviceObjectiveAssignmentErrorCode; }
            set { this._serviceObjectiveAssignmentErrorCode = value; }
        }
        
        private string _serviceObjectiveAssignmentErrorDescription;
        
        /// <summary>
        /// The error description, if any.
        /// </summary>
        public string ServiceObjectiveAssignmentErrorDescription
        {
            get { return this._serviceObjectiveAssignmentErrorDescription; }
            set { this._serviceObjectiveAssignmentErrorDescription = value; }
        }
        
        private string _serviceObjectiveAssignmentState;
        
        /// <summary>
        /// The state of the current assignment.
        /// </summary>
        public string ServiceObjectiveAssignmentState
        {
            get { return this._serviceObjectiveAssignmentState; }
            set { this._serviceObjectiveAssignmentState = value; }
        }
        
        private string _serviceObjectiveAssignmentStateDescription;
        
        /// <summary>
        /// The state description.
        /// </summary>
        public string ServiceObjectiveAssignmentStateDescription
        {
            get { return this._serviceObjectiveAssignmentStateDescription; }
            set { this._serviceObjectiveAssignmentStateDescription = value; }
        }
        
        private string _serviceObjectiveAssignmentSuccessDate;
        
        /// <summary>
        /// The date the service's assignment succeeded.
        /// </summary>
        public string ServiceObjectiveAssignmentSuccessDate
        {
            get { return this._serviceObjectiveAssignmentSuccessDate; }
            set { this._serviceObjectiveAssignmentSuccessDate = value; }
        }
        
        private string _serviceObjectiveId;
        
        /// <summary>
        /// The id of this service objective.
        /// </summary>
        public string ServiceObjectiveId
        {
            get { return this._serviceObjectiveId; }
            set { this._serviceObjectiveId = value; }
        }
        
        private string _sizeMB;
        
        /// <summary>
        /// The size of this database in megabytes (MB).
        /// </summary>
        public string SizeMB
        {
            get { return this._sizeMB; }
            set { this._sizeMB = value; }
        }
        
        private string _state;
        
        /// <summary>
        /// The state of the database.
        /// </summary>
        public string State
        {
            get { return this._state; }
            set { this._state = value; }
        }
        
        private string _type;
        
        /// <summary>
        /// The type of resource.
        /// </summary>
        public string Type
        {
            get { return this._type; }
            set { this._type = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the DatabaseGetResponse class.
        /// </summary>
        public DatabaseGetResponse()
        {
        }
    }
    
    /// <summary>
    /// Response containing the list of databases for a given server.
    /// </summary>
    public partial class DatabaseListResponse : OperationResponse, IEnumerable<DatabaseListResponse.Database>
    {
        private IList<DatabaseListResponse.Database> _databases;
        
        /// <summary>
        /// The SQL Server databases that are housed in a server.
        /// </summary>
        public IList<DatabaseListResponse.Database> Databases
        {
            get { return this._databases; }
            set { this._databases = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the DatabaseListResponse class.
        /// </summary>
        public DatabaseListResponse()
        {
            this._databases = new List<DatabaseListResponse.Database>();
        }
        
        /// <summary>
        /// Gets the sequence of Databases.
        /// </summary>
        public IEnumerator<DatabaseListResponse.Database> GetEnumerator()
        {
            return this.Databases.GetEnumerator();
        }
        
        /// <summary>
        /// Gets the sequence of Databases.
        /// </summary>
        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
        {
            return this.GetEnumerator();
        }
        
        public partial class Database
        {
            private string _collationName;
            
            /// <summary>
            /// This database resource's collation name.
            /// </summary>
            public string CollationName
            {
                get { return this._collationName; }
                set { this._collationName = value; }
            }
            
            private DateTime _creationDate;
            
            /// <summary>
            /// The date this database was created.
            /// </summary>
            public DateTime CreationDate
            {
                get { return this._creationDate; }
                set { this._creationDate = value; }
            }
            
            private string _edition;
            
            /// <summary>
            /// This database resource's edition.
            /// </summary>
            public string Edition
            {
                get { return this._edition; }
                set { this._edition = value; }
            }
            
            private int _id;
            
            /// <summary>
            /// The id of the database.
            /// </summary>
            public int Id
            {
                get { return this._id; }
                set { this._id = value; }
            }
            
            private bool _isFederationRoot;
            
            /// <summary>
            /// Determines if this database is a federation root.
            /// </summary>
            public bool IsFederationRoot
            {
                get { return this._isFederationRoot; }
                set { this._isFederationRoot = value; }
            }
            
            private bool _isSystemObject;
            
            /// <summary>
            /// Determines if this database a system object.
            /// </summary>
            public bool IsSystemObject
            {
                get { return this._isSystemObject; }
                set { this._isSystemObject = value; }
            }
            
            private long _maximumDatabaseSizeInGB;
            
            /// <summary>
            /// Maximum size of this database, in Gigabytes.
            /// </summary>
            public long MaximumDatabaseSizeInGB
            {
                get { return this._maximumDatabaseSizeInGB; }
                set { this._maximumDatabaseSizeInGB = value; }
            }
            
            private string _name;
            
            /// <summary>
            /// The name of the database.
            /// </summary>
            public string Name
            {
                get { return this._name; }
                set { this._name = value; }
            }
            
            private string _serviceObjectiveAssignmentErrorCode;
            
            /// <summary>
            /// The error code for this sevice objective.
            /// </summary>
            public string ServiceObjectiveAssignmentErrorCode
            {
                get { return this._serviceObjectiveAssignmentErrorCode; }
                set { this._serviceObjectiveAssignmentErrorCode = value; }
            }
            
            private string _serviceObjectiveAssignmentErrorDescription;
            
            /// <summary>
            /// The error description, if any.
            /// </summary>
            public string ServiceObjectiveAssignmentErrorDescription
            {
                get { return this._serviceObjectiveAssignmentErrorDescription; }
                set { this._serviceObjectiveAssignmentErrorDescription = value; }
            }
            
            private string _serviceObjectiveAssignmentState;
            
            /// <summary>
            /// The state of the current assignment.
            /// </summary>
            public string ServiceObjectiveAssignmentState
            {
                get { return this._serviceObjectiveAssignmentState; }
                set { this._serviceObjectiveAssignmentState = value; }
            }
            
            private string _serviceObjectiveAssignmentStateDescription;
            
            /// <summary>
            /// The state description.
            /// </summary>
            public string ServiceObjectiveAssignmentStateDescription
            {
                get { return this._serviceObjectiveAssignmentStateDescription; }
                set { this._serviceObjectiveAssignmentStateDescription = value; }
            }
            
            private string _serviceObjectiveAssignmentSuccessDate;
            
            /// <summary>
            /// The date the service's assignment succeeded.
            /// </summary>
            public string ServiceObjectiveAssignmentSuccessDate
            {
                get { return this._serviceObjectiveAssignmentSuccessDate; }
                set { this._serviceObjectiveAssignmentSuccessDate = value; }
            }
            
            private string _serviceObjectiveId;
            
            /// <summary>
            /// The id of this service objective.
            /// </summary>
            public string ServiceObjectiveId
            {
                get { return this._serviceObjectiveId; }
                set { this._serviceObjectiveId = value; }
            }
            
            private string _sizeMB;
            
            /// <summary>
            /// The size of this database in megabytes (MB).
            /// </summary>
            public string SizeMB
            {
                get { return this._sizeMB; }
                set { this._sizeMB = value; }
            }
            
            private string _state;
            
            /// <summary>
            /// The state of the database.
            /// </summary>
            public string State
            {
                get { return this._state; }
                set { this._state = value; }
            }
            
            private string _type;
            
            /// <summary>
            /// The type of resource.
            /// </summary>
            public string Type
            {
                get { return this._type; }
                set { this._type = value; }
            }
            
            /// <summary>
            /// Initializes a new instance of the Database class.
            /// </summary>
            public Database()
            {
            }
        }
    }
    
    /// <summary>
    /// Response containing the database operation for a given operation Guid.
    /// </summary>
    public partial class DatabaseOperationGetResponse : OperationResponse
    {
        private string _databaseName;
        
        /// <summary>
        /// Name of the SQL Database on which the operation is performed.
        /// </summary>
        public string DatabaseName
        {
            get { return this._databaseName; }
            set { this._databaseName = value; }
        }
        
        private string _error;
        
        /// <summary>
        /// Description of the error that occurred during a failed operation.
        /// </summary>
        public string Error
        {
            get { return this._error; }
            set { this._error = value; }
        }
        
        private int _errorCode;
        
        /// <summary>
        /// Code indicating the error that occurred during a failed operation.
        /// </summary>
        public int ErrorCode
        {
            get { return this._errorCode; }
            set { this._errorCode = value; }
        }
        
        private int _errorSeverity;
        
        /// <summary>
        /// Severity level of the error that occurred during a failed operation.
        /// </summary>
        public int ErrorSeverity
        {
            get { return this._errorSeverity; }
            set { this._errorSeverity = value; }
        }
        
        private int _errorState;
        
        /// <summary>
        /// Error State.
        /// </summary>
        public int ErrorState
        {
            get { return this._errorState; }
            set { this._errorState = value; }
        }
        
        private string _id;
        
        /// <summary>
        /// Unique identifier of the operation..
        /// </summary>
        public string Id
        {
            get { return this._id; }
            set { this._id = value; }
        }
        
        private DateTime _lastModifyTime;
        
        /// <summary>
        /// Timestamp when the record was last modified for a long running
        /// operation.
        /// </summary>
        public DateTime LastModifyTime
        {
            get { return this._lastModifyTime; }
            set { this._lastModifyTime = value; }
        }
        
        private string _name;
        
        /// <summary>
        /// The name of the operation.
        /// </summary>
        public string Name
        {
            get { return this._name; }
            set { this._name = value; }
        }
        
        private string _parentLink;
        
        /// <summary>
        /// The ParentLink of the operation.
        /// </summary>
        public string ParentLink
        {
            get { return this._parentLink; }
            set { this._parentLink = value; }
        }
        
        private int _percentComplete;
        
        /// <summary>
        /// Percentage of operation that has completed.
        /// </summary>
        public int PercentComplete
        {
            get { return this._percentComplete; }
            set { this._percentComplete = value; }
        }
        
        private string _selfLink;
        
        /// <summary>
        /// The SelfLink of the operation.
        /// </summary>
        public string SelfLink
        {
            get { return this._selfLink; }
            set { this._selfLink = value; }
        }
        
        private string _sessionActivityId;
        
        /// <summary>
        /// Session scoped ID of the operation.
        /// </summary>
        public string SessionActivityId
        {
            get { return this._sessionActivityId; }
            set { this._sessionActivityId = value; }
        }
        
        private DateTime _startTime;
        
        /// <summary>
        /// Timestamp when the operation started.
        /// </summary>
        public DateTime StartTime
        {
            get { return this._startTime; }
            set { this._startTime = value; }
        }
        
        private string _state;
        
        /// <summary>
        /// The state of the operation.
        /// </summary>
        public string State
        {
            get { return this._state; }
            set { this._state = value; }
        }
        
        private int _stateId;
        
        /// <summary>
        /// Current State of the long running operation in numeric format.
        /// </summary>
        public int StateId
        {
            get { return this._stateId; }
            set { this._stateId = value; }
        }
        
        private string _type;
        
        /// <summary>
        /// The type of resource.
        /// </summary>
        public string Type
        {
            get { return this._type; }
            set { this._type = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the DatabaseOperationGetResponse
        /// class.
        /// </summary>
        public DatabaseOperationGetResponse()
        {
        }
    }
    
    /// <summary>
    /// Response containing the list of database operations for a given server
    /// or database.
    /// </summary>
    public partial class DatabaseOperationListResponse : OperationResponse, IEnumerable<DatabaseOperationListResponse.DatabaseOperation>
    {
        private IList<DatabaseOperationListResponse.DatabaseOperation> _databaseOperations;
        
        /// <summary>
        /// The list of database operations' response.
        /// </summary>
        public IList<DatabaseOperationListResponse.DatabaseOperation> DatabaseOperations
        {
            get { return this._databaseOperations; }
            set { this._databaseOperations = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the DatabaseOperationListResponse
        /// class.
        /// </summary>
        public DatabaseOperationListResponse()
        {
            this._databaseOperations = new List<DatabaseOperationListResponse.DatabaseOperation>();
        }
        
        /// <summary>
        /// Gets the sequence of DatabaseOperations.
        /// </summary>
        public IEnumerator<DatabaseOperationListResponse.DatabaseOperation> GetEnumerator()
        {
            return this.DatabaseOperations.GetEnumerator();
        }
        
        /// <summary>
        /// Gets the sequence of DatabaseOperations.
        /// </summary>
        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
        {
            return this.GetEnumerator();
        }
        
        public partial class DatabaseOperation
        {
            private string _databaseName;
            
            /// <summary>
            /// Name of the SQL Database on which the operation is performed.
            /// </summary>
            public string DatabaseName
            {
                get { return this._databaseName; }
                set { this._databaseName = value; }
            }
            
            private string _error;
            
            /// <summary>
            /// Description of the error that occurred during a failed
            /// operation.
            /// </summary>
            public string Error
            {
                get { return this._error; }
                set { this._error = value; }
            }
            
            private int _errorCode;
            
            /// <summary>
            /// Code indicating the error that occurred during a failed
            /// operation.
            /// </summary>
            public int ErrorCode
            {
                get { return this._errorCode; }
                set { this._errorCode = value; }
            }
            
            private int _errorSeverity;
            
            /// <summary>
            /// Severity level of the error that occurred during a failed
            /// operation.
            /// </summary>
            public int ErrorSeverity
            {
                get { return this._errorSeverity; }
                set { this._errorSeverity = value; }
            }
            
            private int _errorState;
            
            /// <summary>
            /// Error State.
            /// </summary>
            public int ErrorState
            {
                get { return this._errorState; }
                set { this._errorState = value; }
            }
            
            private string _id;
            
            /// <summary>
            /// Unique identifier of the operation..
            /// </summary>
            public string Id
            {
                get { return this._id; }
                set { this._id = value; }
            }
            
            private DateTime _lastModifyTime;
            
            /// <summary>
            /// Timestamp when the record was last modified for a long running
            /// operation.
            /// </summary>
            public DateTime LastModifyTime
            {
                get { return this._lastModifyTime; }
                set { this._lastModifyTime = value; }
            }
            
            private string _name;
            
            /// <summary>
            /// The name of the operation.
            /// </summary>
            public string Name
            {
                get { return this._name; }
                set { this._name = value; }
            }
            
            private string _parentLink;
            
            /// <summary>
            /// The ParentLink of the operation.
            /// </summary>
            public string ParentLink
            {
                get { return this._parentLink; }
                set { this._parentLink = value; }
            }
            
            private int _percentComplete;
            
            /// <summary>
            /// Percentage of operation that has completed.
            /// </summary>
            public int PercentComplete
            {
                get { return this._percentComplete; }
                set { this._percentComplete = value; }
            }
            
            private string _selfLink;
            
            /// <summary>
            /// The SelfLink of the operation.
            /// </summary>
            public string SelfLink
            {
                get { return this._selfLink; }
                set { this._selfLink = value; }
            }
            
            private string _sessionActivityId;
            
            /// <summary>
            /// Session scoped ID of the operation.
            /// </summary>
            public string SessionActivityId
            {
                get { return this._sessionActivityId; }
                set { this._sessionActivityId = value; }
            }
            
            private DateTime _startTime;
            
            /// <summary>
            /// Timestamp when the operation started.
            /// </summary>
            public DateTime StartTime
            {
                get { return this._startTime; }
                set { this._startTime = value; }
            }
            
            private string _state;
            
            /// <summary>
            /// The state of the operation.
            /// </summary>
            public string State
            {
                get { return this._state; }
                set { this._state = value; }
            }
            
            private int _stateId;
            
            /// <summary>
            /// Current State of the long running operation in numeric format.
            /// </summary>
            public int StateId
            {
                get { return this._stateId; }
                set { this._stateId = value; }
            }
            
            private string _type;
            
            /// <summary>
            /// The type of resource.
            /// </summary>
            public string Type
            {
                get { return this._type; }
                set { this._type = value; }
            }
            
            /// <summary>
            /// Initializes a new instance of the DatabaseOperation class.
            /// </summary>
            public DatabaseOperation()
            {
            }
        }
    }
    
    /// <summary>
    /// Parameters supplied to the Create Database operation.
    /// </summary>
    public partial class DatabaseUpdateParameters
    {
        private string _collationName;
        
        /// <summary>
        /// The collation name for the new database.
        /// </summary>
        public string CollationName
        {
            get { return this._collationName; }
            set { this._collationName = value; }
        }
        
        private string _edition;
        
        /// <summary>
        /// The edition for the new database.
        /// </summary>
        public string Edition
        {
            get { return this._edition; }
            set { this._edition = value; }
        }
        
        private int _id;
        
        /// <summary>
        /// The id of the database.
        /// </summary>
        public int Id
        {
            get { return this._id; }
            set { this._id = value; }
        }
        
        private long _maximumDatabaseSizeInGB;
        
        /// <summary>
        /// Maximum size of this database, in Gigabytes.
        /// </summary>
        public long MaximumDatabaseSizeInGB
        {
            get { return this._maximumDatabaseSizeInGB; }
            set { this._maximumDatabaseSizeInGB = value; }
        }
        
        private string _name;
        
        /// <summary>
        /// The name of the database.
        /// </summary>
        public string Name
        {
            get { return this._name; }
            set { this._name = value; }
        }
        
        private string _serviceObjectiveId;
        
        /// <summary>
        /// The id of this service objective.
        /// </summary>
        public string ServiceObjectiveId
        {
            get { return this._serviceObjectiveId; }
            set { this._serviceObjectiveId = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the DatabaseUpdateParameters class.
        /// </summary>
        public DatabaseUpdateParameters()
        {
        }
    }
    
    /// <summary>
    /// A standard service response including an HTTP status code and request
    /// ID.
    /// </summary>
    public partial class DatabaseUpdateResponse : OperationResponse
    {
        private string _collationName;
        
        /// <summary>
        /// This database resource's collation name.
        /// </summary>
        public string CollationName
        {
            get { return this._collationName; }
            set { this._collationName = value; }
        }
        
        private DateTime _creationDate;
        
        /// <summary>
        /// The date this database was created.
        /// </summary>
        public DateTime CreationDate
        {
            get { return this._creationDate; }
            set { this._creationDate = value; }
        }
        
        private string _edition;
        
        /// <summary>
        /// This database resource's edition.
        /// </summary>
        public string Edition
        {
            get { return this._edition; }
            set { this._edition = value; }
        }
        
        private int _id;
        
        /// <summary>
        /// The id of the database.
        /// </summary>
        public int Id
        {
            get { return this._id; }
            set { this._id = value; }
        }
        
        private bool _isFederationRoot;
        
        /// <summary>
        /// Determines if this database is a federation root.
        /// </summary>
        public bool IsFederationRoot
        {
            get { return this._isFederationRoot; }
            set { this._isFederationRoot = value; }
        }
        
        private bool _isSystemObject;
        
        /// <summary>
        /// Determines if this database a system object.
        /// </summary>
        public bool IsSystemObject
        {
            get { return this._isSystemObject; }
            set { this._isSystemObject = value; }
        }
        
        private long _maximumDatabaseSizeInGB;
        
        /// <summary>
        /// Maximum size of this database, in Gigabytes.
        /// </summary>
        public long MaximumDatabaseSizeInGB
        {
            get { return this._maximumDatabaseSizeInGB; }
            set { this._maximumDatabaseSizeInGB = value; }
        }
        
        private string _name;
        
        /// <summary>
        /// The name of the database.
        /// </summary>
        public string Name
        {
            get { return this._name; }
            set { this._name = value; }
        }
        
        private string _serviceObjectiveAssignmentErrorCode;
        
        /// <summary>
        /// The error code for this sevice objective.
        /// </summary>
        public string ServiceObjectiveAssignmentErrorCode
        {
            get { return this._serviceObjectiveAssignmentErrorCode; }
            set { this._serviceObjectiveAssignmentErrorCode = value; }
        }
        
        private string _serviceObjectiveAssignmentErrorDescription;
        
        /// <summary>
        /// The error description, if any.
        /// </summary>
        public string ServiceObjectiveAssignmentErrorDescription
        {
            get { return this._serviceObjectiveAssignmentErrorDescription; }
            set { this._serviceObjectiveAssignmentErrorDescription = value; }
        }
        
        private string _serviceObjectiveAssignmentState;
        
        /// <summary>
        /// The state of the current assignment.
        /// </summary>
        public string ServiceObjectiveAssignmentState
        {
            get { return this._serviceObjectiveAssignmentState; }
            set { this._serviceObjectiveAssignmentState = value; }
        }
        
        private string _serviceObjectiveAssignmentStateDescription;
        
        /// <summary>
        /// The state description.
        /// </summary>
        public string ServiceObjectiveAssignmentStateDescription
        {
            get { return this._serviceObjectiveAssignmentStateDescription; }
            set { this._serviceObjectiveAssignmentStateDescription = value; }
        }
        
        private string _serviceObjectiveAssignmentSuccessDate;
        
        /// <summary>
        /// The date the service's assignment succeeded.
        /// </summary>
        public string ServiceObjectiveAssignmentSuccessDate
        {
            get { return this._serviceObjectiveAssignmentSuccessDate; }
            set { this._serviceObjectiveAssignmentSuccessDate = value; }
        }
        
        private string _serviceObjectiveId;
        
        /// <summary>
        /// The id of this service objective.
        /// </summary>
        public string ServiceObjectiveId
        {
            get { return this._serviceObjectiveId; }
            set { this._serviceObjectiveId = value; }
        }
        
        private string _sizeMB;
        
        /// <summary>
        /// The size of this database in megabytes (MB).
        /// </summary>
        public string SizeMB
        {
            get { return this._sizeMB; }
            set { this._sizeMB = value; }
        }
        
        private string _state;
        
        /// <summary>
        /// The state of the database.
        /// </summary>
        public string State
        {
            get { return this._state; }
            set { this._state = value; }
        }
        
        private string _type;
        
        /// <summary>
        /// The type of resource.
        /// </summary>
        public string Type
        {
            get { return this._type; }
            set { this._type = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the DatabaseUpdateResponse class.
        /// </summary>
        public DatabaseUpdateResponse()
        {
        }
    }
    
    /// <summary>
    /// The parameters for the Create Firewall Rule operation
    /// </summary>
    public partial class FirewallRuleCreateParameters
    {
        private string _endIPAddress;
        
        /// <summary>
        /// The ending IP address applied to this firewall rule.
        /// </summary>
        public string EndIPAddress
        {
            get { return this._endIPAddress; }
            set { this._endIPAddress = value; }
        }
        
        private string _name;
        
        /// <summary>
        /// The name of this firewall rule.
        /// </summary>
        public string Name
        {
            get { return this._name; }
            set { this._name = value; }
        }
        
        private string _startIPAddress;
        
        /// <summary>
        /// The beginning IP address applied to this firewall rule.
        /// </summary>
        public string StartIPAddress
        {
            get { return this._startIPAddress; }
            set { this._startIPAddress = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the FirewallRuleCreateParameters
        /// class.
        /// </summary>
        public FirewallRuleCreateParameters()
        {
        }
    }
    
    /// <summary>
    /// A standard service response including an HTTP status code and request
    /// ID.
    /// </summary>
    public partial class FirewallRuleCreateResponse : OperationResponse
    {
        private string _endIPAddress;
        
        /// <summary>
        /// The ending IP address applied to this rule.
        /// </summary>
        public string EndIPAddress
        {
            get { return this._endIPAddress; }
            set { this._endIPAddress = value; }
        }
        
        private string _name;
        
        /// <summary>
        /// The name of the Firewall Rule.
        /// </summary>
        public string Name
        {
            get { return this._name; }
            set { this._name = value; }
        }
        
        private string _startIPAddress;
        
        /// <summary>
        /// The beginning IP address applied to this rule.
        /// </summary>
        public string StartIPAddress
        {
            get { return this._startIPAddress; }
            set { this._startIPAddress = value; }
        }
        
        private string _state;
        
        /// <summary>
        /// The state of the rule.
        /// </summary>
        public string State
        {
            get { return this._state; }
            set { this._state = value; }
        }
        
        private string _type;
        
        /// <summary>
        /// The type of resource.
        /// </summary>
        public string Type
        {
            get { return this._type; }
            set { this._type = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the FirewallRuleCreateResponse class.
        /// </summary>
        public FirewallRuleCreateResponse()
        {
        }
    }
    
    /// <summary>
    /// A standard service response including an HTTP status code and request
    /// ID.
    /// </summary>
    public partial class FirewallRuleListResponse : OperationResponse, IEnumerable<FirewallRuleListResponse.FirewallRule>
    {
        private IList<FirewallRuleListResponse.FirewallRule> _firewallRules;
        
        /// <summary>
        /// The firewall rules for this SQL Database Server.
        /// </summary>
        public IList<FirewallRuleListResponse.FirewallRule> FirewallRules
        {
            get { return this._firewallRules; }
            set { this._firewallRules = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the FirewallRuleListResponse class.
        /// </summary>
        public FirewallRuleListResponse()
        {
            this._firewallRules = new List<FirewallRuleListResponse.FirewallRule>();
        }
        
        /// <summary>
        /// Gets the sequence of FirewallRules.
        /// </summary>
        public IEnumerator<FirewallRuleListResponse.FirewallRule> GetEnumerator()
        {
            return this.FirewallRules.GetEnumerator();
        }
        
        /// <summary>
        /// Gets the sequence of FirewallRules.
        /// </summary>
        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
        {
            return this.GetEnumerator();
        }
        
        public partial class FirewallRule
        {
            private string _endIPAddress;
            
            /// <summary>
            /// The ending IP address applied to this rule.
            /// </summary>
            public string EndIPAddress
            {
                get { return this._endIPAddress; }
                set { this._endIPAddress = value; }
            }
            
            private string _name;
            
            /// <summary>
            /// The name of the Firewall Rule.
            /// </summary>
            public string Name
            {
                get { return this._name; }
                set { this._name = value; }
            }
            
            private string _startIPAddress;
            
            /// <summary>
            /// The beginning IP address applied to this rule.
            /// </summary>
            public string StartIPAddress
            {
                get { return this._startIPAddress; }
                set { this._startIPAddress = value; }
            }
            
            private string _type;
            
            /// <summary>
            /// The type of resource.
            /// </summary>
            public string Type
            {
                get { return this._type; }
                set { this._type = value; }
            }
            
            /// <summary>
            /// Initializes a new instance of the FirewallRule class.
            /// </summary>
            public FirewallRule()
            {
            }
        }
    }
    
    /// <summary>
    /// The parameters for the Create Firewall Rule operation
    /// </summary>
    public partial class FirewallRuleUpdateParameters
    {
        private string _endIPAddress;
        
        /// <summary>
        /// The ending IP address applied to this firewall rule.
        /// </summary>
        public string EndIPAddress
        {
            get { return this._endIPAddress; }
            set { this._endIPAddress = value; }
        }
        
        private string _name;
        
        /// <summary>
        /// The name of this firewall rule.
        /// </summary>
        public string Name
        {
            get { return this._name; }
            set { this._name = value; }
        }
        
        private string _startIPAddress;
        
        /// <summary>
        /// The beginning IP address applied to this firewall rule.
        /// </summary>
        public string StartIPAddress
        {
            get { return this._startIPAddress; }
            set { this._startIPAddress = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the FirewallRuleUpdateParameters
        /// class.
        /// </summary>
        public FirewallRuleUpdateParameters()
        {
        }
    }
    
    /// <summary>
    /// A standard service response including an HTTP status code and request
    /// ID.
    /// </summary>
    public partial class FirewallRuleUpdateResponse : OperationResponse
    {
        private string _endIPAddress;
        
        /// <summary>
        /// The ending IP address applied to this rule.
        /// </summary>
        public string EndIPAddress
        {
            get { return this._endIPAddress; }
            set { this._endIPAddress = value; }
        }
        
        private string _name;
        
        /// <summary>
        /// The name of the Firewall Rule.
        /// </summary>
        public string Name
        {
            get { return this._name; }
            set { this._name = value; }
        }
        
        private string _startIPAddress;
        
        /// <summary>
        /// The beginning IP address applied to this rule.
        /// </summary>
        public string StartIPAddress
        {
            get { return this._startIPAddress; }
            set { this._startIPAddress = value; }
        }
        
        private string _state;
        
        /// <summary>
        /// The state of the rule.
        /// </summary>
        public string State
        {
            get { return this._state; }
            set { this._state = value; }
        }
        
        private string _type;
        
        /// <summary>
        /// The type of resource.
        /// </summary>
        public string Type
        {
            get { return this._type; }
            set { this._type = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the FirewallRuleUpdateResponse class.
        /// </summary>
        public FirewallRuleUpdateResponse()
        {
        }
    }
    
    /// <summary>
    /// Parameters supplied to the Manage Administrator Password operation.
    /// </summary>
    public partial class ServerChangeAdministratorPasswordParameters
    {
        private string _newPassword;
        
        /// <summary>
        /// The new password for the administrator
        /// </summary>
        public string NewPassword
        {
            get { return this._newPassword; }
            set { this._newPassword = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the
        /// ServerChangeAdministratorPasswordParameters class.
        /// </summary>
        public ServerChangeAdministratorPasswordParameters()
        {
        }
    }
    
    /// <summary>
    /// Parameters supplied to the Create Server operation.
    /// </summary>
    public partial class ServerCreateParameters
    {
        private string _administratorPassword;
        
        /// <summary>
        /// The administrator password
        /// </summary>
        public string AdministratorPassword
        {
            get { return this._administratorPassword; }
            set { this._administratorPassword = value; }
        }
        
        private string _administratorUserName;
        
        /// <summary>
        /// The administrator username
        /// </summary>
        public string AdministratorUserName
        {
            get { return this._administratorUserName; }
            set { this._administratorUserName = value; }
        }
        
        private string _location;
        
        /// <summary>
        /// The region in which this server will be created.
        /// </summary>
        public string Location
        {
            get { return this._location; }
            set { this._location = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the ServerCreateParameters class.
        /// </summary>
        public ServerCreateParameters()
        {
        }
    }
    
    /// <summary>
    /// The response returned from the Create Server operation
    /// </summary>
    public partial class ServerCreateResponse : OperationResponse
    {
        private string _serverName;
        
        /// <summary>
        /// The name of the server that was created
        /// </summary>
        public string ServerName
        {
            get { return this._serverName; }
            set { this._serverName = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the ServerCreateResponse class.
        /// </summary>
        public ServerCreateResponse()
        {
        }
    }
    
    /// <summary>
    /// The response structure for the Server List operation
    /// </summary>
    public partial class ServerListResponse : OperationResponse, IEnumerable<ServerListResponse.Server>
    {
        private IList<ServerListResponse.Server> _servers;
        
        /// <summary>
        /// The SQL Servers that are valid for your subscription.
        /// </summary>
        public IList<ServerListResponse.Server> Servers
        {
            get { return this._servers; }
            set { this._servers = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the ServerListResponse class.
        /// </summary>
        public ServerListResponse()
        {
            this._servers = new List<ServerListResponse.Server>();
        }
        
        /// <summary>
        /// Gets the sequence of Servers.
        /// </summary>
        public IEnumerator<ServerListResponse.Server> GetEnumerator()
        {
            return this.Servers.GetEnumerator();
        }
        
        /// <summary>
        /// Gets the sequence of Servers.
        /// </summary>
        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
        {
            return this.GetEnumerator();
        }
        
        /// <summary>
        /// An individual server in your Windows Azure subscription.
        /// </summary>
        public partial class Server
        {
            private string _administratorUserName;
            
            /// <summary>
            /// The name of an administrator for this server.
            /// </summary>
            public string AdministratorUserName
            {
                get { return this._administratorUserName; }
                set { this._administratorUserName = value; }
            }
            
            private IDictionary<string, string> _features;
            
            /// <summary>
            /// The list of features and the type of database server for an
            /// individual server.
            /// </summary>
            public IDictionary<string, string> Features
            {
                get { return this._features; }
                set { this._features = value; }
            }
            
            private string _location;
            
            /// <summary>
            /// The name of a data center location that is valid for your
            /// subscription.
            /// </summary>
            public string Location
            {
                get { return this._location; }
                set { this._location = value; }
            }
            
            private string _name;
            
            /// <summary>
            /// The name of a SQL Server running in your subscription.
            /// </summary>
            public string Name
            {
                get { return this._name; }
                set { this._name = value; }
            }
            
            /// <summary>
            /// Initializes a new instance of the Server class.
            /// </summary>
            public Server()
            {
                this._features = new Dictionary<string, string>();
            }
        }
    }
    
    /// <summary>
    /// Response containing the service objective for a given server and
    /// service objective Id.
    /// </summary>
    public partial class ServiceObjectiveGetResponse : OperationResponse
    {
        private string _description;
        
        /// <summary>
        /// The service objective description.
        /// </summary>
        public string Description
        {
            get { return this._description; }
            set { this._description = value; }
        }
        
        private IList<ServiceObjectiveGetResponse.DimensionSettingResponse> _dimensionSettings;
        
        /// <summary>
        /// The service objective dimension settings.
        /// </summary>
        public IList<ServiceObjectiveGetResponse.DimensionSettingResponse> DimensionSettings
        {
            get { return this._dimensionSettings; }
            set { this._dimensionSettings = value; }
        }
        
        private bool _enabled;
        
        /// <summary>
        /// The value indicating whether the service objective is enabled.
        /// </summary>
        public bool Enabled
        {
            get { return this._enabled; }
            set { this._enabled = value; }
        }
        
        private string _id;
        
        /// <summary>
        /// The service objective id.
        /// </summary>
        public string Id
        {
            get { return this._id; }
            set { this._id = value; }
        }
        
        private bool _isDefault;
        
        /// <summary>
        /// The value indicating whether the service objective is the default
        /// objective.
        /// </summary>
        public bool IsDefault
        {
            get { return this._isDefault; }
            set { this._isDefault = value; }
        }
        
        private bool _isSystem;
        
        /// <summary>
        /// The value indicating whether the service objective is a system
        /// objective.
        /// </summary>
        public bool IsSystem
        {
            get { return this._isSystem; }
            set { this._isSystem = value; }
        }
        
        private string _name;
        
        /// <summary>
        /// The name of the service objective.
        /// </summary>
        public string Name
        {
            get { return this._name; }
            set { this._name = value; }
        }
        
        private string _parentLink;
        
        /// <summary>
        /// The ParentLink of the service objective.
        /// </summary>
        public string ParentLink
        {
            get { return this._parentLink; }
            set { this._parentLink = value; }
        }
        
        private string _selfLink;
        
        /// <summary>
        /// The SelfLink of the service objective.
        /// </summary>
        public string SelfLink
        {
            get { return this._selfLink; }
            set { this._selfLink = value; }
        }
        
        private string _state;
        
        /// <summary>
        /// The state of the service objective.
        /// </summary>
        public string State
        {
            get { return this._state; }
            set { this._state = value; }
        }
        
        private string _type;
        
        /// <summary>
        /// The type of resource.
        /// </summary>
        public string Type
        {
            get { return this._type; }
            set { this._type = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the ServiceObjectiveGetResponse class.
        /// </summary>
        public ServiceObjectiveGetResponse()
        {
            this._dimensionSettings = new List<ServiceObjectiveGetResponse.DimensionSettingResponse>();
        }
        
        public partial class DimensionSettingResponse
        {
            private string _description;
            
            /// <summary>
            /// The dimension setting description.
            /// </summary>
            public string Description
            {
                get { return this._description; }
                set { this._description = value; }
            }
            
            private string _id;
            
            /// <summary>
            /// The dimension setting id.
            /// </summary>
            public string Id
            {
                get { return this._id; }
                set { this._id = value; }
            }
            
            private bool _isDefault;
            
            /// <summary>
            /// The value indicating whether the dimension setting is the
            /// default setting.
            /// </summary>
            public bool IsDefault
            {
                get { return this._isDefault; }
                set { this._isDefault = value; }
            }
            
            private string _name;
            
            /// <summary>
            /// The name of the dimension setting.
            /// </summary>
            public string Name
            {
                get { return this._name; }
                set { this._name = value; }
            }
            
            private byte _ordinal;
            
            /// <summary>
            /// The dimension setting ordinal position.
            /// </summary>
            public byte Ordinal
            {
                get { return this._ordinal; }
                set { this._ordinal = value; }
            }
            
            private string _parentLink;
            
            /// <summary>
            /// The ParentLink of the dimension setting.
            /// </summary>
            public string ParentLink
            {
                get { return this._parentLink; }
                set { this._parentLink = value; }
            }
            
            private string _selfLink;
            
            /// <summary>
            /// The SelfLink of the dimension setting.
            /// </summary>
            public string SelfLink
            {
                get { return this._selfLink; }
                set { this._selfLink = value; }
            }
            
            private string _state;
            
            /// <summary>
            /// The state of the dimension setting.
            /// </summary>
            public string State
            {
                get { return this._state; }
                set { this._state = value; }
            }
            
            private string _type;
            
            /// <summary>
            /// The type of resource.
            /// </summary>
            public string Type
            {
                get { return this._type; }
                set { this._type = value; }
            }
            
            /// <summary>
            /// Initializes a new instance of the DimensionSettingResponse
            /// class.
            /// </summary>
            public DimensionSettingResponse()
            {
            }
        }
    }
    
    /// <summary>
    /// Response containing the list of service objective for a given server.
    /// </summary>
    public partial class ServiceObjectiveListResponse : OperationResponse, IEnumerable<ServiceObjectiveListResponse.ServiceObjective>
    {
        private IList<ServiceObjectiveListResponse.ServiceObjective> _serviceObjectives;
        
        /// <summary>
        /// The list of Service Objectives that are existing in a server.
        /// </summary>
        public IList<ServiceObjectiveListResponse.ServiceObjective> ServiceObjectives
        {
            get { return this._serviceObjectives; }
            set { this._serviceObjectives = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the ServiceObjectiveListResponse
        /// class.
        /// </summary>
        public ServiceObjectiveListResponse()
        {
            this._serviceObjectives = new List<ServiceObjectiveListResponse.ServiceObjective>();
        }
        
        /// <summary>
        /// Gets the sequence of ServiceObjectives.
        /// </summary>
        public IEnumerator<ServiceObjectiveListResponse.ServiceObjective> GetEnumerator()
        {
            return this.ServiceObjectives.GetEnumerator();
        }
        
        /// <summary>
        /// Gets the sequence of ServiceObjectives.
        /// </summary>
        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
        {
            return this.GetEnumerator();
        }
        
        public partial class ServiceObjective
        {
            private string _description;
            
            /// <summary>
            /// The service objective description.
            /// </summary>
            public string Description
            {
                get { return this._description; }
                set { this._description = value; }
            }
            
            private IList<ServiceObjectiveListResponse.ServiceObjective.DimensionSettingResponse> _dimensionSettings;
            
            /// <summary>
            /// The service objective dimension settings.
            /// </summary>
            public IList<ServiceObjectiveListResponse.ServiceObjective.DimensionSettingResponse> DimensionSettings
            {
                get { return this._dimensionSettings; }
                set { this._dimensionSettings = value; }
            }
            
            private bool _enabled;
            
            /// <summary>
            /// The value indicating whether the service objective is enabled.
            /// </summary>
            public bool Enabled
            {
                get { return this._enabled; }
                set { this._enabled = value; }
            }
            
            private string _id;
            
            /// <summary>
            /// The service objective id.
            /// </summary>
            public string Id
            {
                get { return this._id; }
                set { this._id = value; }
            }
            
            private bool _isDefault;
            
            /// <summary>
            /// The value indicating whether the service objective is the
            /// default objective.
            /// </summary>
            public bool IsDefault
            {
                get { return this._isDefault; }
                set { this._isDefault = value; }
            }
            
            private bool _isSystem;
            
            /// <summary>
            /// The value indicating whether the service objective is a system
            /// objective.
            /// </summary>
            public bool IsSystem
            {
                get { return this._isSystem; }
                set { this._isSystem = value; }
            }
            
            private string _name;
            
            /// <summary>
            /// The name of the service objective.
            /// </summary>
            public string Name
            {
                get { return this._name; }
                set { this._name = value; }
            }
            
            private string _parentLink;
            
            /// <summary>
            /// The ParentLink of the service objective.
            /// </summary>
            public string ParentLink
            {
                get { return this._parentLink; }
                set { this._parentLink = value; }
            }
            
            private string _selfLink;
            
            /// <summary>
            /// The SelfLink of the service objective.
            /// </summary>
            public string SelfLink
            {
                get { return this._selfLink; }
                set { this._selfLink = value; }
            }
            
            private string _state;
            
            /// <summary>
            /// The state of the service objective.
            /// </summary>
            public string State
            {
                get { return this._state; }
                set { this._state = value; }
            }
            
            private string _type;
            
            /// <summary>
            /// The type of resource.
            /// </summary>
            public string Type
            {
                get { return this._type; }
                set { this._type = value; }
            }
            
            /// <summary>
            /// Initializes a new instance of the ServiceObjective class.
            /// </summary>
            public ServiceObjective()
            {
                this._dimensionSettings = new List<ServiceObjectiveListResponse.ServiceObjective.DimensionSettingResponse>();
            }
            
            public partial class DimensionSettingResponse
            {
                private string _description;
                
                /// <summary>
                /// The dimension setting description.
                /// </summary>
                public string Description
                {
                    get { return this._description; }
                    set { this._description = value; }
                }
                
                private string _id;
                
                /// <summary>
                /// The dimension setting id.
                /// </summary>
                public string Id
                {
                    get { return this._id; }
                    set { this._id = value; }
                }
                
                private bool _isDefault;
                
                /// <summary>
                /// The value indicating whether the dimension setting is the
                /// default setting.
                /// </summary>
                public bool IsDefault
                {
                    get { return this._isDefault; }
                    set { this._isDefault = value; }
                }
                
                private string _name;
                
                /// <summary>
                /// The name of the dimension setting.
                /// </summary>
                public string Name
                {
                    get { return this._name; }
                    set { this._name = value; }
                }
                
                private byte _ordinal;
                
                /// <summary>
                /// The dimension setting ordinal position.
                /// </summary>
                public byte Ordinal
                {
                    get { return this._ordinal; }
                    set { this._ordinal = value; }
                }
                
                private string _parentLink;
                
                /// <summary>
                /// The ParentLink of the dimension setting.
                /// </summary>
                public string ParentLink
                {
                    get { return this._parentLink; }
                    set { this._parentLink = value; }
                }
                
                private string _selfLink;
                
                /// <summary>
                /// The SelfLink of the dimension setting.
                /// </summary>
                public string SelfLink
                {
                    get { return this._selfLink; }
                    set { this._selfLink = value; }
                }
                
                private string _state;
                
                /// <summary>
                /// The state of the dimension setting.
                /// </summary>
                public string State
                {
                    get { return this._state; }
                    set { this._state = value; }
                }
                
                private string _type;
                
                /// <summary>
                /// The type of resource.
                /// </summary>
                public string Type
                {
                    get { return this._type; }
                    set { this._type = value; }
                }
                
                /// <summary>
                /// Initializes a new instance of the DimensionSettingResponse
                /// class.
                /// </summary>
                public DimensionSettingResponse()
                {
                }
            }
        }
    }
}

namespace Microsoft.WindowsAzure.Management.Sql
{
    /// <summary>
    /// The SQL Database Management API is a REST API for managing SQL Database
    /// servers and the firewall rules associated with SQL Database servers.
    /// (see
    /// http://msdn.microsoft.com/en-us/library/windowsazure/gg715283.aspx for
    /// more information)
    /// </summary>
    public partial interface ISqlManagementClient
    {
        /// <summary>
        /// The URI used as the base for all SQL requests.
        /// </summary>
        Uri BaseUri
        {
            get; 
        }
        
        /// <summary>
        /// When you create a Windows Azure subscription, it is uniquely
        /// identified by a subscription ID. The subscription ID forms part of
        /// the URI for every call that you make to the Service Management
        /// API.  The Windows Azure Service ManagementAPI use mutual
        /// authentication of management certificates over SSL to ensure that
        /// a request made to the service is secure.  No anonymous requests
        /// are allowed.
        /// </summary>
        SubscriptionCloudCredentials Credentials
        {
            get; 
        }
        
        /// <summary>
        /// The SQL DAC Management API includes operations for importing and
        /// exporting SQL Databases into and out of Windows Azure.
        /// </summary>
        IDacOperations Dacs
        {
            get; 
        }
        
        /// <summary>
        /// The SQL Database Management API includes operations for get/stop
        /// SQL Databases' operations for a subscription.
        /// </summary>
        IDatabaseOperationOperations DatabaseOperations
        {
            get; 
        }
        
        /// <summary>
        /// The SQL Database Management API includes operations for managing
        /// SQL Databases for a subscription.
        /// </summary>
        IDatabaseOperations Databases
        {
            get; 
        }
        
        /// <summary>
        /// The Windows Azure SQL Database Management API includes operations
        /// for managing the server-level firewall rules for SQL Database
        /// servers.You cannot manage the database-level firewall rules using
        /// the Windows Azure SQL Database Management API; they can only be
        /// managed by running the  Transact-SQL statements against the master
        /// or individual user databases.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/gg715276.aspx
        /// for more information)
        /// </summary>
        IFirewallRuleOperations FirewallRules
        {
            get; 
        }
        
        /// <summary>
        /// The SQL Database Management API includes operations for managing
        /// SQL Database servers for a subscription.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/gg715271.aspx
        /// for more information)
        /// </summary>
        IServerOperations Servers
        {
            get; 
        }
        
        /// <summary>
        /// The SQL Database Management API includes operations for getting
        /// Service Objective for a subscription.
        /// </summary>
        IServiceObjectiveOperations ServiceObjectives
        {
            get; 
        }
    }
    
    /// <summary>
    /// The SQL Database Management API is a REST API for managing SQL Database
    /// servers and the firewall rules associated with SQL Database servers.
    /// (see
    /// http://msdn.microsoft.com/en-us/library/windowsazure/gg715283.aspx for
    /// more information)
    /// </summary>
    public static partial class SqlManagementClientExtensions
    {
    }
    
    /// <summary>
    /// The SQL Database Management API is a REST API for managing SQL Database
    /// servers and the firewall rules associated with SQL Database servers.
    /// (see
    /// http://msdn.microsoft.com/en-us/library/windowsazure/gg715283.aspx for
    /// more information)
    /// </summary>
    public partial class SqlManagementClient : ServiceClient<SqlManagementClient>, ISqlManagementClient
    {
        private Uri _baseUri;
        
        /// <summary>
        /// The URI used as the base for all SQL requests.
        /// </summary>
        public Uri BaseUri
        {
            get { return this._baseUri; }
        }
        
        private SubscriptionCloudCredentials _credentials;
        
        /// <summary>
        /// When you create a Windows Azure subscription, it is uniquely
        /// identified by a subscription ID. The subscription ID forms part of
        /// the URI for every call that you make to the Service Management
        /// API.  The Windows Azure Service ManagementAPI use mutual
        /// authentication of management certificates over SSL to ensure that
        /// a request made to the service is secure.  No anonymous requests
        /// are allowed.
        /// </summary>
        public SubscriptionCloudCredentials Credentials
        {
            get { return this._credentials; }
        }
        
        private IDacOperations _dacs;
        
        /// <summary>
        /// The SQL DAC Management API includes operations for importing and
        /// exporting SQL Databases into and out of Windows Azure.
        /// </summary>
        public virtual IDacOperations Dacs
        {
            get { return this._dacs; }
        }
        
        private IDatabaseOperationOperations _databaseOperations;
        
        /// <summary>
        /// The SQL Database Management API includes operations for get/stop
        /// SQL Databases' operations for a subscription.
        /// </summary>
        public virtual IDatabaseOperationOperations DatabaseOperations
        {
            get { return this._databaseOperations; }
        }
        
        private IDatabaseOperations _databases;
        
        /// <summary>
        /// The SQL Database Management API includes operations for managing
        /// SQL Databases for a subscription.
        /// </summary>
        public virtual IDatabaseOperations Databases
        {
            get { return this._databases; }
        }
        
        private IFirewallRuleOperations _firewallRules;
        
        /// <summary>
        /// The Windows Azure SQL Database Management API includes operations
        /// for managing the server-level firewall rules for SQL Database
        /// servers.You cannot manage the database-level firewall rules using
        /// the Windows Azure SQL Database Management API; they can only be
        /// managed by running the  Transact-SQL statements against the master
        /// or individual user databases.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/gg715276.aspx
        /// for more information)
        /// </summary>
        public virtual IFirewallRuleOperations FirewallRules
        {
            get { return this._firewallRules; }
        }
        
        private IServerOperations _servers;
        
        /// <summary>
        /// The SQL Database Management API includes operations for managing
        /// SQL Database servers for a subscription.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/gg715271.aspx
        /// for more information)
        /// </summary>
        public virtual IServerOperations Servers
        {
            get { return this._servers; }
        }
        
        private IServiceObjectiveOperations _serviceObjectives;
        
        /// <summary>
        /// The SQL Database Management API includes operations for getting
        /// Service Objective for a subscription.
        /// </summary>
        public virtual IServiceObjectiveOperations ServiceObjectives
        {
            get { return this._serviceObjectives; }
        }
        
        /// <summary>
        /// Initializes a new instance of the SqlManagementClient class.
        /// </summary>
        private SqlManagementClient()
            : base()
        {
            this._dacs = new DacOperations(this);
            this._databaseOperations = new DatabaseOperationOperations(this);
            this._databases = new DatabaseOperations(this);
            this._firewallRules = new FirewallRuleOperations(this);
            this._servers = new ServerOperations(this);
            this._serviceObjectives = new ServiceObjectiveOperations(this);
            this.HttpClient.Timeout = TimeSpan.FromSeconds(300);
        }
        
        /// <summary>
        /// Initializes a new instance of the SqlManagementClient class.
        /// </summary>
        /// <param name='credentials'>
        /// When you create a Windows Azure subscription, it is uniquely
        /// identified by a subscription ID. The subscription ID forms part of
        /// the URI for every call that you make to the Service Management
        /// API.  The Windows Azure Service ManagementAPI use mutual
        /// authentication of management certificates over SSL to ensure that
        /// a request made to the service is secure.  No anonymous requests
        /// are allowed.
        /// </param>
        /// <param name='baseUri'>
        /// The URI used as the base for all SQL requests.
        /// </param>
        public SqlManagementClient(SubscriptionCloudCredentials credentials, Uri baseUri)
            : this()
        {
            if (credentials == null)
            {
                throw new ArgumentNullException("credentials");
            }
            if (baseUri == null)
            {
                throw new ArgumentNullException("baseUri");
            }
            this._credentials = credentials;
            this._baseUri = baseUri;
            
            this.Credentials.InitializeServiceClient(this);
        }
        
        /// <summary>
        /// Initializes a new instance of the SqlManagementClient class.
        /// </summary>
        /// <param name='credentials'>
        /// When you create a Windows Azure subscription, it is uniquely
        /// identified by a subscription ID. The subscription ID forms part of
        /// the URI for every call that you make to the Service Management
        /// API.  The Windows Azure Service ManagementAPI use mutual
        /// authentication of management certificates over SSL to ensure that
        /// a request made to the service is secure.  No anonymous requests
        /// are allowed.
        /// </param>
        public SqlManagementClient(SubscriptionCloudCredentials credentials)
            : this()
        {
            if (credentials == null)
            {
                throw new ArgumentNullException("credentials");
            }
            this._credentials = credentials;
            this._baseUri = new Uri("https://management.core.windows.net");
            
            this.Credentials.InitializeServiceClient(this);
        }
    }
    
    /// <summary>
    /// The SQL DAC Management API includes operations for importing and
    /// exporting SQL Databases into and out of Windows Azure.
    /// </summary>
    public partial interface IDacOperations
    {
        /// <param name='serverName'>
        /// The name of the server being imported to or exported from
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Response for an DAC Import/Export request.
        /// </returns>
        Task<DacImportExportResponse> ExportAsync(string serverName, DacExportParameters parameters, CancellationToken cancellationToken);
        
        /// <param name='serverName'>
        /// The name of the server being imported to or exported from
        /// </param>
        /// <param name='fullyQualifiedServerName'>
        /// The fully qualified name of the server being imported to or
        /// exported from
        /// </param>
        /// <param name='username'>
        /// The server's username
        /// </param>
        /// <param name='password'>
        /// The server's password
        /// </param>
        /// <param name='requestId'>
        /// The request ID of the operation being queried
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response structure for the DAC GetStatus operation
        /// </returns>
        Task<DacGetStatusResponse> GetStatusAsync(string serverName, string fullyQualifiedServerName, string username, string password, string requestId, CancellationToken cancellationToken);
        
        /// <param name='serverName'>
        /// The name of the server being imported to or exported from
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Response for an DAC Import/Export request.
        /// </returns>
        Task<DacImportExportResponse> ImportAsync(string serverName, DacImportParameters parameters, CancellationToken cancellationToken);
    }
    
    /// <summary>
    /// The SQL DAC Management API includes operations for importing and
    /// exporting SQL Databases into and out of Windows Azure.
    /// </summary>
    public static partial class DacOperationsExtensions
    {
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Sql.IDacOperations.
        /// </param>
        /// <param name='serverName'>
        /// The name of the server being imported to or exported from
        /// </param>
        /// <returns>
        /// Response for an DAC Import/Export request.
        /// </returns>
        public static DacImportExportResponse Export(this IDacOperations operations, string serverName, DacExportParameters parameters)
        {
            try
            {
                return operations.ExportAsync(serverName, parameters).Result;
            }
            catch (AggregateException ex)
            {
                if (ex.InnerExceptions.Count > 1)
                {
                    throw;
                }
                else
                {
                    throw ex.InnerException;
                }
            }
        }
        
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Sql.IDacOperations.
        /// </param>
        /// <param name='serverName'>
        /// The name of the server being imported to or exported from
        /// </param>
        /// <returns>
        /// Response for an DAC Import/Export request.
        /// </returns>
        public static Task<DacImportExportResponse> ExportAsync(this IDacOperations operations, string serverName, DacExportParameters parameters)
        {
            return operations.ExportAsync(serverName, parameters, CancellationToken.None);
        }
        
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Sql.IDacOperations.
        /// </param>
        /// <param name='serverName'>
        /// The name of the server being imported to or exported from
        /// </param>
        /// <param name='fullyQualifiedServerName'>
        /// The fully qualified name of the server being imported to or
        /// exported from
        /// </param>
        /// <param name='username'>
        /// The server's username
        /// </param>
        /// <param name='password'>
        /// The server's password
        /// </param>
        /// <param name='requestId'>
        /// The request ID of the operation being queried
        /// </param>
        /// <returns>
        /// The response structure for the DAC GetStatus operation
        /// </returns>
        public static DacGetStatusResponse GetStatus(this IDacOperations operations, string serverName, string fullyQualifiedServerName, string username, string password, string requestId)
        {
            try
            {
                return operations.GetStatusAsync(serverName, fullyQualifiedServerName, username, password, requestId).Result;
            }
            catch (AggregateException ex)
            {
                if (ex.InnerExceptions.Count > 1)
                {
                    throw;
                }
                else
                {
                    throw ex.InnerException;
                }
            }
        }
        
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Sql.IDacOperations.
        /// </param>
        /// <param name='serverName'>
        /// The name of the server being imported to or exported from
        /// </param>
        /// <param name='fullyQualifiedServerName'>
        /// The fully qualified name of the server being imported to or
        /// exported from
        /// </param>
        /// <param name='username'>
        /// The server's username
        /// </param>
        /// <param name='password'>
        /// The server's password
        /// </param>
        /// <param name='requestId'>
        /// The request ID of the operation being queried
        /// </param>
        /// <returns>
        /// The response structure for the DAC GetStatus operation
        /// </returns>
        public static Task<DacGetStatusResponse> GetStatusAsync(this IDacOperations operations, string serverName, string fullyQualifiedServerName, string username, string password, string requestId)
        {
            return operations.GetStatusAsync(serverName, fullyQualifiedServerName, username, password, requestId, CancellationToken.None);
        }
        
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Sql.IDacOperations.
        /// </param>
        /// <param name='serverName'>
        /// The name of the server being imported to or exported from
        /// </param>
        /// <returns>
        /// Response for an DAC Import/Export request.
        /// </returns>
        public static DacImportExportResponse Import(this IDacOperations operations, string serverName, DacImportParameters parameters)
        {
            try
            {
                return operations.ImportAsync(serverName, parameters).Result;
            }
            catch (AggregateException ex)
            {
                if (ex.InnerExceptions.Count > 1)
                {
                    throw;
                }
                else
                {
                    throw ex.InnerException;
                }
            }
        }
        
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Sql.IDacOperations.
        /// </param>
        /// <param name='serverName'>
        /// The name of the server being imported to or exported from
        /// </param>
        /// <returns>
        /// Response for an DAC Import/Export request.
        /// </returns>
        public static Task<DacImportExportResponse> ImportAsync(this IDacOperations operations, string serverName, DacImportParameters parameters)
        {
            return operations.ImportAsync(serverName, parameters, CancellationToken.None);
        }
    }
    
    /// <summary>
    /// The SQL DAC Management API includes operations for importing and
    /// exporting SQL Databases into and out of Windows Azure.
    /// </summary>
    internal partial class DacOperations : IServiceOperations<SqlManagementClient>, IDacOperations
    {
        /// <summary>
        /// Initializes a new instance of the DacOperations class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        internal DacOperations(SqlManagementClient client)
        {
            this._client = client;
        }
        
        private SqlManagementClient _client;
        
        /// <summary>
        /// Gets a reference to the
        /// Microsoft.WindowsAzure.Management.Sql.SqlManagementClient.
        /// </summary>
        public SqlManagementClient Client
        {
            get { return this._client; }
        }
        
        /// <param name='serverName'>
        /// The name of the server being imported to or exported from
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Response for an DAC Import/Export request.
        /// </returns>
        public async Task<DacImportExportResponse> ExportAsync(string serverName, DacExportParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (serverName == null)
            {
                throw new ArgumentNullException("serverName");
            }
            if (parameters != null)
            {
                if (parameters.BlobCredentials != null)
                {
                    if (parameters.BlobCredentials.StorageAccessKey == null)
                    {
                        throw new ArgumentNullException("parameters.BlobCredentials.StorageAccessKey");
                    }
                    if (parameters.BlobCredentials.Uri == null)
                    {
                        throw new ArgumentNullException("parameters.BlobCredentials.Uri");
                    }
                }
                if (parameters.ConnectionInfo != null)
                {
                    if (parameters.ConnectionInfo.DatabaseName == null)
                    {
                        throw new ArgumentNullException("parameters.ConnectionInfo.DatabaseName");
                    }
                    if (parameters.ConnectionInfo.Password == null)
                    {
                        throw new ArgumentNullException("parameters.ConnectionInfo.Password");
                    }
                    if (parameters.ConnectionInfo.ServerName == null)
                    {
                        throw new ArgumentNullException("parameters.ConnectionInfo.ServerName");
                    }
                    if (parameters.ConnectionInfo.UserName == null)
                    {
                        throw new ArgumentNullException("parameters.ConnectionInfo.UserName");
                    }
                }
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("serverName", serverName);
                tracingParameters.Add("parameters", parameters);
                Tracing.Enter(invocationId, this, "ExportAsync", tracingParameters);
            }
            
            // Construct URL
            string url = this.Client.BaseUri + "/" + this.Client.Credentials.SubscriptionId + "/services/sqlservers/servers/" + serverName + "/DacOperations/Export";
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2012-03-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                XDocument requestDoc = new XDocument();
                
                if (parameters != null)
                {
                    XElement exportInputElement = new XElement(XName.Get("ExportInput", "http://schemas.datacontract.org/2004/07/Microsoft.SqlServer.Management.Dac.ServiceTypes"));
                    requestDoc.Add(exportInputElement);
                    
                    if (parameters.BlobCredentials != null)
                    {
                        XElement blobCredentialsElement = new XElement(XName.Get("BlobCredentials", "http://schemas.datacontract.org/2004/07/Microsoft.SqlServer.Management.Dac.ServiceTypes"));
                        exportInputElement.Add(blobCredentialsElement);
                        
                        XAttribute typeAttribute = new XAttribute(XName.Get("type", "http://www.w3.org/2001/XMLSchema-instance"), "");
                        typeAttribute.Value = "BlobStorageAccessKeyCredentials";
                        blobCredentialsElement.Add(typeAttribute);
                        
                        XElement uriElement = new XElement(XName.Get("Uri", "http://schemas.datacontract.org/2004/07/Microsoft.SqlServer.Management.Dac.ServiceTypes"));
                        uriElement.Value = parameters.BlobCredentials.Uri.ToString();
                        blobCredentialsElement.Add(uriElement);
                        
                        XElement storageAccessKeyElement = new XElement(XName.Get("StorageAccessKey", "http://schemas.datacontract.org/2004/07/Microsoft.SqlServer.Management.Dac.ServiceTypes"));
                        storageAccessKeyElement.Value = parameters.BlobCredentials.StorageAccessKey;
                        blobCredentialsElement.Add(storageAccessKeyElement);
                    }
                    
                    if (parameters.ConnectionInfo != null)
                    {
                        XElement connectionInfoElement = new XElement(XName.Get("ConnectionInfo", "http://schemas.datacontract.org/2004/07/Microsoft.SqlServer.Management.Dac.ServiceTypes"));
                        exportInputElement.Add(connectionInfoElement);
                        
                        XElement databaseNameElement = new XElement(XName.Get("DatabaseName", "http://schemas.datacontract.org/2004/07/Microsoft.SqlServer.Management.Dac.ServiceTypes"));
                        databaseNameElement.Value = parameters.ConnectionInfo.DatabaseName;
                        connectionInfoElement.Add(databaseNameElement);
                        
                        XElement passwordElement = new XElement(XName.Get("Password", "http://schemas.datacontract.org/2004/07/Microsoft.SqlServer.Management.Dac.ServiceTypes"));
                        passwordElement.Value = parameters.ConnectionInfo.Password;
                        connectionInfoElement.Add(passwordElement);
                        
                        XElement serverNameElement = new XElement(XName.Get("ServerName", "http://schemas.datacontract.org/2004/07/Microsoft.SqlServer.Management.Dac.ServiceTypes"));
                        serverNameElement.Value = parameters.ConnectionInfo.ServerName;
                        connectionInfoElement.Add(serverNameElement);
                        
                        XElement userNameElement = new XElement(XName.Get("UserName", "http://schemas.datacontract.org/2004/07/Microsoft.SqlServer.Management.Dac.ServiceTypes"));
                        userNameElement.Value = parameters.ConnectionInfo.UserName;
                        connectionInfoElement.Add(userNameElement);
                    }
                }
                
                requestContent = requestDoc.ToString();
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = new MediaTypeHeaderValue("application/xml");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.CreateFromXml(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    DacImportExportResponse result = new DacImportExportResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    XDocument responseDoc = XDocument.Parse(responseContent);
                    
                    XElement guidElement = responseDoc.Element(XName.Get("guid", "http://schemas.microsoft.com/2003/10/Serialization/"));
                    if (guidElement != null)
                    {
                        result.Guid = guidElement.Value;
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <param name='serverName'>
        /// The name of the server being imported to or exported from
        /// </param>
        /// <param name='fullyQualifiedServerName'>
        /// The fully qualified name of the server being imported to or
        /// exported from
        /// </param>
        /// <param name='username'>
        /// The server's username
        /// </param>
        /// <param name='password'>
        /// The server's password
        /// </param>
        /// <param name='requestId'>
        /// The request ID of the operation being queried
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response structure for the DAC GetStatus operation
        /// </returns>
        public async Task<DacGetStatusResponse> GetStatusAsync(string serverName, string fullyQualifiedServerName, string username, string password, string requestId, CancellationToken cancellationToken)
        {
            // Validate
            if (serverName == null)
            {
                throw new ArgumentNullException("serverName");
            }
            if (fullyQualifiedServerName == null)
            {
                throw new ArgumentNullException("fullyQualifiedServerName");
            }
            if (username == null)
            {
                throw new ArgumentNullException("username");
            }
            if (password == null)
            {
                throw new ArgumentNullException("password");
            }
            if (requestId == null)
            {
                throw new ArgumentNullException("requestId");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("serverName", serverName);
                tracingParameters.Add("fullyQualifiedServerName", fullyQualifiedServerName);
                tracingParameters.Add("username", username);
                tracingParameters.Add("password", password);
                tracingParameters.Add("requestId", requestId);
                Tracing.Enter(invocationId, this, "GetStatusAsync", tracingParameters);
            }
            
            // Construct URL
            string url = this.Client.BaseUri + "/" + this.Client.Credentials.SubscriptionId + "/services/sqlservers/servers/" + serverName + "/DacOperations/Status?servername=" + fullyQualifiedServerName + "&username=" + username + "&password=" + password + "&reqId=" + requestId;
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2012-03-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.CreateFromXml(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    DacGetStatusResponse result = new DacGetStatusResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    XDocument responseDoc = XDocument.Parse(responseContent);
                    
                    XElement arrayOfStatusInfoElement = responseDoc.Element(XName.Get("ArrayOfStatusInfo", "http://schemas.datacontract.org/2004/07/Microsoft.SqlServer.Management.Dac.ServiceTypes"));
                    if (arrayOfStatusInfoElement != null)
                    {
                        if (arrayOfStatusInfoElement != null)
                        {
                            foreach (XElement statusInfoElement in arrayOfStatusInfoElement.Elements(XName.Get("StatusInfo", "http://schemas.datacontract.org/2004/07/Microsoft.SqlServer.Management.Dac.ServiceTypes")))
                            {
                                DacGetStatusResponse.StatusInfo statusInfoInstance = new DacGetStatusResponse.StatusInfo();
                                result.StatusInfoList.Add(statusInfoInstance);
                                
                                XElement blobUriElement = statusInfoElement.Element(XName.Get("BlobUri", "http://schemas.datacontract.org/2004/07/Microsoft.SqlServer.Management.Dac.ServiceTypes"));
                                if (blobUriElement != null)
                                {
                                    Uri blobUriInstance = TypeConversion.TryParseUri(blobUriElement.Value);
                                    statusInfoInstance.BlobUri = blobUriInstance;
                                }
                                
                                XElement databaseNameElement = statusInfoElement.Element(XName.Get("DatabaseName", "http://schemas.datacontract.org/2004/07/Microsoft.SqlServer.Management.Dac.ServiceTypes"));
                                if (databaseNameElement != null)
                                {
                                    string databaseNameInstance = databaseNameElement.Value;
                                    statusInfoInstance.DatabaseName = databaseNameInstance;
                                }
                                
                                XElement errorMessageElement = statusInfoElement.Element(XName.Get("ErrorMessage", "http://schemas.datacontract.org/2004/07/Microsoft.SqlServer.Management.Dac.ServiceTypes"));
                                if (errorMessageElement != null)
                                {
                                    bool isNil = false;
                                    XAttribute nilAttribute = errorMessageElement.Attribute(XName.Get("nil", "http://www.w3.org/2001/XMLSchema-instance"));
                                    if (nilAttribute != null)
                                    {
                                        isNil = nilAttribute.Value == "true";
                                    }
                                    if (isNil == false)
                                    {
                                        string errorMessageInstance = errorMessageElement.Value;
                                        statusInfoInstance.ErrorMessage = errorMessageInstance;
                                    }
                                }
                                
                                XElement lastModifiedTimeElement = statusInfoElement.Element(XName.Get("LastModifiedTime", "http://schemas.datacontract.org/2004/07/Microsoft.SqlServer.Management.Dac.ServiceTypes"));
                                if (lastModifiedTimeElement != null)
                                {
                                    DateTime lastModifiedTimeInstance = DateTime.Parse(lastModifiedTimeElement.Value, CultureInfo.InvariantCulture);
                                    statusInfoInstance.LastModifiedTime = lastModifiedTimeInstance;
                                }
                                
                                XElement queuedTimeElement = statusInfoElement.Element(XName.Get("QueuedTime", "http://schemas.datacontract.org/2004/07/Microsoft.SqlServer.Management.Dac.ServiceTypes"));
                                if (queuedTimeElement != null)
                                {
                                    DateTime queuedTimeInstance = DateTime.Parse(queuedTimeElement.Value, CultureInfo.InvariantCulture);
                                    statusInfoInstance.QueuedTime = queuedTimeInstance;
                                }
                                
                                XElement requestIdElement = statusInfoElement.Element(XName.Get("RequestId", "http://schemas.datacontract.org/2004/07/Microsoft.SqlServer.Management.Dac.ServiceTypes"));
                                if (requestIdElement != null)
                                {
                                    string requestIdInstance = requestIdElement.Value;
                                    statusInfoInstance.RequestId = requestIdInstance;
                                }
                                
                                XElement requestTypeElement = statusInfoElement.Element(XName.Get("RequestType", "http://schemas.datacontract.org/2004/07/Microsoft.SqlServer.Management.Dac.ServiceTypes"));
                                if (requestTypeElement != null)
                                {
                                    string requestTypeInstance = requestTypeElement.Value;
                                    statusInfoInstance.RequestType = requestTypeInstance;
                                }
                                
                                XElement serverNameElement = statusInfoElement.Element(XName.Get("ServerName", "http://schemas.datacontract.org/2004/07/Microsoft.SqlServer.Management.Dac.ServiceTypes"));
                                if (serverNameElement != null)
                                {
                                    string serverNameInstance = serverNameElement.Value;
                                    statusInfoInstance.ServerName = serverNameInstance;
                                }
                                
                                XElement statusElement = statusInfoElement.Element(XName.Get("Status", "http://schemas.datacontract.org/2004/07/Microsoft.SqlServer.Management.Dac.ServiceTypes"));
                                if (statusElement != null)
                                {
                                    string statusInstance = statusElement.Value;
                                    statusInfoInstance.Status = statusInstance;
                                }
                            }
                        }
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <param name='serverName'>
        /// The name of the server being imported to or exported from
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Response for an DAC Import/Export request.
        /// </returns>
        public async Task<DacImportExportResponse> ImportAsync(string serverName, DacImportParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (serverName == null)
            {
                throw new ArgumentNullException("serverName");
            }
            if (parameters != null)
            {
                if (parameters.BlobCredentials != null)
                {
                    if (parameters.BlobCredentials.StorageAccessKey == null)
                    {
                        throw new ArgumentNullException("parameters.BlobCredentials.StorageAccessKey");
                    }
                    if (parameters.BlobCredentials.Uri == null)
                    {
                        throw new ArgumentNullException("parameters.BlobCredentials.Uri");
                    }
                }
                if (parameters.ConnectionInfo != null)
                {
                    if (parameters.ConnectionInfo.DatabaseName == null)
                    {
                        throw new ArgumentNullException("parameters.ConnectionInfo.DatabaseName");
                    }
                    if (parameters.ConnectionInfo.Password == null)
                    {
                        throw new ArgumentNullException("parameters.ConnectionInfo.Password");
                    }
                    if (parameters.ConnectionInfo.ServerName == null)
                    {
                        throw new ArgumentNullException("parameters.ConnectionInfo.ServerName");
                    }
                    if (parameters.ConnectionInfo.UserName == null)
                    {
                        throw new ArgumentNullException("parameters.ConnectionInfo.UserName");
                    }
                }
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("serverName", serverName);
                tracingParameters.Add("parameters", parameters);
                Tracing.Enter(invocationId, this, "ImportAsync", tracingParameters);
            }
            
            // Construct URL
            string url = this.Client.BaseUri + "/" + this.Client.Credentials.SubscriptionId + "/services/sqlservers/servers/" + serverName + "/DacOperations/Import";
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2012-03-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                XDocument requestDoc = new XDocument();
                
                if (parameters != null)
                {
                    XElement importInputElement = new XElement(XName.Get("ImportInput", "http://schemas.datacontract.org/2004/07/Microsoft.SqlServer.Management.Dac.ServiceTypes"));
                    requestDoc.Add(importInputElement);
                    
                    if (parameters.BlobCredentials != null)
                    {
                        XElement blobCredentialsElement = new XElement(XName.Get("BlobCredentials", "http://schemas.datacontract.org/2004/07/Microsoft.SqlServer.Management.Dac.ServiceTypes"));
                        importInputElement.Add(blobCredentialsElement);
                        
                        XAttribute typeAttribute = new XAttribute(XName.Get("type", "http://www.w3.org/2001/XMLSchema-instance"), "");
                        typeAttribute.Value = "BlobStorageAccessKeyCredentials";
                        blobCredentialsElement.Add(typeAttribute);
                        
                        XElement uriElement = new XElement(XName.Get("Uri", "http://schemas.datacontract.org/2004/07/Microsoft.SqlServer.Management.Dac.ServiceTypes"));
                        uriElement.Value = parameters.BlobCredentials.Uri.ToString();
                        blobCredentialsElement.Add(uriElement);
                        
                        XElement storageAccessKeyElement = new XElement(XName.Get("StorageAccessKey", "http://schemas.datacontract.org/2004/07/Microsoft.SqlServer.Management.Dac.ServiceTypes"));
                        storageAccessKeyElement.Value = parameters.BlobCredentials.StorageAccessKey;
                        blobCredentialsElement.Add(storageAccessKeyElement);
                    }
                    
                    if (parameters.ConnectionInfo != null)
                    {
                        XElement connectionInfoElement = new XElement(XName.Get("ConnectionInfo", "http://schemas.datacontract.org/2004/07/Microsoft.SqlServer.Management.Dac.ServiceTypes"));
                        importInputElement.Add(connectionInfoElement);
                        
                        XElement databaseNameElement = new XElement(XName.Get("DatabaseName", "http://schemas.datacontract.org/2004/07/Microsoft.SqlServer.Management.Dac.ServiceTypes"));
                        databaseNameElement.Value = parameters.ConnectionInfo.DatabaseName;
                        connectionInfoElement.Add(databaseNameElement);
                        
                        XElement passwordElement = new XElement(XName.Get("Password", "http://schemas.datacontract.org/2004/07/Microsoft.SqlServer.Management.Dac.ServiceTypes"));
                        passwordElement.Value = parameters.ConnectionInfo.Password;
                        connectionInfoElement.Add(passwordElement);
                        
                        XElement serverNameElement = new XElement(XName.Get("ServerName", "http://schemas.datacontract.org/2004/07/Microsoft.SqlServer.Management.Dac.ServiceTypes"));
                        serverNameElement.Value = parameters.ConnectionInfo.ServerName;
                        connectionInfoElement.Add(serverNameElement);
                        
                        XElement userNameElement = new XElement(XName.Get("UserName", "http://schemas.datacontract.org/2004/07/Microsoft.SqlServer.Management.Dac.ServiceTypes"));
                        userNameElement.Value = parameters.ConnectionInfo.UserName;
                        connectionInfoElement.Add(userNameElement);
                    }
                    
                    XElement databaseSizeInGBElement = new XElement(XName.Get("DatabaseSizeInGB", "http://schemas.datacontract.org/2004/07/Microsoft.SqlServer.Management.Dac.ServiceTypes"));
                    databaseSizeInGBElement.Value = parameters.DatabaseSizeInGB.ToString();
                    importInputElement.Add(databaseSizeInGBElement);
                }
                
                requestContent = requestDoc.ToString();
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = new MediaTypeHeaderValue("application/xml");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.CreateFromXml(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    DacImportExportResponse result = new DacImportExportResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    XDocument responseDoc = XDocument.Parse(responseContent);
                    
                    XElement guidElement = responseDoc.Element(XName.Get("guid", "http://schemas.microsoft.com/2003/10/Serialization/"));
                    if (guidElement != null)
                    {
                        result.Guid = guidElement.Value;
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
    }
    
    /// <summary>
    /// The SQL Database Management API includes operations for get/stop SQL
    /// Databases' operations for a subscription.
    /// </summary>
    public partial interface IDatabaseOperationOperations
    {
        /// <summary>
        /// The 'Get Database Operation' retrieves information about one
        /// operation on a given operation Guid.
        /// </summary>
        /// <param name='serverName'>
        /// The name of the SQL Server on which the operation was executed.
        /// </param>
        /// <param name='operationGuid'>
        /// The Guid of the SQL Server database operation to be obtained.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Response containing the database operation for a given operation
        /// Guid.
        /// </returns>
        Task<DatabaseOperationGetResponse> GetAsync(string serverName, string operationGuid, CancellationToken cancellationToken);
        
        /// <param name='serverName'>
        /// The name of the SQL Server to be queried.
        /// </param>
        /// <param name='databaseName'>
        /// The name of the Database to be queried.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Response containing the list of database operations for a given
        /// server or database.
        /// </returns>
        Task<DatabaseOperationListResponse> ListByDatabaseAsync(string serverName, string databaseName, CancellationToken cancellationToken);
        
        /// <param name='serverName'>
        /// The name of the SQL Server to be queried.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Response containing the list of database operations for a given
        /// server or database.
        /// </returns>
        Task<DatabaseOperationListResponse> ListByServerAsync(string serverName, CancellationToken cancellationToken);
    }
    
    /// <summary>
    /// The SQL Database Management API includes operations for get/stop SQL
    /// Databases' operations for a subscription.
    /// </summary>
    public static partial class DatabaseOperationOperationsExtensions
    {
        /// <summary>
        /// The 'Get Database Operation' retrieves information about one
        /// operation on a given operation Guid.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Sql.IDatabaseOperationOperations.
        /// </param>
        /// <param name='serverName'>
        /// The name of the SQL Server on which the operation was executed.
        /// </param>
        /// <param name='operationGuid'>
        /// The Guid of the SQL Server database operation to be obtained.
        /// </param>
        /// <returns>
        /// Response containing the database operation for a given operation
        /// Guid.
        /// </returns>
        public static DatabaseOperationGetResponse Get(this IDatabaseOperationOperations operations, string serverName, string operationGuid)
        {
            try
            {
                return operations.GetAsync(serverName, operationGuid).Result;
            }
            catch (AggregateException ex)
            {
                if (ex.InnerExceptions.Count > 1)
                {
                    throw;
                }
                else
                {
                    throw ex.InnerException;
                }
            }
        }
        
        /// <summary>
        /// The 'Get Database Operation' retrieves information about one
        /// operation on a given operation Guid.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Sql.IDatabaseOperationOperations.
        /// </param>
        /// <param name='serverName'>
        /// The name of the SQL Server on which the operation was executed.
        /// </param>
        /// <param name='operationGuid'>
        /// The Guid of the SQL Server database operation to be obtained.
        /// </param>
        /// <returns>
        /// Response containing the database operation for a given operation
        /// Guid.
        /// </returns>
        public static Task<DatabaseOperationGetResponse> GetAsync(this IDatabaseOperationOperations operations, string serverName, string operationGuid)
        {
            return operations.GetAsync(serverName, operationGuid, CancellationToken.None);
        }
        
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Sql.IDatabaseOperationOperations.
        /// </param>
        /// <param name='serverName'>
        /// The name of the SQL Server to be queried.
        /// </param>
        /// <param name='databaseName'>
        /// The name of the Database to be queried.
        /// </param>
        /// <returns>
        /// Response containing the list of database operations for a given
        /// server or database.
        /// </returns>
        public static DatabaseOperationListResponse ListByDatabase(this IDatabaseOperationOperations operations, string serverName, string databaseName)
        {
            try
            {
                return operations.ListByDatabaseAsync(serverName, databaseName).Result;
            }
            catch (AggregateException ex)
            {
                if (ex.InnerExceptions.Count > 1)
                {
                    throw;
                }
                else
                {
                    throw ex.InnerException;
                }
            }
        }
        
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Sql.IDatabaseOperationOperations.
        /// </param>
        /// <param name='serverName'>
        /// The name of the SQL Server to be queried.
        /// </param>
        /// <param name='databaseName'>
        /// The name of the Database to be queried.
        /// </param>
        /// <returns>
        /// Response containing the list of database operations for a given
        /// server or database.
        /// </returns>
        public static Task<DatabaseOperationListResponse> ListByDatabaseAsync(this IDatabaseOperationOperations operations, string serverName, string databaseName)
        {
            return operations.ListByDatabaseAsync(serverName, databaseName, CancellationToken.None);
        }
        
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Sql.IDatabaseOperationOperations.
        /// </param>
        /// <param name='serverName'>
        /// The name of the SQL Server to be queried.
        /// </param>
        /// <returns>
        /// Response containing the list of database operations for a given
        /// server or database.
        /// </returns>
        public static DatabaseOperationListResponse ListByServer(this IDatabaseOperationOperations operations, string serverName)
        {
            try
            {
                return operations.ListByServerAsync(serverName).Result;
            }
            catch (AggregateException ex)
            {
                if (ex.InnerExceptions.Count > 1)
                {
                    throw;
                }
                else
                {
                    throw ex.InnerException;
                }
            }
        }
        
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Sql.IDatabaseOperationOperations.
        /// </param>
        /// <param name='serverName'>
        /// The name of the SQL Server to be queried.
        /// </param>
        /// <returns>
        /// Response containing the list of database operations for a given
        /// server or database.
        /// </returns>
        public static Task<DatabaseOperationListResponse> ListByServerAsync(this IDatabaseOperationOperations operations, string serverName)
        {
            return operations.ListByServerAsync(serverName, CancellationToken.None);
        }
    }
    
    /// <summary>
    /// The SQL Database Management API includes operations for get/stop SQL
    /// Databases' operations for a subscription.
    /// </summary>
    internal partial class DatabaseOperationOperations : IServiceOperations<SqlManagementClient>, IDatabaseOperationOperations
    {
        /// <summary>
        /// Initializes a new instance of the DatabaseOperationOperations class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        internal DatabaseOperationOperations(SqlManagementClient client)
        {
            this._client = client;
        }
        
        private SqlManagementClient _client;
        
        /// <summary>
        /// Gets a reference to the
        /// Microsoft.WindowsAzure.Management.Sql.SqlManagementClient.
        /// </summary>
        public SqlManagementClient Client
        {
            get { return this._client; }
        }
        
        /// <summary>
        /// The 'Get Database Operation' retrieves information about one
        /// operation on a given operation Guid.
        /// </summary>
        /// <param name='serverName'>
        /// The name of the SQL Server on which the operation was executed.
        /// </param>
        /// <param name='operationGuid'>
        /// The Guid of the SQL Server database operation to be obtained.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Response containing the database operation for a given operation
        /// Guid.
        /// </returns>
        public async Task<DatabaseOperationGetResponse> GetAsync(string serverName, string operationGuid, CancellationToken cancellationToken)
        {
            // Validate
            if (serverName == null)
            {
                throw new ArgumentNullException("serverName");
            }
            if (operationGuid == null)
            {
                throw new ArgumentNullException("operationGuid");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("serverName", serverName);
                tracingParameters.Add("operationGuid", operationGuid);
                Tracing.Enter(invocationId, this, "GetAsync", tracingParameters);
            }
            
            // Construct URL
            string url = this.Client.BaseUri + this.Client.Credentials.SubscriptionId + "/services/sqlservers/servers/" + serverName + "/databaseoperations/" + operationGuid;
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2012-03-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.CreateFromXml(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    DatabaseOperationGetResponse result = new DatabaseOperationGetResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    XDocument responseDoc = XDocument.Parse(responseContent);
                    
                    XElement serviceResourceElement = responseDoc.Element(XName.Get("ServiceResource", "http://schemas.microsoft.com/windowsazure"));
                    if (serviceResourceElement != null)
                    {
                        XElement nameElement = serviceResourceElement.Element(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                        if (nameElement != null)
                        {
                            string nameInstance = nameElement.Value;
                            result.Name = nameInstance;
                        }
                        
                        XElement typeElement = serviceResourceElement.Element(XName.Get("Type", "http://schemas.microsoft.com/windowsazure"));
                        if (typeElement != null)
                        {
                            string typeInstance = typeElement.Value;
                            result.Type = typeInstance;
                        }
                        
                        XElement stateElement = serviceResourceElement.Element(XName.Get("State", "http://schemas.microsoft.com/windowsazure"));
                        if (stateElement != null)
                        {
                            string stateInstance = stateElement.Value;
                            result.State = stateInstance;
                        }
                        
                        XElement selfLinkElement = serviceResourceElement.Element(XName.Get("SelfLink", "http://schemas.microsoft.com/windowsazure"));
                        if (selfLinkElement != null)
                        {
                            string selfLinkInstance = selfLinkElement.Value;
                            result.SelfLink = selfLinkInstance;
                        }
                        
                        XElement parentLinkElement = serviceResourceElement.Element(XName.Get("ParentLink", "http://schemas.microsoft.com/windowsazure"));
                        if (parentLinkElement != null)
                        {
                            string parentLinkInstance = parentLinkElement.Value;
                            result.ParentLink = parentLinkInstance;
                        }
                        
                        XElement idElement = serviceResourceElement.Element(XName.Get("Id", "http://schemas.microsoft.com/windowsazure"));
                        if (idElement != null)
                        {
                            string idInstance = idElement.Value;
                            result.Id = idInstance;
                        }
                        
                        XElement stateIdElement = serviceResourceElement.Element(XName.Get("StateId", "http://schemas.microsoft.com/windowsazure"));
                        if (stateIdElement != null)
                        {
                            int stateIdInstance = int.Parse(stateIdElement.Value, CultureInfo.InvariantCulture);
                            result.StateId = stateIdInstance;
                        }
                        
                        XElement sessionActivityIdElement = serviceResourceElement.Element(XName.Get("SessionActivityId", "http://schemas.microsoft.com/windowsazure"));
                        if (sessionActivityIdElement != null)
                        {
                            string sessionActivityIdInstance = sessionActivityIdElement.Value;
                            result.SessionActivityId = sessionActivityIdInstance;
                        }
                        
                        XElement databaseNameElement = serviceResourceElement.Element(XName.Get("DatabaseName", "http://schemas.microsoft.com/windowsazure"));
                        if (databaseNameElement != null)
                        {
                            string databaseNameInstance = databaseNameElement.Value;
                            result.DatabaseName = databaseNameInstance;
                        }
                        
                        XElement percentCompleteElement = serviceResourceElement.Element(XName.Get("PercentComplete", "http://schemas.microsoft.com/windowsazure"));
                        if (percentCompleteElement != null)
                        {
                            int percentCompleteInstance = int.Parse(percentCompleteElement.Value, CultureInfo.InvariantCulture);
                            result.PercentComplete = percentCompleteInstance;
                        }
                        
                        XElement errorCodeElement = serviceResourceElement.Element(XName.Get("ErrorCode", "http://schemas.microsoft.com/windowsazure"));
                        if (errorCodeElement != null)
                        {
                            int errorCodeInstance = int.Parse(errorCodeElement.Value, CultureInfo.InvariantCulture);
                            result.ErrorCode = errorCodeInstance;
                        }
                        
                        XElement errorElement = serviceResourceElement.Element(XName.Get("Error", "http://schemas.microsoft.com/windowsazure"));
                        if (errorElement != null)
                        {
                            string errorInstance = errorElement.Value;
                            result.Error = errorInstance;
                        }
                        
                        XElement errorSeverityElement = serviceResourceElement.Element(XName.Get("ErrorSeverity", "http://schemas.microsoft.com/windowsazure"));
                        if (errorSeverityElement != null)
                        {
                            int errorSeverityInstance = int.Parse(errorSeverityElement.Value, CultureInfo.InvariantCulture);
                            result.ErrorSeverity = errorSeverityInstance;
                        }
                        
                        XElement errorStateElement = serviceResourceElement.Element(XName.Get("ErrorState", "http://schemas.microsoft.com/windowsazure"));
                        if (errorStateElement != null)
                        {
                            int errorStateInstance = int.Parse(errorStateElement.Value, CultureInfo.InvariantCulture);
                            result.ErrorState = errorStateInstance;
                        }
                        
                        XElement startTimeElement = serviceResourceElement.Element(XName.Get("StartTime", "http://schemas.microsoft.com/windowsazure"));
                        if (startTimeElement != null)
                        {
                            DateTime startTimeInstance = DateTime.Parse(startTimeElement.Value, CultureInfo.InvariantCulture);
                            result.StartTime = startTimeInstance;
                        }
                        
                        XElement lastModifyTimeElement = serviceResourceElement.Element(XName.Get("LastModifyTime", "http://schemas.microsoft.com/windowsazure"));
                        if (lastModifyTimeElement != null)
                        {
                            DateTime lastModifyTimeInstance = DateTime.Parse(lastModifyTimeElement.Value, CultureInfo.InvariantCulture);
                            result.LastModifyTime = lastModifyTimeInstance;
                        }
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <param name='serverName'>
        /// The name of the SQL Server to be queried.
        /// </param>
        /// <param name='databaseName'>
        /// The name of the Database to be queried.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Response containing the list of database operations for a given
        /// server or database.
        /// </returns>
        public async Task<DatabaseOperationListResponse> ListByDatabaseAsync(string serverName, string databaseName, CancellationToken cancellationToken)
        {
            // Validate
            if (serverName == null)
            {
                throw new ArgumentNullException("serverName");
            }
            if (databaseName == null)
            {
                throw new ArgumentNullException("databaseName");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("serverName", serverName);
                tracingParameters.Add("databaseName", databaseName);
                Tracing.Enter(invocationId, this, "ListByDatabaseAsync", tracingParameters);
            }
            
            // Construct URL
            string url = this.Client.BaseUri + this.Client.Credentials.SubscriptionId + "/services/sqlservers/servers/" + serverName + "/databaseoperations?databaseName=" + databaseName;
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2012-03-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.CreateFromXml(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    DatabaseOperationListResponse result = new DatabaseOperationListResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    XDocument responseDoc = XDocument.Parse(responseContent);
                    
                    XElement serviceResourcesSequenceElement = responseDoc.Element(XName.Get("ServiceResources", "http://schemas.microsoft.com/windowsazure"));
                    if (serviceResourcesSequenceElement != null)
                    {
                        foreach (XElement serviceResourcesElement in serviceResourcesSequenceElement.Elements(XName.Get("ServiceResource", "http://schemas.microsoft.com/windowsazure")))
                        {
                            DatabaseOperationListResponse.DatabaseOperation serviceResourceInstance = new DatabaseOperationListResponse.DatabaseOperation();
                            result.DatabaseOperations.Add(serviceResourceInstance);
                            
                            XElement nameElement = serviceResourcesElement.Element(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                            if (nameElement != null)
                            {
                                string nameInstance = nameElement.Value;
                                serviceResourceInstance.Name = nameInstance;
                            }
                            
                            XElement typeElement = serviceResourcesElement.Element(XName.Get("Type", "http://schemas.microsoft.com/windowsazure"));
                            if (typeElement != null)
                            {
                                string typeInstance = typeElement.Value;
                                serviceResourceInstance.Type = typeInstance;
                            }
                            
                            XElement stateElement = serviceResourcesElement.Element(XName.Get("State", "http://schemas.microsoft.com/windowsazure"));
                            if (stateElement != null)
                            {
                                string stateInstance = stateElement.Value;
                                serviceResourceInstance.State = stateInstance;
                            }
                            
                            XElement selfLinkElement = serviceResourcesElement.Element(XName.Get("SelfLink", "http://schemas.microsoft.com/windowsazure"));
                            if (selfLinkElement != null)
                            {
                                string selfLinkInstance = selfLinkElement.Value;
                                serviceResourceInstance.SelfLink = selfLinkInstance;
                            }
                            
                            XElement parentLinkElement = serviceResourcesElement.Element(XName.Get("ParentLink", "http://schemas.microsoft.com/windowsazure"));
                            if (parentLinkElement != null)
                            {
                                string parentLinkInstance = parentLinkElement.Value;
                                serviceResourceInstance.ParentLink = parentLinkInstance;
                            }
                            
                            XElement idElement = serviceResourcesElement.Element(XName.Get("Id", "http://schemas.microsoft.com/windowsazure"));
                            if (idElement != null)
                            {
                                string idInstance = idElement.Value;
                                serviceResourceInstance.Id = idInstance;
                            }
                            
                            XElement stateIdElement = serviceResourcesElement.Element(XName.Get("StateId", "http://schemas.microsoft.com/windowsazure"));
                            if (stateIdElement != null)
                            {
                                int stateIdInstance = int.Parse(stateIdElement.Value, CultureInfo.InvariantCulture);
                                serviceResourceInstance.StateId = stateIdInstance;
                            }
                            
                            XElement sessionActivityIdElement = serviceResourcesElement.Element(XName.Get("SessionActivityId", "http://schemas.microsoft.com/windowsazure"));
                            if (sessionActivityIdElement != null)
                            {
                                string sessionActivityIdInstance = sessionActivityIdElement.Value;
                                serviceResourceInstance.SessionActivityId = sessionActivityIdInstance;
                            }
                            
                            XElement databaseNameElement = serviceResourcesElement.Element(XName.Get("DatabaseName", "http://schemas.microsoft.com/windowsazure"));
                            if (databaseNameElement != null)
                            {
                                string databaseNameInstance = databaseNameElement.Value;
                                serviceResourceInstance.DatabaseName = databaseNameInstance;
                            }
                            
                            XElement percentCompleteElement = serviceResourcesElement.Element(XName.Get("PercentComplete", "http://schemas.microsoft.com/windowsazure"));
                            if (percentCompleteElement != null)
                            {
                                int percentCompleteInstance = int.Parse(percentCompleteElement.Value, CultureInfo.InvariantCulture);
                                serviceResourceInstance.PercentComplete = percentCompleteInstance;
                            }
                            
                            XElement errorCodeElement = serviceResourcesElement.Element(XName.Get("ErrorCode", "http://schemas.microsoft.com/windowsazure"));
                            if (errorCodeElement != null)
                            {
                                int errorCodeInstance = int.Parse(errorCodeElement.Value, CultureInfo.InvariantCulture);
                                serviceResourceInstance.ErrorCode = errorCodeInstance;
                            }
                            
                            XElement errorElement = serviceResourcesElement.Element(XName.Get("Error", "http://schemas.microsoft.com/windowsazure"));
                            if (errorElement != null)
                            {
                                string errorInstance = errorElement.Value;
                                serviceResourceInstance.Error = errorInstance;
                            }
                            
                            XElement errorSeverityElement = serviceResourcesElement.Element(XName.Get("ErrorSeverity", "http://schemas.microsoft.com/windowsazure"));
                            if (errorSeverityElement != null)
                            {
                                int errorSeverityInstance = int.Parse(errorSeverityElement.Value, CultureInfo.InvariantCulture);
                                serviceResourceInstance.ErrorSeverity = errorSeverityInstance;
                            }
                            
                            XElement errorStateElement = serviceResourcesElement.Element(XName.Get("ErrorState", "http://schemas.microsoft.com/windowsazure"));
                            if (errorStateElement != null)
                            {
                                int errorStateInstance = int.Parse(errorStateElement.Value, CultureInfo.InvariantCulture);
                                serviceResourceInstance.ErrorState = errorStateInstance;
                            }
                            
                            XElement startTimeElement = serviceResourcesElement.Element(XName.Get("StartTime", "http://schemas.microsoft.com/windowsazure"));
                            if (startTimeElement != null)
                            {
                                DateTime startTimeInstance = DateTime.Parse(startTimeElement.Value, CultureInfo.InvariantCulture);
                                serviceResourceInstance.StartTime = startTimeInstance;
                            }
                            
                            XElement lastModifyTimeElement = serviceResourcesElement.Element(XName.Get("LastModifyTime", "http://schemas.microsoft.com/windowsazure"));
                            if (lastModifyTimeElement != null)
                            {
                                DateTime lastModifyTimeInstance = DateTime.Parse(lastModifyTimeElement.Value, CultureInfo.InvariantCulture);
                                serviceResourceInstance.LastModifyTime = lastModifyTimeInstance;
                            }
                        }
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <param name='serverName'>
        /// The name of the SQL Server to be queried.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Response containing the list of database operations for a given
        /// server or database.
        /// </returns>
        public async Task<DatabaseOperationListResponse> ListByServerAsync(string serverName, CancellationToken cancellationToken)
        {
            // Validate
            if (serverName == null)
            {
                throw new ArgumentNullException("serverName");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("serverName", serverName);
                Tracing.Enter(invocationId, this, "ListByServerAsync", tracingParameters);
            }
            
            // Construct URL
            string url = this.Client.BaseUri + this.Client.Credentials.SubscriptionId + "/services/sqlservers/servers/" + serverName + "/databaseoperations?contentview=generic";
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2012-03-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.CreateFromXml(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    DatabaseOperationListResponse result = new DatabaseOperationListResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    XDocument responseDoc = XDocument.Parse(responseContent);
                    
                    XElement serviceResourcesSequenceElement = responseDoc.Element(XName.Get("ServiceResources", "http://schemas.microsoft.com/windowsazure"));
                    if (serviceResourcesSequenceElement != null)
                    {
                        foreach (XElement serviceResourcesElement in serviceResourcesSequenceElement.Elements(XName.Get("ServiceResource", "http://schemas.microsoft.com/windowsazure")))
                        {
                            DatabaseOperationListResponse.DatabaseOperation serviceResourceInstance = new DatabaseOperationListResponse.DatabaseOperation();
                            result.DatabaseOperations.Add(serviceResourceInstance);
                            
                            XElement nameElement = serviceResourcesElement.Element(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                            if (nameElement != null)
                            {
                                string nameInstance = nameElement.Value;
                                serviceResourceInstance.Name = nameInstance;
                            }
                            
                            XElement typeElement = serviceResourcesElement.Element(XName.Get("Type", "http://schemas.microsoft.com/windowsazure"));
                            if (typeElement != null)
                            {
                                string typeInstance = typeElement.Value;
                                serviceResourceInstance.Type = typeInstance;
                            }
                            
                            XElement stateElement = serviceResourcesElement.Element(XName.Get("State", "http://schemas.microsoft.com/windowsazure"));
                            if (stateElement != null)
                            {
                                string stateInstance = stateElement.Value;
                                serviceResourceInstance.State = stateInstance;
                            }
                            
                            XElement selfLinkElement = serviceResourcesElement.Element(XName.Get("SelfLink", "http://schemas.microsoft.com/windowsazure"));
                            if (selfLinkElement != null)
                            {
                                string selfLinkInstance = selfLinkElement.Value;
                                serviceResourceInstance.SelfLink = selfLinkInstance;
                            }
                            
                            XElement parentLinkElement = serviceResourcesElement.Element(XName.Get("ParentLink", "http://schemas.microsoft.com/windowsazure"));
                            if (parentLinkElement != null)
                            {
                                string parentLinkInstance = parentLinkElement.Value;
                                serviceResourceInstance.ParentLink = parentLinkInstance;
                            }
                            
                            XElement idElement = serviceResourcesElement.Element(XName.Get("Id", "http://schemas.microsoft.com/windowsazure"));
                            if (idElement != null)
                            {
                                string idInstance = idElement.Value;
                                serviceResourceInstance.Id = idInstance;
                            }
                            
                            XElement stateIdElement = serviceResourcesElement.Element(XName.Get("StateId", "http://schemas.microsoft.com/windowsazure"));
                            if (stateIdElement != null)
                            {
                                int stateIdInstance = int.Parse(stateIdElement.Value, CultureInfo.InvariantCulture);
                                serviceResourceInstance.StateId = stateIdInstance;
                            }
                            
                            XElement sessionActivityIdElement = serviceResourcesElement.Element(XName.Get("SessionActivityId", "http://schemas.microsoft.com/windowsazure"));
                            if (sessionActivityIdElement != null)
                            {
                                string sessionActivityIdInstance = sessionActivityIdElement.Value;
                                serviceResourceInstance.SessionActivityId = sessionActivityIdInstance;
                            }
                            
                            XElement databaseNameElement = serviceResourcesElement.Element(XName.Get("DatabaseName", "http://schemas.microsoft.com/windowsazure"));
                            if (databaseNameElement != null)
                            {
                                string databaseNameInstance = databaseNameElement.Value;
                                serviceResourceInstance.DatabaseName = databaseNameInstance;
                            }
                            
                            XElement percentCompleteElement = serviceResourcesElement.Element(XName.Get("PercentComplete", "http://schemas.microsoft.com/windowsazure"));
                            if (percentCompleteElement != null)
                            {
                                int percentCompleteInstance = int.Parse(percentCompleteElement.Value, CultureInfo.InvariantCulture);
                                serviceResourceInstance.PercentComplete = percentCompleteInstance;
                            }
                            
                            XElement errorCodeElement = serviceResourcesElement.Element(XName.Get("ErrorCode", "http://schemas.microsoft.com/windowsazure"));
                            if (errorCodeElement != null)
                            {
                                int errorCodeInstance = int.Parse(errorCodeElement.Value, CultureInfo.InvariantCulture);
                                serviceResourceInstance.ErrorCode = errorCodeInstance;
                            }
                            
                            XElement errorElement = serviceResourcesElement.Element(XName.Get("Error", "http://schemas.microsoft.com/windowsazure"));
                            if (errorElement != null)
                            {
                                string errorInstance = errorElement.Value;
                                serviceResourceInstance.Error = errorInstance;
                            }
                            
                            XElement errorSeverityElement = serviceResourcesElement.Element(XName.Get("ErrorSeverity", "http://schemas.microsoft.com/windowsazure"));
                            if (errorSeverityElement != null)
                            {
                                int errorSeverityInstance = int.Parse(errorSeverityElement.Value, CultureInfo.InvariantCulture);
                                serviceResourceInstance.ErrorSeverity = errorSeverityInstance;
                            }
                            
                            XElement errorStateElement = serviceResourcesElement.Element(XName.Get("ErrorState", "http://schemas.microsoft.com/windowsazure"));
                            if (errorStateElement != null)
                            {
                                int errorStateInstance = int.Parse(errorStateElement.Value, CultureInfo.InvariantCulture);
                                serviceResourceInstance.ErrorState = errorStateInstance;
                            }
                            
                            XElement startTimeElement = serviceResourcesElement.Element(XName.Get("StartTime", "http://schemas.microsoft.com/windowsazure"));
                            if (startTimeElement != null)
                            {
                                DateTime startTimeInstance = DateTime.Parse(startTimeElement.Value, CultureInfo.InvariantCulture);
                                serviceResourceInstance.StartTime = startTimeInstance;
                            }
                            
                            XElement lastModifyTimeElement = serviceResourcesElement.Element(XName.Get("LastModifyTime", "http://schemas.microsoft.com/windowsazure"));
                            if (lastModifyTimeElement != null)
                            {
                                DateTime lastModifyTimeInstance = DateTime.Parse(lastModifyTimeElement.Value, CultureInfo.InvariantCulture);
                                serviceResourceInstance.LastModifyTime = lastModifyTimeInstance;
                            }
                        }
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
    }
    
    /// <summary>
    /// The SQL Database Management API includes operations for managing SQL
    /// Databases for a subscription.
    /// </summary>
    public partial interface IDatabaseOperations
    {
        /// <summary>
        /// The Create Database operation creates a database in a SQL Server
        /// database server.
        /// </summary>
        /// <param name='serverName'>
        /// The name of the SQL Server where the database will be created
        /// </param>
        /// <param name='parameters'>
        /// The parameters for the create database operation
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        Task<DatabaseCreateResponse> CreateAsync(string serverName, DatabaseCreateParameters parameters, CancellationToken cancellationToken);
        
        /// <summary>
        /// The Drop Server operation drops a SQL Database server from a
        /// subscription.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/gg715285.aspx
        /// for more information)
        /// </summary>
        /// <param name='serverName'>
        /// The name of the server on which the database is found.
        /// </param>
        /// <param name='databaseName'>
        /// The name of the database to be deleted.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        Task<OperationResponse> DeleteAsync(string serverName, string databaseName, CancellationToken cancellationToken);
        
        /// <summary>
        /// The Get Database operation retrieves information about a SQL Server
        /// database.
        /// </summary>
        /// <param name='serverName'>
        /// The name of the SQL Server on which the database is housed.
        /// </param>
        /// <param name='databaseName'>
        /// The name of the SQL Server database to be obtained.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        Task<DatabaseGetResponse> GetAsync(string serverName, string databaseName, CancellationToken cancellationToken);
        
        /// <param name='serverName'>
        /// The name of the database server to be queried.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Response containing the list of databases for a given server.
        /// </returns>
        Task<DatabaseListResponse> ListAsync(string serverName, CancellationToken cancellationToken);
        
        /// <summary>
        /// The Get Database operation retrieves information about a SQL Server
        /// database.
        /// </summary>
        /// <param name='serverName'>
        /// The name of the SQL Server where the database is housed.
        /// </param>
        /// <param name='databaseName'>
        /// The name of the SQL Server database to be obtained.
        /// </param>
        /// <param name='parameters'>
        /// The parameters for the update database operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        Task<DatabaseUpdateResponse> UpdateAsync(string serverName, string databaseName, DatabaseUpdateParameters parameters, CancellationToken cancellationToken);
    }
    
    /// <summary>
    /// The SQL Database Management API includes operations for managing SQL
    /// Databases for a subscription.
    /// </summary>
    public static partial class DatabaseOperationsExtensions
    {
        /// <summary>
        /// The Create Database operation creates a database in a SQL Server
        /// database server.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Sql.IDatabaseOperations.
        /// </param>
        /// <param name='serverName'>
        /// The name of the SQL Server where the database will be created
        /// </param>
        /// <param name='parameters'>
        /// The parameters for the create database operation
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static DatabaseCreateResponse Create(this IDatabaseOperations operations, string serverName, DatabaseCreateParameters parameters)
        {
            try
            {
                return operations.CreateAsync(serverName, parameters).Result;
            }
            catch (AggregateException ex)
            {
                if (ex.InnerExceptions.Count > 1)
                {
                    throw;
                }
                else
                {
                    throw ex.InnerException;
                }
            }
        }
        
        /// <summary>
        /// The Create Database operation creates a database in a SQL Server
        /// database server.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Sql.IDatabaseOperations.
        /// </param>
        /// <param name='serverName'>
        /// The name of the SQL Server where the database will be created
        /// </param>
        /// <param name='parameters'>
        /// The parameters for the create database operation
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<DatabaseCreateResponse> CreateAsync(this IDatabaseOperations operations, string serverName, DatabaseCreateParameters parameters)
        {
            return operations.CreateAsync(serverName, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// The Drop Server operation drops a SQL Database server from a
        /// subscription.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/gg715285.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Sql.IDatabaseOperations.
        /// </param>
        /// <param name='serverName'>
        /// The name of the server on which the database is found.
        /// </param>
        /// <param name='databaseName'>
        /// The name of the database to be deleted.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static OperationResponse Delete(this IDatabaseOperations operations, string serverName, string databaseName)
        {
            try
            {
                return operations.DeleteAsync(serverName, databaseName).Result;
            }
            catch (AggregateException ex)
            {
                if (ex.InnerExceptions.Count > 1)
                {
                    throw;
                }
                else
                {
                    throw ex.InnerException;
                }
            }
        }
        
        /// <summary>
        /// The Drop Server operation drops a SQL Database server from a
        /// subscription.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/gg715285.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Sql.IDatabaseOperations.
        /// </param>
        /// <param name='serverName'>
        /// The name of the server on which the database is found.
        /// </param>
        /// <param name='databaseName'>
        /// The name of the database to be deleted.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<OperationResponse> DeleteAsync(this IDatabaseOperations operations, string serverName, string databaseName)
        {
            return operations.DeleteAsync(serverName, databaseName, CancellationToken.None);
        }
        
        /// <summary>
        /// The Get Database operation retrieves information about a SQL Server
        /// database.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Sql.IDatabaseOperations.
        /// </param>
        /// <param name='serverName'>
        /// The name of the SQL Server on which the database is housed.
        /// </param>
        /// <param name='databaseName'>
        /// The name of the SQL Server database to be obtained.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static DatabaseGetResponse Get(this IDatabaseOperations operations, string serverName, string databaseName)
        {
            try
            {
                return operations.GetAsync(serverName, databaseName).Result;
            }
            catch (AggregateException ex)
            {
                if (ex.InnerExceptions.Count > 1)
                {
                    throw;
                }
                else
                {
                    throw ex.InnerException;
                }
            }
        }
        
        /// <summary>
        /// The Get Database operation retrieves information about a SQL Server
        /// database.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Sql.IDatabaseOperations.
        /// </param>
        /// <param name='serverName'>
        /// The name of the SQL Server on which the database is housed.
        /// </param>
        /// <param name='databaseName'>
        /// The name of the SQL Server database to be obtained.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<DatabaseGetResponse> GetAsync(this IDatabaseOperations operations, string serverName, string databaseName)
        {
            return operations.GetAsync(serverName, databaseName, CancellationToken.None);
        }
        
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Sql.IDatabaseOperations.
        /// </param>
        /// <param name='serverName'>
        /// The name of the database server to be queried.
        /// </param>
        /// <returns>
        /// Response containing the list of databases for a given server.
        /// </returns>
        public static DatabaseListResponse List(this IDatabaseOperations operations, string serverName)
        {
            try
            {
                return operations.ListAsync(serverName).Result;
            }
            catch (AggregateException ex)
            {
                if (ex.InnerExceptions.Count > 1)
                {
                    throw;
                }
                else
                {
                    throw ex.InnerException;
                }
            }
        }
        
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Sql.IDatabaseOperations.
        /// </param>
        /// <param name='serverName'>
        /// The name of the database server to be queried.
        /// </param>
        /// <returns>
        /// Response containing the list of databases for a given server.
        /// </returns>
        public static Task<DatabaseListResponse> ListAsync(this IDatabaseOperations operations, string serverName)
        {
            return operations.ListAsync(serverName, CancellationToken.None);
        }
        
        /// <summary>
        /// The Get Database operation retrieves information about a SQL Server
        /// database.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Sql.IDatabaseOperations.
        /// </param>
        /// <param name='serverName'>
        /// The name of the SQL Server where the database is housed.
        /// </param>
        /// <param name='databaseName'>
        /// The name of the SQL Server database to be obtained.
        /// </param>
        /// <param name='parameters'>
        /// The parameters for the update database operation.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static DatabaseUpdateResponse Update(this IDatabaseOperations operations, string serverName, string databaseName, DatabaseUpdateParameters parameters)
        {
            try
            {
                return operations.UpdateAsync(serverName, databaseName, parameters).Result;
            }
            catch (AggregateException ex)
            {
                if (ex.InnerExceptions.Count > 1)
                {
                    throw;
                }
                else
                {
                    throw ex.InnerException;
                }
            }
        }
        
        /// <summary>
        /// The Get Database operation retrieves information about a SQL Server
        /// database.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Sql.IDatabaseOperations.
        /// </param>
        /// <param name='serverName'>
        /// The name of the SQL Server where the database is housed.
        /// </param>
        /// <param name='databaseName'>
        /// The name of the SQL Server database to be obtained.
        /// </param>
        /// <param name='parameters'>
        /// The parameters for the update database operation.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<DatabaseUpdateResponse> UpdateAsync(this IDatabaseOperations operations, string serverName, string databaseName, DatabaseUpdateParameters parameters)
        {
            return operations.UpdateAsync(serverName, databaseName, parameters, CancellationToken.None);
        }
    }
    
    /// <summary>
    /// The SQL Database Management API includes operations for managing SQL
    /// Databases for a subscription.
    /// </summary>
    internal partial class DatabaseOperations : IServiceOperations<SqlManagementClient>, IDatabaseOperations
    {
        /// <summary>
        /// Initializes a new instance of the DatabaseOperations class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        internal DatabaseOperations(SqlManagementClient client)
        {
            this._client = client;
        }
        
        private SqlManagementClient _client;
        
        /// <summary>
        /// Gets a reference to the
        /// Microsoft.WindowsAzure.Management.Sql.SqlManagementClient.
        /// </summary>
        public SqlManagementClient Client
        {
            get { return this._client; }
        }
        
        /// <summary>
        /// The Create Database operation creates a database in a SQL Server
        /// database server.
        /// </summary>
        /// <param name='serverName'>
        /// The name of the SQL Server where the database will be created
        /// </param>
        /// <param name='parameters'>
        /// The parameters for the create database operation
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<DatabaseCreateResponse> CreateAsync(string serverName, DatabaseCreateParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (serverName == null)
            {
                throw new ArgumentNullException("serverName");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            if (parameters.CollationName == null)
            {
                throw new ArgumentNullException("parameters.CollationName");
            }
            if (parameters.Edition == null)
            {
                throw new ArgumentNullException("parameters.Edition");
            }
            if (parameters.Name == null)
            {
                throw new ArgumentNullException("parameters.Name");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("serverName", serverName);
                tracingParameters.Add("parameters", parameters);
                Tracing.Enter(invocationId, this, "CreateAsync", tracingParameters);
            }
            
            // Construct URL
            string url = this.Client.BaseUri + "/" + this.Client.Credentials.SubscriptionId + "/services/sqlservers/servers/" + serverName + "/databases";
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2012-03-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                XDocument requestDoc = new XDocument();
                
                XElement serviceResourceElement = new XElement(XName.Get("ServiceResource", "http://schemas.microsoft.com/windowsazure"));
                requestDoc.Add(serviceResourceElement);
                
                XElement nameElement = new XElement(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                nameElement.Value = parameters.Name;
                serviceResourceElement.Add(nameElement);
                
                XElement editionElement = new XElement(XName.Get("Edition", "http://schemas.microsoft.com/windowsazure"));
                editionElement.Value = parameters.Edition;
                serviceResourceElement.Add(editionElement);
                
                XElement maxSizeGBElement = new XElement(XName.Get("MaxSizeGB", "http://schemas.microsoft.com/windowsazure"));
                maxSizeGBElement.Value = parameters.MaximumDatabaseSizeInGB.ToString();
                serviceResourceElement.Add(maxSizeGBElement);
                
                XElement collationNameElement = new XElement(XName.Get("CollationName", "http://schemas.microsoft.com/windowsazure"));
                collationNameElement.Value = parameters.CollationName;
                serviceResourceElement.Add(collationNameElement);
                
                if (parameters.ServiceObjectiveId != null)
                {
                    XElement serviceObjectiveIdElement = new XElement(XName.Get("ServiceObjectiveId", "http://schemas.microsoft.com/windowsazure"));
                    serviceObjectiveIdElement.Value = parameters.ServiceObjectiveId;
                    serviceResourceElement.Add(serviceObjectiveIdElement);
                }
                
                requestContent = requestDoc.ToString();
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = new MediaTypeHeaderValue("application/xml");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.Created)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.CreateFromXml(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    DatabaseCreateResponse result = new DatabaseCreateResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    XDocument responseDoc = XDocument.Parse(responseContent);
                    
                    XElement serviceResourceElement2 = responseDoc.Element(XName.Get("ServiceResource", "http://schemas.microsoft.com/windowsazure"));
                    if (serviceResourceElement2 != null)
                    {
                        XElement nameElement2 = serviceResourceElement2.Element(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                        if (nameElement2 != null)
                        {
                            string nameInstance = nameElement2.Value;
                            result.Name = nameInstance;
                        }
                        
                        XElement idElement = serviceResourceElement2.Element(XName.Get("Id", "http://schemas.microsoft.com/windowsazure"));
                        if (idElement != null)
                        {
                            int idInstance = int.Parse(idElement.Value, CultureInfo.InvariantCulture);
                            result.Id = idInstance;
                        }
                        
                        XElement typeElement = serviceResourceElement2.Element(XName.Get("Type", "http://schemas.microsoft.com/windowsazure"));
                        if (typeElement != null)
                        {
                            string typeInstance = typeElement.Value;
                            result.Type = typeInstance;
                        }
                        
                        XElement stateElement = serviceResourceElement2.Element(XName.Get("State", "http://schemas.microsoft.com/windowsazure"));
                        if (stateElement != null)
                        {
                            string stateInstance = stateElement.Value;
                            result.State = stateInstance;
                        }
                        
                        XElement editionElement2 = serviceResourceElement2.Element(XName.Get("Edition", "http://schemas.microsoft.com/windowsazure"));
                        if (editionElement2 != null)
                        {
                            string editionInstance = editionElement2.Value;
                            result.Edition = editionInstance;
                        }
                        
                        XElement maxSizeGBElement2 = serviceResourceElement2.Element(XName.Get("MaxSizeGB", "http://schemas.microsoft.com/windowsazure"));
                        if (maxSizeGBElement2 != null)
                        {
                            long maxSizeGBInstance = long.Parse(maxSizeGBElement2.Value, CultureInfo.InvariantCulture);
                            result.MaximumDatabaseSizeInGB = maxSizeGBInstance;
                        }
                        
                        XElement collationNameElement2 = serviceResourceElement2.Element(XName.Get("CollationName", "http://schemas.microsoft.com/windowsazure"));
                        if (collationNameElement2 != null)
                        {
                            string collationNameInstance = collationNameElement2.Value;
                            result.CollationName = collationNameInstance;
                        }
                        
                        XElement creationDateElement = serviceResourceElement2.Element(XName.Get("CreationDate", "http://schemas.microsoft.com/windowsazure"));
                        if (creationDateElement != null)
                        {
                            DateTime creationDateInstance = DateTime.Parse(creationDateElement.Value, CultureInfo.InvariantCulture);
                            result.CreationDate = creationDateInstance;
                        }
                        
                        XElement isFederationRootElement = serviceResourceElement2.Element(XName.Get("IsFederationRoot", "http://schemas.microsoft.com/windowsazure"));
                        if (isFederationRootElement != null)
                        {
                            bool isFederationRootInstance = bool.Parse(isFederationRootElement.Value);
                            result.IsFederationRoot = isFederationRootInstance;
                        }
                        
                        XElement isSystemObjectElement = serviceResourceElement2.Element(XName.Get("IsSystemObject", "http://schemas.microsoft.com/windowsazure"));
                        if (isSystemObjectElement != null)
                        {
                            bool isSystemObjectInstance = bool.Parse(isSystemObjectElement.Value);
                            result.IsSystemObject = isSystemObjectInstance;
                        }
                        
                        XElement sizeMBElement = serviceResourceElement2.Element(XName.Get("SizeMB", "http://schemas.microsoft.com/windowsazure"));
                        if (sizeMBElement != null)
                        {
                            string sizeMBInstance = sizeMBElement.Value;
                            result.SizeMB = sizeMBInstance;
                        }
                        
                        XElement serviceObjectiveAssignmentErrorCodeElement = serviceResourceElement2.Element(XName.Get("ServiceObjectiveAssignmentErrorCode", "http://schemas.microsoft.com/windowsazure"));
                        if (serviceObjectiveAssignmentErrorCodeElement != null)
                        {
                            string serviceObjectiveAssignmentErrorCodeInstance = serviceObjectiveAssignmentErrorCodeElement.Value;
                            result.ServiceObjectiveAssignmentErrorCode = serviceObjectiveAssignmentErrorCodeInstance;
                        }
                        
                        XElement serviceObjectiveAssignmentErrorDescriptionElement = serviceResourceElement2.Element(XName.Get("ServiceObjectiveAssignmentErrorDescription", "http://schemas.microsoft.com/windowsazure"));
                        if (serviceObjectiveAssignmentErrorDescriptionElement != null)
                        {
                            string serviceObjectiveAssignmentErrorDescriptionInstance = serviceObjectiveAssignmentErrorDescriptionElement.Value;
                            result.ServiceObjectiveAssignmentErrorDescription = serviceObjectiveAssignmentErrorDescriptionInstance;
                        }
                        
                        XElement serviceObjectiveAssignmentStateElement = serviceResourceElement2.Element(XName.Get("ServiceObjectiveAssignmentState", "http://schemas.microsoft.com/windowsazure"));
                        if (serviceObjectiveAssignmentStateElement != null)
                        {
                            string serviceObjectiveAssignmentStateInstance = serviceObjectiveAssignmentStateElement.Value;
                            result.ServiceObjectiveAssignmentState = serviceObjectiveAssignmentStateInstance;
                        }
                        
                        XElement serviceObjectiveAssignmentStateDescriptionElement = serviceResourceElement2.Element(XName.Get("ServiceObjectiveAssignmentStateDescription", "http://schemas.microsoft.com/windowsazure"));
                        if (serviceObjectiveAssignmentStateDescriptionElement != null)
                        {
                            string serviceObjectiveAssignmentStateDescriptionInstance = serviceObjectiveAssignmentStateDescriptionElement.Value;
                            result.ServiceObjectiveAssignmentStateDescription = serviceObjectiveAssignmentStateDescriptionInstance;
                        }
                        
                        XElement serviceObjectiveAssignmentSuccessDateElement = serviceResourceElement2.Element(XName.Get("ServiceObjectiveAssignmentSuccessDate", "http://schemas.microsoft.com/windowsazure"));
                        if (serviceObjectiveAssignmentSuccessDateElement != null)
                        {
                            string serviceObjectiveAssignmentSuccessDateInstance = serviceObjectiveAssignmentSuccessDateElement.Value;
                            result.ServiceObjectiveAssignmentSuccessDate = serviceObjectiveAssignmentSuccessDateInstance;
                        }
                        
                        XElement serviceObjectiveIdElement2 = serviceResourceElement2.Element(XName.Get("ServiceObjectiveId", "http://schemas.microsoft.com/windowsazure"));
                        if (serviceObjectiveIdElement2 != null)
                        {
                            string serviceObjectiveIdInstance = serviceObjectiveIdElement2.Value;
                            result.ServiceObjectiveId = serviceObjectiveIdInstance;
                        }
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The Drop Server operation drops a SQL Database server from a
        /// subscription.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/gg715285.aspx
        /// for more information)
        /// </summary>
        /// <param name='serverName'>
        /// The name of the server on which the database is found.
        /// </param>
        /// <param name='databaseName'>
        /// The name of the database to be deleted.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<OperationResponse> DeleteAsync(string serverName, string databaseName, CancellationToken cancellationToken)
        {
            // Validate
            if (serverName == null)
            {
                throw new ArgumentNullException("serverName");
            }
            if (databaseName == null)
            {
                throw new ArgumentNullException("databaseName");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("serverName", serverName);
                tracingParameters.Add("databaseName", databaseName);
                Tracing.Enter(invocationId, this, "DeleteAsync", tracingParameters);
            }
            
            // Construct URL
            string url = this.Client.BaseUri + "/" + this.Client.Credentials.SubscriptionId + "/services/sqlservers/servers/" + serverName + "/databases/" + databaseName;
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Delete;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2012-03-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.CreateFromXml(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    OperationResponse result = new OperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The Get Database operation retrieves information about a SQL Server
        /// database.
        /// </summary>
        /// <param name='serverName'>
        /// The name of the SQL Server on which the database is housed.
        /// </param>
        /// <param name='databaseName'>
        /// The name of the SQL Server database to be obtained.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<DatabaseGetResponse> GetAsync(string serverName, string databaseName, CancellationToken cancellationToken)
        {
            // Validate
            if (serverName == null)
            {
                throw new ArgumentNullException("serverName");
            }
            if (databaseName == null)
            {
                throw new ArgumentNullException("databaseName");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("serverName", serverName);
                tracingParameters.Add("databaseName", databaseName);
                Tracing.Enter(invocationId, this, "GetAsync", tracingParameters);
            }
            
            // Construct URL
            string url = this.Client.BaseUri + "/" + this.Client.Credentials.SubscriptionId + "/services/sqlservers/servers/" + serverName + "/databases/" + databaseName;
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2012-03-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.CreateFromXml(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    DatabaseGetResponse result = new DatabaseGetResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    XDocument responseDoc = XDocument.Parse(responseContent);
                    
                    XElement serviceResourceElement = responseDoc.Element(XName.Get("ServiceResource", "http://schemas.microsoft.com/windowsazure"));
                    if (serviceResourceElement != null)
                    {
                        XElement nameElement = serviceResourceElement.Element(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                        if (nameElement != null)
                        {
                            string nameInstance = nameElement.Value;
                            result.Name = nameInstance;
                        }
                        
                        XElement idElement = serviceResourceElement.Element(XName.Get("Id", "http://schemas.microsoft.com/windowsazure"));
                        if (idElement != null)
                        {
                            int idInstance = int.Parse(idElement.Value, CultureInfo.InvariantCulture);
                            result.Id = idInstance;
                        }
                        
                        XElement typeElement = serviceResourceElement.Element(XName.Get("Type", "http://schemas.microsoft.com/windowsazure"));
                        if (typeElement != null)
                        {
                            string typeInstance = typeElement.Value;
                            result.Type = typeInstance;
                        }
                        
                        XElement stateElement = serviceResourceElement.Element(XName.Get("State", "http://schemas.microsoft.com/windowsazure"));
                        if (stateElement != null)
                        {
                            string stateInstance = stateElement.Value;
                            result.State = stateInstance;
                        }
                        
                        XElement editionElement = serviceResourceElement.Element(XName.Get("Edition", "http://schemas.microsoft.com/windowsazure"));
                        if (editionElement != null)
                        {
                            string editionInstance = editionElement.Value;
                            result.Edition = editionInstance;
                        }
                        
                        XElement maxSizeGBElement = serviceResourceElement.Element(XName.Get("MaxSizeGB", "http://schemas.microsoft.com/windowsazure"));
                        if (maxSizeGBElement != null)
                        {
                            long maxSizeGBInstance = long.Parse(maxSizeGBElement.Value, CultureInfo.InvariantCulture);
                            result.MaximumDatabaseSizeInGB = maxSizeGBInstance;
                        }
                        
                        XElement collationNameElement = serviceResourceElement.Element(XName.Get("CollationName", "http://schemas.microsoft.com/windowsazure"));
                        if (collationNameElement != null)
                        {
                            string collationNameInstance = collationNameElement.Value;
                            result.CollationName = collationNameInstance;
                        }
                        
                        XElement creationDateElement = serviceResourceElement.Element(XName.Get("CreationDate", "http://schemas.microsoft.com/windowsazure"));
                        if (creationDateElement != null)
                        {
                            DateTime creationDateInstance = DateTime.Parse(creationDateElement.Value, CultureInfo.InvariantCulture);
                            result.CreationDate = creationDateInstance;
                        }
                        
                        XElement isFederationRootElement = serviceResourceElement.Element(XName.Get("IsFederationRoot", "http://schemas.microsoft.com/windowsazure"));
                        if (isFederationRootElement != null)
                        {
                            bool isFederationRootInstance = bool.Parse(isFederationRootElement.Value);
                            result.IsFederationRoot = isFederationRootInstance;
                        }
                        
                        XElement isSystemObjectElement = serviceResourceElement.Element(XName.Get("IsSystemObject", "http://schemas.microsoft.com/windowsazure"));
                        if (isSystemObjectElement != null)
                        {
                            bool isSystemObjectInstance = bool.Parse(isSystemObjectElement.Value);
                            result.IsSystemObject = isSystemObjectInstance;
                        }
                        
                        XElement sizeMBElement = serviceResourceElement.Element(XName.Get("SizeMB", "http://schemas.microsoft.com/windowsazure"));
                        if (sizeMBElement != null)
                        {
                            string sizeMBInstance = sizeMBElement.Value;
                            result.SizeMB = sizeMBInstance;
                        }
                        
                        XElement serviceObjectiveAssignmentErrorCodeElement = serviceResourceElement.Element(XName.Get("ServiceObjectiveAssignmentErrorCode", "http://schemas.microsoft.com/windowsazure"));
                        if (serviceObjectiveAssignmentErrorCodeElement != null)
                        {
                            string serviceObjectiveAssignmentErrorCodeInstance = serviceObjectiveAssignmentErrorCodeElement.Value;
                            result.ServiceObjectiveAssignmentErrorCode = serviceObjectiveAssignmentErrorCodeInstance;
                        }
                        
                        XElement serviceObjectiveAssignmentErrorDescriptionElement = serviceResourceElement.Element(XName.Get("ServiceObjectiveAssignmentErrorDescription", "http://schemas.microsoft.com/windowsazure"));
                        if (serviceObjectiveAssignmentErrorDescriptionElement != null)
                        {
                            string serviceObjectiveAssignmentErrorDescriptionInstance = serviceObjectiveAssignmentErrorDescriptionElement.Value;
                            result.ServiceObjectiveAssignmentErrorDescription = serviceObjectiveAssignmentErrorDescriptionInstance;
                        }
                        
                        XElement serviceObjectiveAssignmentStateElement = serviceResourceElement.Element(XName.Get("ServiceObjectiveAssignmentState", "http://schemas.microsoft.com/windowsazure"));
                        if (serviceObjectiveAssignmentStateElement != null)
                        {
                            string serviceObjectiveAssignmentStateInstance = serviceObjectiveAssignmentStateElement.Value;
                            result.ServiceObjectiveAssignmentState = serviceObjectiveAssignmentStateInstance;
                        }
                        
                        XElement serviceObjectiveAssignmentStateDescriptionElement = serviceResourceElement.Element(XName.Get("ServiceObjectiveAssignmentStateDescription", "http://schemas.microsoft.com/windowsazure"));
                        if (serviceObjectiveAssignmentStateDescriptionElement != null)
                        {
                            string serviceObjectiveAssignmentStateDescriptionInstance = serviceObjectiveAssignmentStateDescriptionElement.Value;
                            result.ServiceObjectiveAssignmentStateDescription = serviceObjectiveAssignmentStateDescriptionInstance;
                        }
                        
                        XElement serviceObjectiveAssignmentSuccessDateElement = serviceResourceElement.Element(XName.Get("ServiceObjectiveAssignmentSuccessDate", "http://schemas.microsoft.com/windowsazure"));
                        if (serviceObjectiveAssignmentSuccessDateElement != null)
                        {
                            string serviceObjectiveAssignmentSuccessDateInstance = serviceObjectiveAssignmentSuccessDateElement.Value;
                            result.ServiceObjectiveAssignmentSuccessDate = serviceObjectiveAssignmentSuccessDateInstance;
                        }
                        
                        XElement serviceObjectiveIdElement = serviceResourceElement.Element(XName.Get("ServiceObjectiveId", "http://schemas.microsoft.com/windowsazure"));
                        if (serviceObjectiveIdElement != null)
                        {
                            string serviceObjectiveIdInstance = serviceObjectiveIdElement.Value;
                            result.ServiceObjectiveId = serviceObjectiveIdInstance;
                        }
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <param name='serverName'>
        /// The name of the database server to be queried.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Response containing the list of databases for a given server.
        /// </returns>
        public async Task<DatabaseListResponse> ListAsync(string serverName, CancellationToken cancellationToken)
        {
            // Validate
            if (serverName == null)
            {
                throw new ArgumentNullException("serverName");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("serverName", serverName);
                Tracing.Enter(invocationId, this, "ListAsync", tracingParameters);
            }
            
            // Construct URL
            string url = this.Client.BaseUri + "/" + this.Client.Credentials.SubscriptionId + "/services/sqlservers/servers/" + serverName + "/databases?contentview=generic";
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2012-03-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.CreateFromXml(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    DatabaseListResponse result = new DatabaseListResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    XDocument responseDoc = XDocument.Parse(responseContent);
                    
                    XElement serviceResourcesSequenceElement = responseDoc.Element(XName.Get("ServiceResources", "http://schemas.microsoft.com/windowsazure"));
                    if (serviceResourcesSequenceElement != null)
                    {
                        foreach (XElement serviceResourcesElement in serviceResourcesSequenceElement.Elements(XName.Get("ServiceResource", "http://schemas.microsoft.com/windowsazure")))
                        {
                            DatabaseListResponse.Database serviceResourceInstance = new DatabaseListResponse.Database();
                            result.Databases.Add(serviceResourceInstance);
                            
                            XElement nameElement = serviceResourcesElement.Element(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                            if (nameElement != null)
                            {
                                string nameInstance = nameElement.Value;
                                serviceResourceInstance.Name = nameInstance;
                            }
                            
                            XElement idElement = serviceResourcesElement.Element(XName.Get("Id", "http://schemas.microsoft.com/windowsazure"));
                            if (idElement != null)
                            {
                                int idInstance = int.Parse(idElement.Value, CultureInfo.InvariantCulture);
                                serviceResourceInstance.Id = idInstance;
                            }
                            
                            XElement typeElement = serviceResourcesElement.Element(XName.Get("Type", "http://schemas.microsoft.com/windowsazure"));
                            if (typeElement != null)
                            {
                                string typeInstance = typeElement.Value;
                                serviceResourceInstance.Type = typeInstance;
                            }
                            
                            XElement stateElement = serviceResourcesElement.Element(XName.Get("State", "http://schemas.microsoft.com/windowsazure"));
                            if (stateElement != null)
                            {
                                string stateInstance = stateElement.Value;
                                serviceResourceInstance.State = stateInstance;
                            }
                            
                            XElement editionElement = serviceResourcesElement.Element(XName.Get("Edition", "http://schemas.microsoft.com/windowsazure"));
                            if (editionElement != null)
                            {
                                string editionInstance = editionElement.Value;
                                serviceResourceInstance.Edition = editionInstance;
                            }
                            
                            XElement maxSizeGBElement = serviceResourcesElement.Element(XName.Get("MaxSizeGB", "http://schemas.microsoft.com/windowsazure"));
                            if (maxSizeGBElement != null)
                            {
                                long maxSizeGBInstance = long.Parse(maxSizeGBElement.Value, CultureInfo.InvariantCulture);
                                serviceResourceInstance.MaximumDatabaseSizeInGB = maxSizeGBInstance;
                            }
                            
                            XElement collationNameElement = serviceResourcesElement.Element(XName.Get("CollationName", "http://schemas.microsoft.com/windowsazure"));
                            if (collationNameElement != null)
                            {
                                string collationNameInstance = collationNameElement.Value;
                                serviceResourceInstance.CollationName = collationNameInstance;
                            }
                            
                            XElement creationDateElement = serviceResourcesElement.Element(XName.Get("CreationDate", "http://schemas.microsoft.com/windowsazure"));
                            if (creationDateElement != null)
                            {
                                DateTime creationDateInstance = DateTime.Parse(creationDateElement.Value, CultureInfo.InvariantCulture);
                                serviceResourceInstance.CreationDate = creationDateInstance;
                            }
                            
                            XElement isFederationRootElement = serviceResourcesElement.Element(XName.Get("IsFederationRoot", "http://schemas.microsoft.com/windowsazure"));
                            if (isFederationRootElement != null)
                            {
                                bool isFederationRootInstance = bool.Parse(isFederationRootElement.Value);
                                serviceResourceInstance.IsFederationRoot = isFederationRootInstance;
                            }
                            
                            XElement isSystemObjectElement = serviceResourcesElement.Element(XName.Get("IsSystemObject", "http://schemas.microsoft.com/windowsazure"));
                            if (isSystemObjectElement != null)
                            {
                                bool isSystemObjectInstance = bool.Parse(isSystemObjectElement.Value);
                                serviceResourceInstance.IsSystemObject = isSystemObjectInstance;
                            }
                            
                            XElement sizeMBElement = serviceResourcesElement.Element(XName.Get("SizeMB", "http://schemas.microsoft.com/windowsazure"));
                            if (sizeMBElement != null)
                            {
                                string sizeMBInstance = sizeMBElement.Value;
                                serviceResourceInstance.SizeMB = sizeMBInstance;
                            }
                            
                            XElement serviceObjectiveAssignmentErrorCodeElement = serviceResourcesElement.Element(XName.Get("ServiceObjectiveAssignmentErrorCode", "http://schemas.microsoft.com/windowsazure"));
                            if (serviceObjectiveAssignmentErrorCodeElement != null)
                            {
                                string serviceObjectiveAssignmentErrorCodeInstance = serviceObjectiveAssignmentErrorCodeElement.Value;
                                serviceResourceInstance.ServiceObjectiveAssignmentErrorCode = serviceObjectiveAssignmentErrorCodeInstance;
                            }
                            
                            XElement serviceObjectiveAssignmentErrorDescriptionElement = serviceResourcesElement.Element(XName.Get("ServiceObjectiveAssignmentErrorDescription", "http://schemas.microsoft.com/windowsazure"));
                            if (serviceObjectiveAssignmentErrorDescriptionElement != null)
                            {
                                string serviceObjectiveAssignmentErrorDescriptionInstance = serviceObjectiveAssignmentErrorDescriptionElement.Value;
                                serviceResourceInstance.ServiceObjectiveAssignmentErrorDescription = serviceObjectiveAssignmentErrorDescriptionInstance;
                            }
                            
                            XElement serviceObjectiveAssignmentStateElement = serviceResourcesElement.Element(XName.Get("ServiceObjectiveAssignmentState", "http://schemas.microsoft.com/windowsazure"));
                            if (serviceObjectiveAssignmentStateElement != null)
                            {
                                string serviceObjectiveAssignmentStateInstance = serviceObjectiveAssignmentStateElement.Value;
                                serviceResourceInstance.ServiceObjectiveAssignmentState = serviceObjectiveAssignmentStateInstance;
                            }
                            
                            XElement serviceObjectiveAssignmentStateDescriptionElement = serviceResourcesElement.Element(XName.Get("ServiceObjectiveAssignmentStateDescription", "http://schemas.microsoft.com/windowsazure"));
                            if (serviceObjectiveAssignmentStateDescriptionElement != null)
                            {
                                string serviceObjectiveAssignmentStateDescriptionInstance = serviceObjectiveAssignmentStateDescriptionElement.Value;
                                serviceResourceInstance.ServiceObjectiveAssignmentStateDescription = serviceObjectiveAssignmentStateDescriptionInstance;
                            }
                            
                            XElement serviceObjectiveAssignmentSuccessDateElement = serviceResourcesElement.Element(XName.Get("ServiceObjectiveAssignmentSuccessDate", "http://schemas.microsoft.com/windowsazure"));
                            if (serviceObjectiveAssignmentSuccessDateElement != null)
                            {
                                string serviceObjectiveAssignmentSuccessDateInstance = serviceObjectiveAssignmentSuccessDateElement.Value;
                                serviceResourceInstance.ServiceObjectiveAssignmentSuccessDate = serviceObjectiveAssignmentSuccessDateInstance;
                            }
                            
                            XElement serviceObjectiveIdElement = serviceResourcesElement.Element(XName.Get("ServiceObjectiveId", "http://schemas.microsoft.com/windowsazure"));
                            if (serviceObjectiveIdElement != null)
                            {
                                string serviceObjectiveIdInstance = serviceObjectiveIdElement.Value;
                                serviceResourceInstance.ServiceObjectiveId = serviceObjectiveIdInstance;
                            }
                        }
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The Get Database operation retrieves information about a SQL Server
        /// database.
        /// </summary>
        /// <param name='serverName'>
        /// The name of the SQL Server where the database is housed.
        /// </param>
        /// <param name='databaseName'>
        /// The name of the SQL Server database to be obtained.
        /// </param>
        /// <param name='parameters'>
        /// The parameters for the update database operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<DatabaseUpdateResponse> UpdateAsync(string serverName, string databaseName, DatabaseUpdateParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (serverName == null)
            {
                throw new ArgumentNullException("serverName");
            }
            if (databaseName == null)
            {
                throw new ArgumentNullException("databaseName");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            if (parameters.CollationName == null)
            {
                throw new ArgumentNullException("parameters.CollationName");
            }
            if (parameters.Edition == null)
            {
                throw new ArgumentNullException("parameters.Edition");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("serverName", serverName);
                tracingParameters.Add("databaseName", databaseName);
                tracingParameters.Add("parameters", parameters);
                Tracing.Enter(invocationId, this, "UpdateAsync", tracingParameters);
            }
            
            // Construct URL
            string url = this.Client.BaseUri + "/" + this.Client.Credentials.SubscriptionId + "/services/sqlservers/servers/" + serverName + "/databases/" + databaseName;
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Put;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2012-03-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                XDocument requestDoc = new XDocument();
                
                XElement serviceResourceElement = new XElement(XName.Get("ServiceResource", "http://schemas.microsoft.com/windowsazure"));
                requestDoc.Add(serviceResourceElement);
                
                if (parameters.Name != null)
                {
                    XElement nameElement = new XElement(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                    nameElement.Value = parameters.Name;
                    serviceResourceElement.Add(nameElement);
                }
                
                XElement idElement = new XElement(XName.Get("Id", "http://schemas.microsoft.com/windowsazure"));
                idElement.Value = parameters.Id.ToString();
                serviceResourceElement.Add(idElement);
                
                XElement editionElement = new XElement(XName.Get("Edition", "http://schemas.microsoft.com/windowsazure"));
                editionElement.Value = parameters.Edition;
                serviceResourceElement.Add(editionElement);
                
                XElement maxSizeGBElement = new XElement(XName.Get("MaxSizeGB", "http://schemas.microsoft.com/windowsazure"));
                maxSizeGBElement.Value = parameters.MaximumDatabaseSizeInGB.ToString();
                serviceResourceElement.Add(maxSizeGBElement);
                
                XElement collationNameElement = new XElement(XName.Get("CollationName", "http://schemas.microsoft.com/windowsazure"));
                collationNameElement.Value = parameters.CollationName;
                serviceResourceElement.Add(collationNameElement);
                
                if (parameters.ServiceObjectiveId != null)
                {
                    XElement serviceObjectiveIdElement = new XElement(XName.Get("ServiceObjectiveId", "http://schemas.microsoft.com/windowsazure"));
                    serviceObjectiveIdElement.Value = parameters.ServiceObjectiveId;
                    serviceResourceElement.Add(serviceObjectiveIdElement);
                }
                
                requestContent = requestDoc.ToString();
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = new MediaTypeHeaderValue("application/xml");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.CreateFromXml(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    DatabaseUpdateResponse result = new DatabaseUpdateResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    XDocument responseDoc = XDocument.Parse(responseContent);
                    
                    XElement serviceResourceElement2 = responseDoc.Element(XName.Get("ServiceResource", "http://schemas.microsoft.com/windowsazure"));
                    if (serviceResourceElement2 != null)
                    {
                        XElement nameElement2 = serviceResourceElement2.Element(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                        if (nameElement2 != null)
                        {
                            string nameInstance = nameElement2.Value;
                            result.Name = nameInstance;
                        }
                        
                        XElement idElement2 = serviceResourceElement2.Element(XName.Get("Id", "http://schemas.microsoft.com/windowsazure"));
                        if (idElement2 != null)
                        {
                            int idInstance = int.Parse(idElement2.Value, CultureInfo.InvariantCulture);
                            result.Id = idInstance;
                        }
                        
                        XElement typeElement = serviceResourceElement2.Element(XName.Get("Type", "http://schemas.microsoft.com/windowsazure"));
                        if (typeElement != null)
                        {
                            string typeInstance = typeElement.Value;
                            result.Type = typeInstance;
                        }
                        
                        XElement stateElement = serviceResourceElement2.Element(XName.Get("State", "http://schemas.microsoft.com/windowsazure"));
                        if (stateElement != null)
                        {
                            string stateInstance = stateElement.Value;
                            result.State = stateInstance;
                        }
                        
                        XElement editionElement2 = serviceResourceElement2.Element(XName.Get("Edition", "http://schemas.microsoft.com/windowsazure"));
                        if (editionElement2 != null)
                        {
                            string editionInstance = editionElement2.Value;
                            result.Edition = editionInstance;
                        }
                        
                        XElement maxSizeGBElement2 = serviceResourceElement2.Element(XName.Get("MaxSizeGB", "http://schemas.microsoft.com/windowsazure"));
                        if (maxSizeGBElement2 != null)
                        {
                            long maxSizeGBInstance = long.Parse(maxSizeGBElement2.Value, CultureInfo.InvariantCulture);
                            result.MaximumDatabaseSizeInGB = maxSizeGBInstance;
                        }
                        
                        XElement collationNameElement2 = serviceResourceElement2.Element(XName.Get("CollationName", "http://schemas.microsoft.com/windowsazure"));
                        if (collationNameElement2 != null)
                        {
                            string collationNameInstance = collationNameElement2.Value;
                            result.CollationName = collationNameInstance;
                        }
                        
                        XElement creationDateElement = serviceResourceElement2.Element(XName.Get("CreationDate", "http://schemas.microsoft.com/windowsazure"));
                        if (creationDateElement != null)
                        {
                            DateTime creationDateInstance = DateTime.Parse(creationDateElement.Value, CultureInfo.InvariantCulture);
                            result.CreationDate = creationDateInstance;
                        }
                        
                        XElement isFederationRootElement = serviceResourceElement2.Element(XName.Get("IsFederationRoot", "http://schemas.microsoft.com/windowsazure"));
                        if (isFederationRootElement != null)
                        {
                            bool isFederationRootInstance = bool.Parse(isFederationRootElement.Value);
                            result.IsFederationRoot = isFederationRootInstance;
                        }
                        
                        XElement isSystemObjectElement = serviceResourceElement2.Element(XName.Get("IsSystemObject", "http://schemas.microsoft.com/windowsazure"));
                        if (isSystemObjectElement != null)
                        {
                            bool isSystemObjectInstance = bool.Parse(isSystemObjectElement.Value);
                            result.IsSystemObject = isSystemObjectInstance;
                        }
                        
                        XElement sizeMBElement = serviceResourceElement2.Element(XName.Get("SizeMB", "http://schemas.microsoft.com/windowsazure"));
                        if (sizeMBElement != null)
                        {
                            string sizeMBInstance = sizeMBElement.Value;
                            result.SizeMB = sizeMBInstance;
                        }
                        
                        XElement serviceObjectiveAssignmentErrorCodeElement = serviceResourceElement2.Element(XName.Get("ServiceObjectiveAssignmentErrorCode", "http://schemas.microsoft.com/windowsazure"));
                        if (serviceObjectiveAssignmentErrorCodeElement != null)
                        {
                            string serviceObjectiveAssignmentErrorCodeInstance = serviceObjectiveAssignmentErrorCodeElement.Value;
                            result.ServiceObjectiveAssignmentErrorCode = serviceObjectiveAssignmentErrorCodeInstance;
                        }
                        
                        XElement serviceObjectiveAssignmentErrorDescriptionElement = serviceResourceElement2.Element(XName.Get("ServiceObjectiveAssignmentErrorDescription", "http://schemas.microsoft.com/windowsazure"));
                        if (serviceObjectiveAssignmentErrorDescriptionElement != null)
                        {
                            string serviceObjectiveAssignmentErrorDescriptionInstance = serviceObjectiveAssignmentErrorDescriptionElement.Value;
                            result.ServiceObjectiveAssignmentErrorDescription = serviceObjectiveAssignmentErrorDescriptionInstance;
                        }
                        
                        XElement serviceObjectiveAssignmentStateElement = serviceResourceElement2.Element(XName.Get("ServiceObjectiveAssignmentState", "http://schemas.microsoft.com/windowsazure"));
                        if (serviceObjectiveAssignmentStateElement != null)
                        {
                            string serviceObjectiveAssignmentStateInstance = serviceObjectiveAssignmentStateElement.Value;
                            result.ServiceObjectiveAssignmentState = serviceObjectiveAssignmentStateInstance;
                        }
                        
                        XElement serviceObjectiveAssignmentStateDescriptionElement = serviceResourceElement2.Element(XName.Get("ServiceObjectiveAssignmentStateDescription", "http://schemas.microsoft.com/windowsazure"));
                        if (serviceObjectiveAssignmentStateDescriptionElement != null)
                        {
                            string serviceObjectiveAssignmentStateDescriptionInstance = serviceObjectiveAssignmentStateDescriptionElement.Value;
                            result.ServiceObjectiveAssignmentStateDescription = serviceObjectiveAssignmentStateDescriptionInstance;
                        }
                        
                        XElement serviceObjectiveAssignmentSuccessDateElement = serviceResourceElement2.Element(XName.Get("ServiceObjectiveAssignmentSuccessDate", "http://schemas.microsoft.com/windowsazure"));
                        if (serviceObjectiveAssignmentSuccessDateElement != null)
                        {
                            string serviceObjectiveAssignmentSuccessDateInstance = serviceObjectiveAssignmentSuccessDateElement.Value;
                            result.ServiceObjectiveAssignmentSuccessDate = serviceObjectiveAssignmentSuccessDateInstance;
                        }
                        
                        XElement serviceObjectiveIdElement2 = serviceResourceElement2.Element(XName.Get("ServiceObjectiveId", "http://schemas.microsoft.com/windowsazure"));
                        if (serviceObjectiveIdElement2 != null)
                        {
                            string serviceObjectiveIdInstance = serviceObjectiveIdElement2.Value;
                            result.ServiceObjectiveId = serviceObjectiveIdInstance;
                        }
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
    }
    
    /// <summary>
    /// The Windows Azure SQL Database Management API includes operations for
    /// managing the server-level firewall rules for SQL Database servers.You
    /// cannot manage the database-level firewall rules using the Windows
    /// Azure SQL Database Management API; they can only be managed by running
    /// the  Transact-SQL statements against the master or individual user
    /// databases.  (see
    /// http://msdn.microsoft.com/en-us/library/windowsazure/gg715276.aspx for
    /// more information)
    /// </summary>
    public partial interface IFirewallRuleOperations
    {
        /// <summary>
        /// The Set Server Firewall Rule operation updates an existing
        /// server-level firewall rule or adds a new server-level firewall
        /// rule for a SQL Database server that belongs to a subscription.
        /// (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/gg715280.aspx
        /// for more information)
        /// </summary>
        /// <param name='serverName'>
        /// The name of the SQL database server to which this rule will be
        /// applied.
        /// </param>
        /// <param name='parameters'>
        /// Parameters for the Create Firewall Rule operation
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        Task<FirewallRuleCreateResponse> CreateAsync(string serverName, FirewallRuleCreateParameters parameters, CancellationToken cancellationToken);
        
        /// <summary>
        /// The Delete Server Firewall Rule operation deletes a server-level
        /// firewall rule from a SQL Database server that belongs to a
        /// subscription.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/gg715277.aspx
        /// for more information)
        /// </summary>
        /// <param name='serverName'>
        /// The name of the server that will be have new firewall rule applied
        /// to it
        /// </param>
        /// <param name='ruleName'>
        /// The name of the new firewall rule
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        Task<OperationResponse> DeleteAsync(string serverName, string ruleName, CancellationToken cancellationToken);
        
        /// <summary>
        /// The Get Server Firewall Rules operation retrieves a list of all the
        /// server-level firewall rules for a SQL Database server that belongs
        /// to a subscription.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/gg715278.aspx
        /// for more information)
        /// </summary>
        /// <param name='serverName'>
        /// The name of the server for which the call is being made
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        Task<FirewallRuleListResponse> ListAsync(string serverName, CancellationToken cancellationToken);
        
        /// <summary>
        /// The Set Server Firewall Rule operation updates an existing
        /// server-level firewall rule or adds a new server-level firewall
        /// rule for a SQL Database server that belongs to a subscription.
        /// (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/gg715280.aspx
        /// for more information)
        /// </summary>
        /// <param name='serverName'>
        /// The name of the SQL database server to which this rule will be
        /// applied.
        /// </param>
        /// <param name='ruleName'>
        /// The name of the firewall rule to be updated.
        /// </param>
        /// <param name='parameters'>
        /// Parameters for the Update Firewall Rule operation
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        Task<FirewallRuleUpdateResponse> UpdateAsync(string serverName, string ruleName, FirewallRuleUpdateParameters parameters, CancellationToken cancellationToken);
    }
    
    /// <summary>
    /// The Windows Azure SQL Database Management API includes operations for
    /// managing the server-level firewall rules for SQL Database servers.You
    /// cannot manage the database-level firewall rules using the Windows
    /// Azure SQL Database Management API; they can only be managed by running
    /// the  Transact-SQL statements against the master or individual user
    /// databases.  (see
    /// http://msdn.microsoft.com/en-us/library/windowsazure/gg715276.aspx for
    /// more information)
    /// </summary>
    public static partial class FirewallRuleOperationsExtensions
    {
        /// <summary>
        /// The Set Server Firewall Rule operation updates an existing
        /// server-level firewall rule or adds a new server-level firewall
        /// rule for a SQL Database server that belongs to a subscription.
        /// (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/gg715280.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Sql.IFirewallRuleOperations.
        /// </param>
        /// <param name='serverName'>
        /// The name of the SQL database server to which this rule will be
        /// applied.
        /// </param>
        /// <param name='parameters'>
        /// Parameters for the Create Firewall Rule operation
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static FirewallRuleCreateResponse Create(this IFirewallRuleOperations operations, string serverName, FirewallRuleCreateParameters parameters)
        {
            try
            {
                return operations.CreateAsync(serverName, parameters).Result;
            }
            catch (AggregateException ex)
            {
                if (ex.InnerExceptions.Count > 1)
                {
                    throw;
                }
                else
                {
                    throw ex.InnerException;
                }
            }
        }
        
        /// <summary>
        /// The Set Server Firewall Rule operation updates an existing
        /// server-level firewall rule or adds a new server-level firewall
        /// rule for a SQL Database server that belongs to a subscription.
        /// (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/gg715280.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Sql.IFirewallRuleOperations.
        /// </param>
        /// <param name='serverName'>
        /// The name of the SQL database server to which this rule will be
        /// applied.
        /// </param>
        /// <param name='parameters'>
        /// Parameters for the Create Firewall Rule operation
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<FirewallRuleCreateResponse> CreateAsync(this IFirewallRuleOperations operations, string serverName, FirewallRuleCreateParameters parameters)
        {
            return operations.CreateAsync(serverName, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// The Delete Server Firewall Rule operation deletes a server-level
        /// firewall rule from a SQL Database server that belongs to a
        /// subscription.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/gg715277.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Sql.IFirewallRuleOperations.
        /// </param>
        /// <param name='serverName'>
        /// The name of the server that will be have new firewall rule applied
        /// to it
        /// </param>
        /// <param name='ruleName'>
        /// The name of the new firewall rule
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static OperationResponse Delete(this IFirewallRuleOperations operations, string serverName, string ruleName)
        {
            try
            {
                return operations.DeleteAsync(serverName, ruleName).Result;
            }
            catch (AggregateException ex)
            {
                if (ex.InnerExceptions.Count > 1)
                {
                    throw;
                }
                else
                {
                    throw ex.InnerException;
                }
            }
        }
        
        /// <summary>
        /// The Delete Server Firewall Rule operation deletes a server-level
        /// firewall rule from a SQL Database server that belongs to a
        /// subscription.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/gg715277.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Sql.IFirewallRuleOperations.
        /// </param>
        /// <param name='serverName'>
        /// The name of the server that will be have new firewall rule applied
        /// to it
        /// </param>
        /// <param name='ruleName'>
        /// The name of the new firewall rule
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<OperationResponse> DeleteAsync(this IFirewallRuleOperations operations, string serverName, string ruleName)
        {
            return operations.DeleteAsync(serverName, ruleName, CancellationToken.None);
        }
        
        /// <summary>
        /// The Get Server Firewall Rules operation retrieves a list of all the
        /// server-level firewall rules for a SQL Database server that belongs
        /// to a subscription.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/gg715278.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Sql.IFirewallRuleOperations.
        /// </param>
        /// <param name='serverName'>
        /// The name of the server for which the call is being made
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static FirewallRuleListResponse List(this IFirewallRuleOperations operations, string serverName)
        {
            try
            {
                return operations.ListAsync(serverName).Result;
            }
            catch (AggregateException ex)
            {
                if (ex.InnerExceptions.Count > 1)
                {
                    throw;
                }
                else
                {
                    throw ex.InnerException;
                }
            }
        }
        
        /// <summary>
        /// The Get Server Firewall Rules operation retrieves a list of all the
        /// server-level firewall rules for a SQL Database server that belongs
        /// to a subscription.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/gg715278.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Sql.IFirewallRuleOperations.
        /// </param>
        /// <param name='serverName'>
        /// The name of the server for which the call is being made
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<FirewallRuleListResponse> ListAsync(this IFirewallRuleOperations operations, string serverName)
        {
            return operations.ListAsync(serverName, CancellationToken.None);
        }
        
        /// <summary>
        /// The Set Server Firewall Rule operation updates an existing
        /// server-level firewall rule or adds a new server-level firewall
        /// rule for a SQL Database server that belongs to a subscription.
        /// (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/gg715280.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Sql.IFirewallRuleOperations.
        /// </param>
        /// <param name='serverName'>
        /// The name of the SQL database server to which this rule will be
        /// applied.
        /// </param>
        /// <param name='ruleName'>
        /// The name of the firewall rule to be updated.
        /// </param>
        /// <param name='parameters'>
        /// Parameters for the Update Firewall Rule operation
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static FirewallRuleUpdateResponse Update(this IFirewallRuleOperations operations, string serverName, string ruleName, FirewallRuleUpdateParameters parameters)
        {
            try
            {
                return operations.UpdateAsync(serverName, ruleName, parameters).Result;
            }
            catch (AggregateException ex)
            {
                if (ex.InnerExceptions.Count > 1)
                {
                    throw;
                }
                else
                {
                    throw ex.InnerException;
                }
            }
        }
        
        /// <summary>
        /// The Set Server Firewall Rule operation updates an existing
        /// server-level firewall rule or adds a new server-level firewall
        /// rule for a SQL Database server that belongs to a subscription.
        /// (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/gg715280.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Sql.IFirewallRuleOperations.
        /// </param>
        /// <param name='serverName'>
        /// The name of the SQL database server to which this rule will be
        /// applied.
        /// </param>
        /// <param name='ruleName'>
        /// The name of the firewall rule to be updated.
        /// </param>
        /// <param name='parameters'>
        /// Parameters for the Update Firewall Rule operation
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<FirewallRuleUpdateResponse> UpdateAsync(this IFirewallRuleOperations operations, string serverName, string ruleName, FirewallRuleUpdateParameters parameters)
        {
            return operations.UpdateAsync(serverName, ruleName, parameters, CancellationToken.None);
        }
    }
    
    /// <summary>
    /// The Windows Azure SQL Database Management API includes operations for
    /// managing the server-level firewall rules for SQL Database servers.You
    /// cannot manage the database-level firewall rules using the Windows
    /// Azure SQL Database Management API; they can only be managed by running
    /// the  Transact-SQL statements against the master or individual user
    /// databases.  (see
    /// http://msdn.microsoft.com/en-us/library/windowsazure/gg715276.aspx for
    /// more information)
    /// </summary>
    internal partial class FirewallRuleOperations : IServiceOperations<SqlManagementClient>, IFirewallRuleOperations
    {
        /// <summary>
        /// Initializes a new instance of the FirewallRuleOperations class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        internal FirewallRuleOperations(SqlManagementClient client)
        {
            this._client = client;
        }
        
        private SqlManagementClient _client;
        
        /// <summary>
        /// Gets a reference to the
        /// Microsoft.WindowsAzure.Management.Sql.SqlManagementClient.
        /// </summary>
        public SqlManagementClient Client
        {
            get { return this._client; }
        }
        
        /// <summary>
        /// The Set Server Firewall Rule operation updates an existing
        /// server-level firewall rule or adds a new server-level firewall
        /// rule for a SQL Database server that belongs to a subscription.
        /// (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/gg715280.aspx
        /// for more information)
        /// </summary>
        /// <param name='serverName'>
        /// The name of the SQL database server to which this rule will be
        /// applied.
        /// </param>
        /// <param name='parameters'>
        /// Parameters for the Create Firewall Rule operation
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<FirewallRuleCreateResponse> CreateAsync(string serverName, FirewallRuleCreateParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (serverName == null)
            {
                throw new ArgumentNullException("serverName");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            if (parameters.EndIPAddress == null)
            {
                throw new ArgumentNullException("parameters.EndIPAddress");
            }
            if (parameters.Name == null)
            {
                throw new ArgumentNullException("parameters.Name");
            }
            if (parameters.StartIPAddress == null)
            {
                throw new ArgumentNullException("parameters.StartIPAddress");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("serverName", serverName);
                tracingParameters.Add("parameters", parameters);
                Tracing.Enter(invocationId, this, "CreateAsync", tracingParameters);
            }
            
            // Construct URL
            string url = this.Client.BaseUri + "/" + this.Client.Credentials.SubscriptionId + "/services/sqlservers/servers/" + serverName + "/firewallrules";
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2012-03-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                XDocument requestDoc = new XDocument();
                
                XElement serviceResourceElement = new XElement(XName.Get("ServiceResource", "http://schemas.microsoft.com/windowsazure"));
                requestDoc.Add(serviceResourceElement);
                
                XElement nameElement = new XElement(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                nameElement.Value = parameters.Name;
                serviceResourceElement.Add(nameElement);
                
                XElement startIPAddressElement = new XElement(XName.Get("StartIPAddress", "http://schemas.microsoft.com/windowsazure"));
                startIPAddressElement.Value = parameters.StartIPAddress;
                serviceResourceElement.Add(startIPAddressElement);
                
                XElement endIPAddressElement = new XElement(XName.Get("EndIPAddress", "http://schemas.microsoft.com/windowsazure"));
                endIPAddressElement.Value = parameters.EndIPAddress;
                serviceResourceElement.Add(endIPAddressElement);
                
                requestContent = requestDoc.ToString();
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = new MediaTypeHeaderValue("application/xml");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.Created)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.CreateFromXml(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    FirewallRuleCreateResponse result = new FirewallRuleCreateResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    XDocument responseDoc = XDocument.Parse(responseContent);
                    
                    XElement serviceResourceElement2 = responseDoc.Element(XName.Get("ServiceResource", "http://schemas.microsoft.com/windowsazure"));
                    if (serviceResourceElement2 != null)
                    {
                        XElement nameElement2 = serviceResourceElement2.Element(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                        if (nameElement2 != null)
                        {
                            string nameInstance = nameElement2.Value;
                            result.Name = nameInstance;
                        }
                        
                        XElement typeElement = serviceResourceElement2.Element(XName.Get("Type", "http://schemas.microsoft.com/windowsazure"));
                        if (typeElement != null)
                        {
                            string typeInstance = typeElement.Value;
                            result.Type = typeInstance;
                        }
                        
                        XElement stateElement = serviceResourceElement2.Element(XName.Get("State", "http://schemas.microsoft.com/windowsazure"));
                        if (stateElement != null)
                        {
                            string stateInstance = stateElement.Value;
                            result.State = stateInstance;
                        }
                        
                        XElement startIPAddressElement2 = serviceResourceElement2.Element(XName.Get("StartIPAddress", "http://schemas.microsoft.com/windowsazure"));
                        if (startIPAddressElement2 != null)
                        {
                            string startIPAddressInstance = startIPAddressElement2.Value;
                            result.StartIPAddress = startIPAddressInstance;
                        }
                        
                        XElement endIPAddressElement2 = serviceResourceElement2.Element(XName.Get("EndIPAddress", "http://schemas.microsoft.com/windowsazure"));
                        if (endIPAddressElement2 != null)
                        {
                            string endIPAddressInstance = endIPAddressElement2.Value;
                            result.EndIPAddress = endIPAddressInstance;
                        }
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The Delete Server Firewall Rule operation deletes a server-level
        /// firewall rule from a SQL Database server that belongs to a
        /// subscription.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/gg715277.aspx
        /// for more information)
        /// </summary>
        /// <param name='serverName'>
        /// The name of the server that will be have new firewall rule applied
        /// to it
        /// </param>
        /// <param name='ruleName'>
        /// The name of the new firewall rule
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<OperationResponse> DeleteAsync(string serverName, string ruleName, CancellationToken cancellationToken)
        {
            // Validate
            if (serverName == null)
            {
                throw new ArgumentNullException("serverName");
            }
            if (ruleName == null)
            {
                throw new ArgumentNullException("ruleName");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("serverName", serverName);
                tracingParameters.Add("ruleName", ruleName);
                Tracing.Enter(invocationId, this, "DeleteAsync", tracingParameters);
            }
            
            // Construct URL
            string url = this.Client.BaseUri + "/" + this.Client.Credentials.SubscriptionId + "/services/sqlservers/servers/" + serverName + "/firewallrules/" + ruleName;
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Delete;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2012-03-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.CreateFromXml(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    OperationResponse result = new OperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The Get Server Firewall Rules operation retrieves a list of all the
        /// server-level firewall rules for a SQL Database server that belongs
        /// to a subscription.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/gg715278.aspx
        /// for more information)
        /// </summary>
        /// <param name='serverName'>
        /// The name of the server for which the call is being made
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<FirewallRuleListResponse> ListAsync(string serverName, CancellationToken cancellationToken)
        {
            // Validate
            if (serverName == null)
            {
                throw new ArgumentNullException("serverName");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("serverName", serverName);
                Tracing.Enter(invocationId, this, "ListAsync", tracingParameters);
            }
            
            // Construct URL
            string url = this.Client.BaseUri + "/" + this.Client.Credentials.SubscriptionId + "/services/sqlservers/servers/" + serverName + "/firewallrules";
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2012-03-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.CreateFromXml(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    FirewallRuleListResponse result = new FirewallRuleListResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    XDocument responseDoc = XDocument.Parse(responseContent);
                    
                    XElement serviceResourcesSequenceElement = responseDoc.Element(XName.Get("ServiceResources", "http://schemas.microsoft.com/windowsazure"));
                    if (serviceResourcesSequenceElement != null)
                    {
                        foreach (XElement serviceResourcesElement in serviceResourcesSequenceElement.Elements(XName.Get("ServiceResource", "http://schemas.microsoft.com/windowsazure")))
                        {
                            FirewallRuleListResponse.FirewallRule serviceResourceInstance = new FirewallRuleListResponse.FirewallRule();
                            result.FirewallRules.Add(serviceResourceInstance);
                            
                            XElement nameElement = serviceResourcesElement.Element(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                            if (nameElement != null)
                            {
                                string nameInstance = nameElement.Value;
                                serviceResourceInstance.Name = nameInstance;
                            }
                            
                            XElement typeElement = serviceResourcesElement.Element(XName.Get("Type", "http://schemas.microsoft.com/windowsazure"));
                            if (typeElement != null)
                            {
                                string typeInstance = typeElement.Value;
                                serviceResourceInstance.Type = typeInstance;
                            }
                            
                            XElement startIPAddressElement = serviceResourcesElement.Element(XName.Get("StartIPAddress", "http://schemas.microsoft.com/windowsazure"));
                            if (startIPAddressElement != null)
                            {
                                string startIPAddressInstance = startIPAddressElement.Value;
                                serviceResourceInstance.StartIPAddress = startIPAddressInstance;
                            }
                            
                            XElement endIPAddressElement = serviceResourcesElement.Element(XName.Get("EndIPAddress", "http://schemas.microsoft.com/windowsazure"));
                            if (endIPAddressElement != null)
                            {
                                string endIPAddressInstance = endIPAddressElement.Value;
                                serviceResourceInstance.EndIPAddress = endIPAddressInstance;
                            }
                        }
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The Set Server Firewall Rule operation updates an existing
        /// server-level firewall rule or adds a new server-level firewall
        /// rule for a SQL Database server that belongs to a subscription.
        /// (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/gg715280.aspx
        /// for more information)
        /// </summary>
        /// <param name='serverName'>
        /// The name of the SQL database server to which this rule will be
        /// applied.
        /// </param>
        /// <param name='ruleName'>
        /// The name of the firewall rule to be updated.
        /// </param>
        /// <param name='parameters'>
        /// Parameters for the Update Firewall Rule operation
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<FirewallRuleUpdateResponse> UpdateAsync(string serverName, string ruleName, FirewallRuleUpdateParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (serverName == null)
            {
                throw new ArgumentNullException("serverName");
            }
            if (ruleName == null)
            {
                throw new ArgumentNullException("ruleName");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            if (parameters.EndIPAddress == null)
            {
                throw new ArgumentNullException("parameters.EndIPAddress");
            }
            if (parameters.Name == null)
            {
                throw new ArgumentNullException("parameters.Name");
            }
            if (parameters.StartIPAddress == null)
            {
                throw new ArgumentNullException("parameters.StartIPAddress");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("serverName", serverName);
                tracingParameters.Add("ruleName", ruleName);
                tracingParameters.Add("parameters", parameters);
                Tracing.Enter(invocationId, this, "UpdateAsync", tracingParameters);
            }
            
            // Construct URL
            string url = this.Client.BaseUri + "/" + this.Client.Credentials.SubscriptionId + "/services/sqlservers/servers/" + serverName + "/firewallrules/" + ruleName;
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Put;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2012-03-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                XDocument requestDoc = new XDocument();
                
                XElement serviceResourceElement = new XElement(XName.Get("ServiceResource", "http://schemas.microsoft.com/windowsazure"));
                requestDoc.Add(serviceResourceElement);
                
                XElement nameElement = new XElement(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                nameElement.Value = parameters.Name;
                serviceResourceElement.Add(nameElement);
                
                XElement startIPAddressElement = new XElement(XName.Get("StartIPAddress", "http://schemas.microsoft.com/windowsazure"));
                startIPAddressElement.Value = parameters.StartIPAddress;
                serviceResourceElement.Add(startIPAddressElement);
                
                XElement endIPAddressElement = new XElement(XName.Get("EndIPAddress", "http://schemas.microsoft.com/windowsazure"));
                endIPAddressElement.Value = parameters.EndIPAddress;
                serviceResourceElement.Add(endIPAddressElement);
                
                requestContent = requestDoc.ToString();
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = new MediaTypeHeaderValue("application/xml");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.CreateFromXml(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    FirewallRuleUpdateResponse result = new FirewallRuleUpdateResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    XDocument responseDoc = XDocument.Parse(responseContent);
                    
                    XElement serviceResourceElement2 = responseDoc.Element(XName.Get("ServiceResource", "http://schemas.microsoft.com/windowsazure"));
                    if (serviceResourceElement2 != null)
                    {
                        XElement nameElement2 = serviceResourceElement2.Element(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                        if (nameElement2 != null)
                        {
                            string nameInstance = nameElement2.Value;
                            result.Name = nameInstance;
                        }
                        
                        XElement typeElement = serviceResourceElement2.Element(XName.Get("Type", "http://schemas.microsoft.com/windowsazure"));
                        if (typeElement != null)
                        {
                            string typeInstance = typeElement.Value;
                            result.Type = typeInstance;
                        }
                        
                        XElement stateElement = serviceResourceElement2.Element(XName.Get("State", "http://schemas.microsoft.com/windowsazure"));
                        if (stateElement != null)
                        {
                            string stateInstance = stateElement.Value;
                            result.State = stateInstance;
                        }
                        
                        XElement startIPAddressElement2 = serviceResourceElement2.Element(XName.Get("StartIPAddress", "http://schemas.microsoft.com/windowsazure"));
                        if (startIPAddressElement2 != null)
                        {
                            string startIPAddressInstance = startIPAddressElement2.Value;
                            result.StartIPAddress = startIPAddressInstance;
                        }
                        
                        XElement endIPAddressElement2 = serviceResourceElement2.Element(XName.Get("EndIPAddress", "http://schemas.microsoft.com/windowsazure"));
                        if (endIPAddressElement2 != null)
                        {
                            string endIPAddressInstance = endIPAddressElement2.Value;
                            result.EndIPAddress = endIPAddressInstance;
                        }
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
    }
    
    /// <summary>
    /// The SQL Database Management API includes operations for managing SQL
    /// Database servers for a subscription.  (see
    /// http://msdn.microsoft.com/en-us/library/windowsazure/gg715271.aspx for
    /// more information)
    /// </summary>
    public partial interface IServerOperations
    {
        /// <summary>
        /// The Set Server Administrator Password operation sets the
        /// administrative password of a SQL Database server for a
        /// subscription.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/gg715272.aspx
        /// for more information)
        /// </summary>
        /// <param name='serverName'>
        /// The server that will have the change made to the administrative user
        /// </param>
        /// <param name='parameters'>
        /// Parameters for the Manage Administrator Password operation
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        Task<OperationResponse> ChangeAdministratorPasswordAsync(string serverName, ServerChangeAdministratorPasswordParameters parameters, CancellationToken cancellationToken);
        
        /// <summary>
        /// The Create Server operation adds a new SQL Database server to a
        /// subscription.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/gg715274.aspx
        /// for more information)
        /// </summary>
        /// <param name='parameters'>
        /// Parameters supplied to the Create Server operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response returned from the Create Server operation
        /// </returns>
        Task<ServerCreateResponse> CreateAsync(ServerCreateParameters parameters, CancellationToken cancellationToken);
        
        /// <summary>
        /// The Drop Server operation drops a SQL Database server from a
        /// subscription.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/gg715285.aspx
        /// for more information)
        /// </summary>
        /// <param name='serverName'>
        /// The name of the server to be deleted
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        Task<OperationResponse> DeleteAsync(string serverName, CancellationToken cancellationToken);
        
        /// <summary>
        /// The Get Servers operation enumerates SQL Database servers that are
        /// provisioned for a subscription.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/gg715269.aspx
        /// for more information)
        /// </summary>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response structure for the Server List operation
        /// </returns>
        Task<ServerListResponse> ListAsync(CancellationToken cancellationToken);
    }
    
    /// <summary>
    /// The SQL Database Management API includes operations for managing SQL
    /// Database servers for a subscription.  (see
    /// http://msdn.microsoft.com/en-us/library/windowsazure/gg715271.aspx for
    /// more information)
    /// </summary>
    public static partial class ServerOperationsExtensions
    {
        /// <summary>
        /// The Set Server Administrator Password operation sets the
        /// administrative password of a SQL Database server for a
        /// subscription.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/gg715272.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Sql.IServerOperations.
        /// </param>
        /// <param name='serverName'>
        /// The server that will have the change made to the administrative user
        /// </param>
        /// <param name='parameters'>
        /// Parameters for the Manage Administrator Password operation
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static OperationResponse ChangeAdministratorPassword(this IServerOperations operations, string serverName, ServerChangeAdministratorPasswordParameters parameters)
        {
            try
            {
                return operations.ChangeAdministratorPasswordAsync(serverName, parameters).Result;
            }
            catch (AggregateException ex)
            {
                if (ex.InnerExceptions.Count > 1)
                {
                    throw;
                }
                else
                {
                    throw ex.InnerException;
                }
            }
        }
        
        /// <summary>
        /// The Set Server Administrator Password operation sets the
        /// administrative password of a SQL Database server for a
        /// subscription.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/gg715272.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Sql.IServerOperations.
        /// </param>
        /// <param name='serverName'>
        /// The server that will have the change made to the administrative user
        /// </param>
        /// <param name='parameters'>
        /// Parameters for the Manage Administrator Password operation
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<OperationResponse> ChangeAdministratorPasswordAsync(this IServerOperations operations, string serverName, ServerChangeAdministratorPasswordParameters parameters)
        {
            return operations.ChangeAdministratorPasswordAsync(serverName, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// The Create Server operation adds a new SQL Database server to a
        /// subscription.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/gg715274.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Sql.IServerOperations.
        /// </param>
        /// <param name='parameters'>
        /// Parameters supplied to the Create Server operation.
        /// </param>
        /// <returns>
        /// The response returned from the Create Server operation
        /// </returns>
        public static ServerCreateResponse Create(this IServerOperations operations, ServerCreateParameters parameters)
        {
            try
            {
                return operations.CreateAsync(parameters).Result;
            }
            catch (AggregateException ex)
            {
                if (ex.InnerExceptions.Count > 1)
                {
                    throw;
                }
                else
                {
                    throw ex.InnerException;
                }
            }
        }
        
        /// <summary>
        /// The Create Server operation adds a new SQL Database server to a
        /// subscription.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/gg715274.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Sql.IServerOperations.
        /// </param>
        /// <param name='parameters'>
        /// Parameters supplied to the Create Server operation.
        /// </param>
        /// <returns>
        /// The response returned from the Create Server operation
        /// </returns>
        public static Task<ServerCreateResponse> CreateAsync(this IServerOperations operations, ServerCreateParameters parameters)
        {
            return operations.CreateAsync(parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// The Drop Server operation drops a SQL Database server from a
        /// subscription.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/gg715285.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Sql.IServerOperations.
        /// </param>
        /// <param name='serverName'>
        /// The name of the server to be deleted
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static OperationResponse Delete(this IServerOperations operations, string serverName)
        {
            try
            {
                return operations.DeleteAsync(serverName).Result;
            }
            catch (AggregateException ex)
            {
                if (ex.InnerExceptions.Count > 1)
                {
                    throw;
                }
                else
                {
                    throw ex.InnerException;
                }
            }
        }
        
        /// <summary>
        /// The Drop Server operation drops a SQL Database server from a
        /// subscription.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/gg715285.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Sql.IServerOperations.
        /// </param>
        /// <param name='serverName'>
        /// The name of the server to be deleted
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<OperationResponse> DeleteAsync(this IServerOperations operations, string serverName)
        {
            return operations.DeleteAsync(serverName, CancellationToken.None);
        }
        
        /// <summary>
        /// The Get Servers operation enumerates SQL Database servers that are
        /// provisioned for a subscription.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/gg715269.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Sql.IServerOperations.
        /// </param>
        /// <returns>
        /// The response structure for the Server List operation
        /// </returns>
        public static ServerListResponse List(this IServerOperations operations)
        {
            try
            {
                return operations.ListAsync().Result;
            }
            catch (AggregateException ex)
            {
                if (ex.InnerExceptions.Count > 1)
                {
                    throw;
                }
                else
                {
                    throw ex.InnerException;
                }
            }
        }
        
        /// <summary>
        /// The Get Servers operation enumerates SQL Database servers that are
        /// provisioned for a subscription.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/gg715269.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Sql.IServerOperations.
        /// </param>
        /// <returns>
        /// The response structure for the Server List operation
        /// </returns>
        public static Task<ServerListResponse> ListAsync(this IServerOperations operations)
        {
            return operations.ListAsync(CancellationToken.None);
        }
    }
    
    /// <summary>
    /// The SQL Database Management API includes operations for managing SQL
    /// Database servers for a subscription.  (see
    /// http://msdn.microsoft.com/en-us/library/windowsazure/gg715271.aspx for
    /// more information)
    /// </summary>
    internal partial class ServerOperations : IServiceOperations<SqlManagementClient>, IServerOperations
    {
        /// <summary>
        /// Initializes a new instance of the ServerOperations class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        internal ServerOperations(SqlManagementClient client)
        {
            this._client = client;
        }
        
        private SqlManagementClient _client;
        
        /// <summary>
        /// Gets a reference to the
        /// Microsoft.WindowsAzure.Management.Sql.SqlManagementClient.
        /// </summary>
        public SqlManagementClient Client
        {
            get { return this._client; }
        }
        
        /// <summary>
        /// The Set Server Administrator Password operation sets the
        /// administrative password of a SQL Database server for a
        /// subscription.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/gg715272.aspx
        /// for more information)
        /// </summary>
        /// <param name='serverName'>
        /// The server that will have the change made to the administrative user
        /// </param>
        /// <param name='parameters'>
        /// Parameters for the Manage Administrator Password operation
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<OperationResponse> ChangeAdministratorPasswordAsync(string serverName, ServerChangeAdministratorPasswordParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (serverName == null)
            {
                throw new ArgumentNullException("serverName");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            if (parameters.NewPassword == null)
            {
                throw new ArgumentNullException("parameters.NewPassword");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("serverName", serverName);
                tracingParameters.Add("parameters", parameters);
                Tracing.Enter(invocationId, this, "ChangeAdministratorPasswordAsync", tracingParameters);
            }
            
            // Construct URL
            string url = this.Client.BaseUri + "/" + this.Client.Credentials.SubscriptionId + "/services/sqlservers/servers/" + serverName + "?op=ResetPassword";
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2012-03-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                XDocument requestDoc = new XDocument();
                
                XElement administratorLoginPasswordElement = new XElement(XName.Get("AdministratorLoginPassword", "http://schemas.microsoft.com/sqlazure/2010/12/"));
                requestDoc.Add(administratorLoginPasswordElement);
                
                administratorLoginPasswordElement.Value = parameters.NewPassword;
                
                requestContent = requestDoc.ToString();
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = new MediaTypeHeaderValue("application/xml");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.CreateFromXml(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    OperationResponse result = new OperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The Create Server operation adds a new SQL Database server to a
        /// subscription.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/gg715274.aspx
        /// for more information)
        /// </summary>
        /// <param name='parameters'>
        /// Parameters supplied to the Create Server operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response returned from the Create Server operation
        /// </returns>
        public async Task<ServerCreateResponse> CreateAsync(ServerCreateParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            if (parameters.AdministratorPassword == null)
            {
                throw new ArgumentNullException("parameters.AdministratorPassword");
            }
            if (parameters.AdministratorUserName == null)
            {
                throw new ArgumentNullException("parameters.AdministratorUserName");
            }
            if (parameters.Location == null)
            {
                throw new ArgumentNullException("parameters.Location");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("parameters", parameters);
                Tracing.Enter(invocationId, this, "CreateAsync", tracingParameters);
            }
            
            // Construct URL
            string url = this.Client.BaseUri + "/" + this.Client.Credentials.SubscriptionId + "/services/sqlservers/servers";
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2012-03-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                XDocument requestDoc = new XDocument();
                
                XElement serverElement = new XElement(XName.Get("Server", "http://schemas.microsoft.com/sqlazure/2010/12/"));
                requestDoc.Add(serverElement);
                
                XElement administratorLoginElement = new XElement(XName.Get("AdministratorLogin", "http://schemas.microsoft.com/sqlazure/2010/12/"));
                administratorLoginElement.Value = parameters.AdministratorUserName;
                serverElement.Add(administratorLoginElement);
                
                XElement administratorLoginPasswordElement = new XElement(XName.Get("AdministratorLoginPassword", "http://schemas.microsoft.com/sqlazure/2010/12/"));
                administratorLoginPasswordElement.Value = parameters.AdministratorPassword;
                serverElement.Add(administratorLoginPasswordElement);
                
                XElement locationElement = new XElement(XName.Get("Location", "http://schemas.microsoft.com/sqlazure/2010/12/"));
                locationElement.Value = parameters.Location;
                serverElement.Add(locationElement);
                
                requestContent = requestDoc.ToString();
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = new MediaTypeHeaderValue("application/xml");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.Created)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.CreateFromXml(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    ServerCreateResponse result = new ServerCreateResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    XDocument responseDoc = XDocument.Parse(responseContent);
                    
                    XElement serverNameElement = responseDoc.Element(XName.Get("ServerName", "http://schemas.microsoft.com/sqlazure/2010/12/"));
                    if (serverNameElement != null)
                    {
                        result.ServerName = serverNameElement.Value;
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The Drop Server operation drops a SQL Database server from a
        /// subscription.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/gg715285.aspx
        /// for more information)
        /// </summary>
        /// <param name='serverName'>
        /// The name of the server to be deleted
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<OperationResponse> DeleteAsync(string serverName, CancellationToken cancellationToken)
        {
            // Validate
            if (serverName == null)
            {
                throw new ArgumentNullException("serverName");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("serverName", serverName);
                Tracing.Enter(invocationId, this, "DeleteAsync", tracingParameters);
            }
            
            // Construct URL
            string url = this.Client.BaseUri + "/" + this.Client.Credentials.SubscriptionId + "/services/sqlservers/servers/" + serverName;
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Delete;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2012-03-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.CreateFromXml(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    OperationResponse result = new OperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The Get Servers operation enumerates SQL Database servers that are
        /// provisioned for a subscription.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/gg715269.aspx
        /// for more information)
        /// </summary>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response structure for the Server List operation
        /// </returns>
        public async Task<ServerListResponse> ListAsync(CancellationToken cancellationToken)
        {
            // Validate
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                Tracing.Enter(invocationId, this, "ListAsync", tracingParameters);
            }
            
            // Construct URL
            string url = this.Client.BaseUri + "/" + this.Client.Credentials.SubscriptionId + "/services/sqlservers/servers";
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2012-03-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.CreateFromXml(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    ServerListResponse result = new ServerListResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    XDocument responseDoc = XDocument.Parse(responseContent);
                    
                    XElement serversSequenceElement = responseDoc.Element(XName.Get("Servers", "http://schemas.microsoft.com/sqlazure/2010/12/"));
                    if (serversSequenceElement != null)
                    {
                        foreach (XElement serversElement in serversSequenceElement.Elements(XName.Get("Server", "http://schemas.microsoft.com/sqlazure/2010/12/")))
                        {
                            ServerListResponse.Server serverInstance = new ServerListResponse.Server();
                            result.Servers.Add(serverInstance);
                            
                            XElement nameElement = serversElement.Element(XName.Get("Name", "http://schemas.microsoft.com/sqlazure/2010/12/"));
                            if (nameElement != null)
                            {
                                string nameInstance = nameElement.Value;
                                serverInstance.Name = nameInstance;
                            }
                            
                            XElement administratorLoginElement = serversElement.Element(XName.Get("AdministratorLogin", "http://schemas.microsoft.com/sqlazure/2010/12/"));
                            if (administratorLoginElement != null)
                            {
                                string administratorLoginInstance = administratorLoginElement.Value;
                                serverInstance.AdministratorUserName = administratorLoginInstance;
                            }
                            
                            XElement locationElement = serversElement.Element(XName.Get("Location", "http://schemas.microsoft.com/sqlazure/2010/12/"));
                            if (locationElement != null)
                            {
                                string locationInstance = locationElement.Value;
                                serverInstance.Location = locationInstance;
                            }
                            
                            XElement featuresSequenceElement = serversElement.Element(XName.Get("Features", "http://schemas.microsoft.com/sqlazure/2010/12/"));
                            if (featuresSequenceElement != null)
                            {
                                foreach (XElement featuresElement in featuresSequenceElement.Elements(XName.Get("Feature", "http://schemas.microsoft.com/sqlazure/2010/12/")))
                                {
                                    string featuresKey = featuresElement.Element(XName.Get("Name", "http://schemas.microsoft.com/sqlazure/2010/12/")).Value;
                                    string featuresValue = featuresElement.Element(XName.Get("Value", "http://schemas.microsoft.com/sqlazure/2010/12/")).Value;
                                    serverInstance.Features.Add(featuresKey, featuresValue);
                                }
                            }
                        }
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
    }
    
    /// <summary>
    /// The SQL Database Management API includes operations for getting Service
    /// Objective for a subscription.
    /// </summary>
    public partial interface IServiceObjectiveOperations
    {
        /// <summary>
        /// The Get Service Objective operation retrieves information about a
        /// certain Service Objective on a given Id.
        /// </summary>
        /// <param name='serverName'>
        /// The name of the SQL Server to be queried.
        /// </param>
        /// <param name='serviceObjectiveId'>
        /// The Id of the Service Objective to be obtained.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Response containing the service objective for a given server and
        /// service objective Id.
        /// </returns>
        Task<ServiceObjectiveGetResponse> GetAsync(string serverName, string serviceObjectiveId, CancellationToken cancellationToken);
        
        /// <param name='serverName'>
        /// The name of the database server to be queried.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Response containing the list of service objective for a given
        /// server.
        /// </returns>
        Task<ServiceObjectiveListResponse> ListAsync(string serverName, CancellationToken cancellationToken);
    }
    
    /// <summary>
    /// The SQL Database Management API includes operations for getting Service
    /// Objective for a subscription.
    /// </summary>
    public static partial class ServiceObjectiveOperationsExtensions
    {
        /// <summary>
        /// The Get Service Objective operation retrieves information about a
        /// certain Service Objective on a given Id.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Sql.IServiceObjectiveOperations.
        /// </param>
        /// <param name='serverName'>
        /// The name of the SQL Server to be queried.
        /// </param>
        /// <param name='serviceObjectiveId'>
        /// The Id of the Service Objective to be obtained.
        /// </param>
        /// <returns>
        /// Response containing the service objective for a given server and
        /// service objective Id.
        /// </returns>
        public static ServiceObjectiveGetResponse Get(this IServiceObjectiveOperations operations, string serverName, string serviceObjectiveId)
        {
            try
            {
                return operations.GetAsync(serverName, serviceObjectiveId).Result;
            }
            catch (AggregateException ex)
            {
                if (ex.InnerExceptions.Count > 1)
                {
                    throw;
                }
                else
                {
                    throw ex.InnerException;
                }
            }
        }
        
        /// <summary>
        /// The Get Service Objective operation retrieves information about a
        /// certain Service Objective on a given Id.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Sql.IServiceObjectiveOperations.
        /// </param>
        /// <param name='serverName'>
        /// The name of the SQL Server to be queried.
        /// </param>
        /// <param name='serviceObjectiveId'>
        /// The Id of the Service Objective to be obtained.
        /// </param>
        /// <returns>
        /// Response containing the service objective for a given server and
        /// service objective Id.
        /// </returns>
        public static Task<ServiceObjectiveGetResponse> GetAsync(this IServiceObjectiveOperations operations, string serverName, string serviceObjectiveId)
        {
            return operations.GetAsync(serverName, serviceObjectiveId, CancellationToken.None);
        }
        
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Sql.IServiceObjectiveOperations.
        /// </param>
        /// <param name='serverName'>
        /// The name of the database server to be queried.
        /// </param>
        /// <returns>
        /// Response containing the list of service objective for a given
        /// server.
        /// </returns>
        public static ServiceObjectiveListResponse List(this IServiceObjectiveOperations operations, string serverName)
        {
            try
            {
                return operations.ListAsync(serverName).Result;
            }
            catch (AggregateException ex)
            {
                if (ex.InnerExceptions.Count > 1)
                {
                    throw;
                }
                else
                {
                    throw ex.InnerException;
                }
            }
        }
        
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Sql.IServiceObjectiveOperations.
        /// </param>
        /// <param name='serverName'>
        /// The name of the database server to be queried.
        /// </param>
        /// <returns>
        /// Response containing the list of service objective for a given
        /// server.
        /// </returns>
        public static Task<ServiceObjectiveListResponse> ListAsync(this IServiceObjectiveOperations operations, string serverName)
        {
            return operations.ListAsync(serverName, CancellationToken.None);
        }
    }
    
    /// <summary>
    /// The SQL Database Management API includes operations for getting Service
    /// Objective for a subscription.
    /// </summary>
    internal partial class ServiceObjectiveOperations : IServiceOperations<SqlManagementClient>, IServiceObjectiveOperations
    {
        /// <summary>
        /// Initializes a new instance of the ServiceObjectiveOperations class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        internal ServiceObjectiveOperations(SqlManagementClient client)
        {
            this._client = client;
        }
        
        private SqlManagementClient _client;
        
        /// <summary>
        /// Gets a reference to the
        /// Microsoft.WindowsAzure.Management.Sql.SqlManagementClient.
        /// </summary>
        public SqlManagementClient Client
        {
            get { return this._client; }
        }
        
        /// <summary>
        /// The Get Service Objective operation retrieves information about a
        /// certain Service Objective on a given Id.
        /// </summary>
        /// <param name='serverName'>
        /// The name of the SQL Server to be queried.
        /// </param>
        /// <param name='serviceObjectiveId'>
        /// The Id of the Service Objective to be obtained.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Response containing the service objective for a given server and
        /// service objective Id.
        /// </returns>
        public async Task<ServiceObjectiveGetResponse> GetAsync(string serverName, string serviceObjectiveId, CancellationToken cancellationToken)
        {
            // Validate
            if (serverName == null)
            {
                throw new ArgumentNullException("serverName");
            }
            if (serviceObjectiveId == null)
            {
                throw new ArgumentNullException("serviceObjectiveId");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("serverName", serverName);
                tracingParameters.Add("serviceObjectiveId", serviceObjectiveId);
                Tracing.Enter(invocationId, this, "GetAsync", tracingParameters);
            }
            
            // Construct URL
            string url = this.Client.BaseUri + this.Client.Credentials.SubscriptionId + "/services/sqlservers/servers/" + serverName + "/serviceobjectives/" + serviceObjectiveId;
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2012-03-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.CreateFromXml(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    ServiceObjectiveGetResponse result = new ServiceObjectiveGetResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    XDocument responseDoc = XDocument.Parse(responseContent);
                    
                    XElement serviceResourceElement = responseDoc.Element(XName.Get("ServiceResource", "http://schemas.microsoft.com/windowsazure"));
                    if (serviceResourceElement != null)
                    {
                        XElement nameElement = serviceResourceElement.Element(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                        if (nameElement != null)
                        {
                            string nameInstance = nameElement.Value;
                            result.Name = nameInstance;
                        }
                        
                        XElement typeElement = serviceResourceElement.Element(XName.Get("Type", "http://schemas.microsoft.com/windowsazure"));
                        if (typeElement != null)
                        {
                            string typeInstance = typeElement.Value;
                            result.Type = typeInstance;
                        }
                        
                        XElement stateElement = serviceResourceElement.Element(XName.Get("State", "http://schemas.microsoft.com/windowsazure"));
                        if (stateElement != null)
                        {
                            string stateInstance = stateElement.Value;
                            result.State = stateInstance;
                        }
                        
                        XElement selfLinkElement = serviceResourceElement.Element(XName.Get("SelfLink", "http://schemas.microsoft.com/windowsazure"));
                        if (selfLinkElement != null)
                        {
                            string selfLinkInstance = selfLinkElement.Value;
                            result.SelfLink = selfLinkInstance;
                        }
                        
                        XElement parentLinkElement = serviceResourceElement.Element(XName.Get("ParentLink", "http://schemas.microsoft.com/windowsazure"));
                        if (parentLinkElement != null)
                        {
                            string parentLinkInstance = parentLinkElement.Value;
                            result.ParentLink = parentLinkInstance;
                        }
                        
                        XElement idElement = serviceResourceElement.Element(XName.Get("Id", "http://schemas.microsoft.com/windowsazure"));
                        if (idElement != null)
                        {
                            string idInstance = idElement.Value;
                            result.Id = idInstance;
                        }
                        
                        XElement isDefaultElement = serviceResourceElement.Element(XName.Get("IsDefault", "http://schemas.microsoft.com/windowsazure"));
                        if (isDefaultElement != null)
                        {
                            bool isDefaultInstance = bool.Parse(isDefaultElement.Value);
                            result.IsDefault = isDefaultInstance;
                        }
                        
                        XElement isSystemElement = serviceResourceElement.Element(XName.Get("IsSystem", "http://schemas.microsoft.com/windowsazure"));
                        if (isSystemElement != null)
                        {
                            bool isSystemInstance = bool.Parse(isSystemElement.Value);
                            result.IsSystem = isSystemInstance;
                        }
                        
                        XElement descriptionElement = serviceResourceElement.Element(XName.Get("Description", "http://schemas.microsoft.com/windowsazure"));
                        if (descriptionElement != null)
                        {
                            string descriptionInstance = descriptionElement.Value;
                            result.Description = descriptionInstance;
                        }
                        
                        XElement enabledElement = serviceResourceElement.Element(XName.Get("Enabled", "http://schemas.microsoft.com/windowsazure"));
                        if (enabledElement != null)
                        {
                            bool enabledInstance = bool.Parse(enabledElement.Value);
                            result.Enabled = enabledInstance;
                        }
                        
                        XElement dimensionSettingsSequenceElement = serviceResourceElement.Element(XName.Get("DimensionSettings", "http://schemas.microsoft.com/windowsazure"));
                        if (dimensionSettingsSequenceElement != null)
                        {
                            foreach (XElement dimensionSettingsElement in dimensionSettingsSequenceElement.Elements(XName.Get("ServiceResource", "http://schemas.microsoft.com/windowsazure")))
                            {
                                ServiceObjectiveGetResponse.DimensionSettingResponse serviceResourceInstance = new ServiceObjectiveGetResponse.DimensionSettingResponse();
                                result.DimensionSettings.Add(serviceResourceInstance);
                                
                                XElement nameElement2 = dimensionSettingsElement.Element(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                                if (nameElement2 != null)
                                {
                                    string nameInstance2 = nameElement2.Value;
                                    serviceResourceInstance.Name = nameInstance2;
                                }
                                
                                XElement typeElement2 = dimensionSettingsElement.Element(XName.Get("Type", "http://schemas.microsoft.com/windowsazure"));
                                if (typeElement2 != null)
                                {
                                    string typeInstance2 = typeElement2.Value;
                                    serviceResourceInstance.Type = typeInstance2;
                                }
                                
                                XElement stateElement2 = dimensionSettingsElement.Element(XName.Get("State", "http://schemas.microsoft.com/windowsazure"));
                                if (stateElement2 != null)
                                {
                                    string stateInstance2 = stateElement2.Value;
                                    serviceResourceInstance.State = stateInstance2;
                                }
                                
                                XElement selfLinkElement2 = dimensionSettingsElement.Element(XName.Get("SelfLink", "http://schemas.microsoft.com/windowsazure"));
                                if (selfLinkElement2 != null)
                                {
                                    string selfLinkInstance2 = selfLinkElement2.Value;
                                    serviceResourceInstance.SelfLink = selfLinkInstance2;
                                }
                                
                                XElement parentLinkElement2 = dimensionSettingsElement.Element(XName.Get("ParentLink", "http://schemas.microsoft.com/windowsazure"));
                                if (parentLinkElement2 != null)
                                {
                                    string parentLinkInstance2 = parentLinkElement2.Value;
                                    serviceResourceInstance.ParentLink = parentLinkInstance2;
                                }
                                
                                XElement idElement2 = dimensionSettingsElement.Element(XName.Get("Id", "http://schemas.microsoft.com/windowsazure"));
                                if (idElement2 != null)
                                {
                                    string idInstance2 = idElement2.Value;
                                    serviceResourceInstance.Id = idInstance2;
                                }
                                
                                XElement descriptionElement2 = dimensionSettingsElement.Element(XName.Get("Description", "http://schemas.microsoft.com/windowsazure"));
                                if (descriptionElement2 != null)
                                {
                                    string descriptionInstance2 = descriptionElement2.Value;
                                    serviceResourceInstance.Description = descriptionInstance2;
                                }
                                
                                XElement ordinalElement = dimensionSettingsElement.Element(XName.Get("Ordinal", "http://schemas.microsoft.com/windowsazure"));
                                if (ordinalElement != null)
                                {
                                    byte ordinalInstance = byte.Parse(ordinalElement.Value, CultureInfo.InvariantCulture);
                                    serviceResourceInstance.Ordinal = ordinalInstance;
                                }
                                
                                XElement isDefaultElement2 = dimensionSettingsElement.Element(XName.Get("IsDefault", "http://schemas.microsoft.com/windowsazure"));
                                if (isDefaultElement2 != null)
                                {
                                    bool isDefaultInstance2 = bool.Parse(isDefaultElement2.Value);
                                    serviceResourceInstance.IsDefault = isDefaultInstance2;
                                }
                            }
                        }
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <param name='serverName'>
        /// The name of the database server to be queried.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Response containing the list of service objective for a given
        /// server.
        /// </returns>
        public async Task<ServiceObjectiveListResponse> ListAsync(string serverName, CancellationToken cancellationToken)
        {
            // Validate
            if (serverName == null)
            {
                throw new ArgumentNullException("serverName");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("serverName", serverName);
                Tracing.Enter(invocationId, this, "ListAsync", tracingParameters);
            }
            
            // Construct URL
            string url = this.Client.BaseUri + this.Client.Credentials.SubscriptionId + "/services/sqlservers/servers/" + serverName + "/serviceobjectives";
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2012-03-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.CreateFromXml(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    ServiceObjectiveListResponse result = new ServiceObjectiveListResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    XDocument responseDoc = XDocument.Parse(responseContent);
                    
                    XElement serviceResourcesSequenceElement = responseDoc.Element(XName.Get("ServiceResources", "http://schemas.microsoft.com/windowsazure"));
                    if (serviceResourcesSequenceElement != null)
                    {
                        foreach (XElement serviceResourcesElement in serviceResourcesSequenceElement.Elements(XName.Get("ServiceResource", "http://schemas.microsoft.com/windowsazure")))
                        {
                            ServiceObjectiveListResponse.ServiceObjective serviceResourceInstance = new ServiceObjectiveListResponse.ServiceObjective();
                            result.ServiceObjectives.Add(serviceResourceInstance);
                            
                            XElement nameElement = serviceResourcesElement.Element(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                            if (nameElement != null)
                            {
                                string nameInstance = nameElement.Value;
                                serviceResourceInstance.Name = nameInstance;
                            }
                            
                            XElement typeElement = serviceResourcesElement.Element(XName.Get("Type", "http://schemas.microsoft.com/windowsazure"));
                            if (typeElement != null)
                            {
                                string typeInstance = typeElement.Value;
                                serviceResourceInstance.Type = typeInstance;
                            }
                            
                            XElement stateElement = serviceResourcesElement.Element(XName.Get("State", "http://schemas.microsoft.com/windowsazure"));
                            if (stateElement != null)
                            {
                                string stateInstance = stateElement.Value;
                                serviceResourceInstance.State = stateInstance;
                            }
                            
                            XElement selfLinkElement = serviceResourcesElement.Element(XName.Get("SelfLink", "http://schemas.microsoft.com/windowsazure"));
                            if (selfLinkElement != null)
                            {
                                string selfLinkInstance = selfLinkElement.Value;
                                serviceResourceInstance.SelfLink = selfLinkInstance;
                            }
                            
                            XElement parentLinkElement = serviceResourcesElement.Element(XName.Get("ParentLink", "http://schemas.microsoft.com/windowsazure"));
                            if (parentLinkElement != null)
                            {
                                string parentLinkInstance = parentLinkElement.Value;
                                serviceResourceInstance.ParentLink = parentLinkInstance;
                            }
                            
                            XElement idElement = serviceResourcesElement.Element(XName.Get("Id", "http://schemas.microsoft.com/windowsazure"));
                            if (idElement != null)
                            {
                                string idInstance = idElement.Value;
                                serviceResourceInstance.Id = idInstance;
                            }
                            
                            XElement isDefaultElement = serviceResourcesElement.Element(XName.Get("IsDefault", "http://schemas.microsoft.com/windowsazure"));
                            if (isDefaultElement != null)
                            {
                                bool isDefaultInstance = bool.Parse(isDefaultElement.Value);
                                serviceResourceInstance.IsDefault = isDefaultInstance;
                            }
                            
                            XElement isSystemElement = serviceResourcesElement.Element(XName.Get("IsSystem", "http://schemas.microsoft.com/windowsazure"));
                            if (isSystemElement != null)
                            {
                                bool isSystemInstance = bool.Parse(isSystemElement.Value);
                                serviceResourceInstance.IsSystem = isSystemInstance;
                            }
                            
                            XElement descriptionElement = serviceResourcesElement.Element(XName.Get("Description", "http://schemas.microsoft.com/windowsazure"));
                            if (descriptionElement != null)
                            {
                                string descriptionInstance = descriptionElement.Value;
                                serviceResourceInstance.Description = descriptionInstance;
                            }
                            
                            XElement enabledElement = serviceResourcesElement.Element(XName.Get("Enabled", "http://schemas.microsoft.com/windowsazure"));
                            if (enabledElement != null)
                            {
                                bool enabledInstance = bool.Parse(enabledElement.Value);
                                serviceResourceInstance.Enabled = enabledInstance;
                            }
                            
                            XElement dimensionSettingsSequenceElement = serviceResourcesElement.Element(XName.Get("DimensionSettings", "http://schemas.microsoft.com/windowsazure"));
                            if (dimensionSettingsSequenceElement != null)
                            {
                                foreach (XElement dimensionSettingsElement in dimensionSettingsSequenceElement.Elements(XName.Get("ServiceResource", "http://schemas.microsoft.com/windowsazure")))
                                {
                                    ServiceObjectiveListResponse.ServiceObjective.DimensionSettingResponse serviceResourceInstance2 = new ServiceObjectiveListResponse.ServiceObjective.DimensionSettingResponse();
                                    serviceResourceInstance.DimensionSettings.Add(serviceResourceInstance2);
                                    
                                    XElement nameElement2 = dimensionSettingsElement.Element(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                                    if (nameElement2 != null)
                                    {
                                        string nameInstance2 = nameElement2.Value;
                                        serviceResourceInstance2.Name = nameInstance2;
                                    }
                                    
                                    XElement typeElement2 = dimensionSettingsElement.Element(XName.Get("Type", "http://schemas.microsoft.com/windowsazure"));
                                    if (typeElement2 != null)
                                    {
                                        string typeInstance2 = typeElement2.Value;
                                        serviceResourceInstance2.Type = typeInstance2;
                                    }
                                    
                                    XElement stateElement2 = dimensionSettingsElement.Element(XName.Get("State", "http://schemas.microsoft.com/windowsazure"));
                                    if (stateElement2 != null)
                                    {
                                        string stateInstance2 = stateElement2.Value;
                                        serviceResourceInstance2.State = stateInstance2;
                                    }
                                    
                                    XElement selfLinkElement2 = dimensionSettingsElement.Element(XName.Get("SelfLink", "http://schemas.microsoft.com/windowsazure"));
                                    if (selfLinkElement2 != null)
                                    {
                                        string selfLinkInstance2 = selfLinkElement2.Value;
                                        serviceResourceInstance2.SelfLink = selfLinkInstance2;
                                    }
                                    
                                    XElement parentLinkElement2 = dimensionSettingsElement.Element(XName.Get("ParentLink", "http://schemas.microsoft.com/windowsazure"));
                                    if (parentLinkElement2 != null)
                                    {
                                        string parentLinkInstance2 = parentLinkElement2.Value;
                                        serviceResourceInstance2.ParentLink = parentLinkInstance2;
                                    }
                                    
                                    XElement idElement2 = dimensionSettingsElement.Element(XName.Get("Id", "http://schemas.microsoft.com/windowsazure"));
                                    if (idElement2 != null)
                                    {
                                        string idInstance2 = idElement2.Value;
                                        serviceResourceInstance2.Id = idInstance2;
                                    }
                                    
                                    XElement descriptionElement2 = dimensionSettingsElement.Element(XName.Get("Description", "http://schemas.microsoft.com/windowsazure"));
                                    if (descriptionElement2 != null)
                                    {
                                        string descriptionInstance2 = descriptionElement2.Value;
                                        serviceResourceInstance2.Description = descriptionInstance2;
                                    }
                                    
                                    XElement ordinalElement = dimensionSettingsElement.Element(XName.Get("Ordinal", "http://schemas.microsoft.com/windowsazure"));
                                    if (ordinalElement != null)
                                    {
                                        byte ordinalInstance = byte.Parse(ordinalElement.Value, CultureInfo.InvariantCulture);
                                        serviceResourceInstance2.Ordinal = ordinalInstance;
                                    }
                                    
                                    XElement isDefaultElement2 = dimensionSettingsElement.Element(XName.Get("IsDefault", "http://schemas.microsoft.com/windowsazure"));
                                    if (isDefaultElement2 != null)
                                    {
                                        bool isDefaultInstance2 = bool.Parse(isDefaultElement2.Value);
                                        serviceResourceInstance2.IsDefault = isDefaultInstance2;
                                    }
                                }
                            }
                        }
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
    }
}
