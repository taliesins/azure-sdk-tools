// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using System.Xml.Linq;
using Microsoft.WindowsAzure;
using Microsoft.WindowsAzure.Common;
using Microsoft.WindowsAzure.Common.Internals;
using Microsoft.WindowsAzure.Management.MediaServices;
using Microsoft.WindowsAzure.Management.MediaServices.Models;
using Newtonsoft.Json.Linq;

namespace Microsoft.WindowsAzure.Management.MediaServices.Models
{
    /// <summary>
    /// Parameters supplied to the Create Media Services Account operation.
    /// </summary>
    public partial class MediaServicesAccountCreateParameters
    {
        private string _accountName;
        
        /// <summary>
        /// Required. The name of the Media Services account to create.
        /// </summary>
        public string AccountName
        {
            get { return this._accountName; }
            set { this._accountName = value; }
        }
        
        private Uri _blobStorageEndpointUri;
        
        /// <summary>
        /// Required. The url of the blob storage endpoint associated with the
        /// created Media Services account
        /// </summary>
        public Uri BlobStorageEndpointUri
        {
            get { return this._blobStorageEndpointUri; }
            set { this._blobStorageEndpointUri = value; }
        }
        
        private string _region;
        
        /// <summary>
        /// Required. The region associated with the created Media Services
        /// account
        /// </summary>
        public string Region
        {
            get { return this._region; }
            set { this._region = value; }
        }
        
        private string _storageAccountKey;
        
        /// <summary>
        /// Required. The access key of the storage account associated with the
        /// created Media Services account
        /// </summary>
        public string StorageAccountKey
        {
            get { return this._storageAccountKey; }
            set { this._storageAccountKey = value; }
        }
        
        private string _storageAccountName;
        
        /// <summary>
        /// Required. The name of the storage account associated with the
        /// created Media Services account
        /// </summary>
        public string StorageAccountName
        {
            get { return this._storageAccountName; }
            set { this._storageAccountName = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the
        /// MediaServicesAccountCreateParameters class.
        /// </summary>
        public MediaServicesAccountCreateParameters()
        {
        }
    }
    
    /// <summary>
    /// The Create Media Services Account operation response.
    /// </summary>
    public partial class MediaServicesAccountCreateResponse : OperationResponse
    {
        private string _accountId;
        
        /// <summary>
        /// The Id of the created Media Services account.
        /// </summary>
        public string AccountId
        {
            get { return this._accountId; }
            set { this._accountId = value; }
        }
        
        private string _accountName;
        
        /// <summary>
        /// The Name of the created Media Services account.
        /// </summary>
        public string AccountName
        {
            get { return this._accountName; }
            set { this._accountName = value; }
        }
        
        private string _subscriptionId;
        
        /// <summary>
        /// The subscription Id associated with the created Media Services
        /// account.
        /// </summary>
        public string SubscriptionId
        {
            get { return this._subscriptionId; }
            set { this._subscriptionId = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the
        /// MediaServicesAccountCreateResponse class.
        /// </summary>
        public MediaServicesAccountCreateResponse()
        {
        }
    }
    
    /// <summary>
    /// The Get Media Services Account operation response.
    /// </summary>
    public partial class MediaServicesAccountGetResponse : OperationResponse
    {
        private string _accountKey;
        
        /// <summary>
        /// The Key of the Media Services account.
        /// </summary>
        public string AccountKey
        {
            get { return this._accountKey; }
            set { this._accountKey = value; }
        }
        
        private string _accountName;
        
        /// <summary>
        /// The Name of the Media Services account.
        /// </summary>
        public string AccountName
        {
            get { return this._accountName; }
            set { this._accountName = value; }
        }
        
        private string _accountRegion;
        
        /// <summary>
        /// The Region of the  Media Services account.
        /// </summary>
        public string AccountRegion
        {
            get { return this._accountRegion; }
            set { this._accountRegion = value; }
        }
        
        private MediaServicesAccountGetResponse.AccountKeys _storageAccountKeys;
        
        /// <summary>
        /// The Storage Account keys of the Media Services account.
        /// </summary>
        public MediaServicesAccountGetResponse.AccountKeys StorageAccountKeys
        {
            get { return this._storageAccountKeys; }
            set { this._storageAccountKeys = value; }
        }
        
        private string _storageAccountName;
        
        /// <summary>
        /// The Storage Account Name of the Media Services account.
        /// </summary>
        public string StorageAccountName
        {
            get { return this._storageAccountName; }
            set { this._storageAccountName = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the MediaServicesAccountGetResponse
        /// class.
        /// </summary>
        public MediaServicesAccountGetResponse()
        {
        }
        
        /// <summary>
        /// The key information associated with a Media Services Account.
        /// </summary>
        public partial class AccountKeys
        {
            private string _primary;
            
            /// <summary>
            /// The Primary key of the storage account associated with the
            /// Media Services account.
            /// </summary>
            public string Primary
            {
                get { return this._primary; }
                set { this._primary = value; }
            }
            
            private string _secondary;
            
            /// <summary>
            /// The Secondary key of the sotrage account associated with the
            /// Media Services account.
            /// </summary>
            public string Secondary
            {
                get { return this._secondary; }
                set { this._secondary = value; }
            }
            
            /// <summary>
            /// Initializes a new instance of the AccountKeys class.
            /// </summary>
            public AccountKeys()
            {
            }
        }
    }
    
    /// <summary>
    /// The List Media Accounts operation response.
    /// </summary>
    public partial class MediaServicesAccountListResponse : OperationResponse, IEnumerable<MediaServicesAccountListResponse.MediaServiceAccount>
    {
        private IList<MediaServicesAccountListResponse.MediaServiceAccount> _accounts;
        
        public IList<MediaServicesAccountListResponse.MediaServiceAccount> Accounts
        {
            get { return this._accounts; }
            set { this._accounts = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the MediaServicesAccountListResponse
        /// class.
        /// </summary>
        public MediaServicesAccountListResponse()
        {
            this._accounts = new List<MediaServicesAccountListResponse.MediaServiceAccount>();
        }
        
        /// <summary>
        /// Gets the sequence of Accounts.
        /// </summary>
        public IEnumerator<MediaServicesAccountListResponse.MediaServiceAccount> GetEnumerator()
        {
            return this.Accounts.GetEnumerator();
        }
        
        /// <summary>
        /// Gets the sequence of Accounts.
        /// </summary>
        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
        {
            return this.GetEnumerator();
        }
        
        /// <summary>
        /// A Media Services account associated with your subscription.
        /// </summary>
        public partial class MediaServiceAccount
        {
            private string _accountId;
            
            /// <summary>
            /// The Id of the Media Services Account.
            /// </summary>
            public string AccountId
            {
                get { return this._accountId; }
                set { this._accountId = value; }
            }
            
            private string _name;
            
            /// <summary>
            /// The Name of the Media Services Account.
            /// </summary>
            public string Name
            {
                get { return this._name; }
                set { this._name = value; }
            }
            
            private Uri _parentUri;
            
            /// <summary>
            /// The ParentLink of the Media Services Account.
            /// </summary>
            public Uri ParentUri
            {
                get { return this._parentUri; }
                set { this._parentUri = value; }
            }
            
            private string _state;
            
            /// <summary>
            /// The current state of the Media Services Account.
            /// </summary>
            public string State
            {
                get { return this._state; }
                set { this._state = value; }
            }
            
            private string _type;
            
            /// <summary>
            /// The type of the Media Services Account.
            /// </summary>
            public string Type
            {
                get { return this._type; }
                set { this._type = value; }
            }
            
            private Uri _uri;
            
            /// <summary>
            /// The SelfLink of the Media Services Account.
            /// </summary>
            public Uri Uri
            {
                get { return this._uri; }
                set { this._uri = value; }
            }
            
            /// <summary>
            /// Initializes a new instance of the MediaServiceAccount class.
            /// </summary>
            public MediaServiceAccount()
            {
            }
        }
    }
    
    public enum MediaServicesKeyType
    {
        Primary = 0,
        
        Secondary = 1,
    }
}

namespace Microsoft.WindowsAzure.Management.MediaServices
{
    public partial interface IMediaServicesManagementClient
    {
        /// <summary>
        /// The URI used as the base for all Media Services requests.
        /// </summary>
        Uri BaseUri
        {
            get; 
        }
        
        /// <summary>
        /// When you create a Windows Azure subscription, it is uniquely
        /// identified by a subscription ID. The subscription ID forms part of
        /// the URI for every call that you make to the Service Management
        /// API.  The Windows Azure Service ManagementAPI use mutual
        /// authentication of management certificates over SSL to ensure that
        /// a request made to the service is secure.  No anonymous requests
        /// are allowed.
        /// </summary>
        SubscriptionCloudCredentials Credentials
        {
            get; 
        }
        
        IAccountOperations Accounts
        {
            get; 
        }
    }
    
    public static partial class MediaServicesManagementClientExtensions
    {
    }
    
    public partial class MediaServicesManagementClient : ServiceClient<MediaServicesManagementClient>, IMediaServicesManagementClient
    {
        private Uri _baseUri;
        
        /// <summary>
        /// The URI used as the base for all Media Services requests.
        /// </summary>
        public Uri BaseUri
        {
            get { return this._baseUri; }
        }
        
        private SubscriptionCloudCredentials _credentials;
        
        /// <summary>
        /// When you create a Windows Azure subscription, it is uniquely
        /// identified by a subscription ID. The subscription ID forms part of
        /// the URI for every call that you make to the Service Management
        /// API.  The Windows Azure Service ManagementAPI use mutual
        /// authentication of management certificates over SSL to ensure that
        /// a request made to the service is secure.  No anonymous requests
        /// are allowed.
        /// </summary>
        public SubscriptionCloudCredentials Credentials
        {
            get { return this._credentials; }
        }
        
        private IAccountOperations _accounts;
        
        public virtual IAccountOperations Accounts
        {
            get { return this._accounts; }
        }
        
        /// <summary>
        /// Initializes a new instance of the MediaServicesManagementClient
        /// class.
        /// </summary>
        private MediaServicesManagementClient()
            : base()
        {
            this._accounts = new AccountOperations(this);
            this.HttpClient.Timeout = TimeSpan.FromSeconds(300);
        }
        
        /// <summary>
        /// Initializes a new instance of the MediaServicesManagementClient
        /// class.
        /// </summary>
        /// <param name='credentials'>
        /// When you create a Windows Azure subscription, it is uniquely
        /// identified by a subscription ID. The subscription ID forms part of
        /// the URI for every call that you make to the Service Management
        /// API.  The Windows Azure Service ManagementAPI use mutual
        /// authentication of management certificates over SSL to ensure that
        /// a request made to the service is secure.  No anonymous requests
        /// are allowed.
        /// </param>
        /// <param name='baseUri'>
        /// The URI used as the base for all Media Services requests.
        /// </param>
        public MediaServicesManagementClient(SubscriptionCloudCredentials credentials, Uri baseUri)
            : this()
        {
            if (credentials == null)
            {
                throw new ArgumentNullException("credentials");
            }
            if (baseUri == null)
            {
                throw new ArgumentNullException("baseUri");
            }
            this._credentials = credentials;
            this._baseUri = baseUri;
            
            this.Credentials.InitializeServiceClient(this);
        }
        
        /// <summary>
        /// Initializes a new instance of the MediaServicesManagementClient
        /// class.
        /// </summary>
        /// <param name='credentials'>
        /// When you create a Windows Azure subscription, it is uniquely
        /// identified by a subscription ID. The subscription ID forms part of
        /// the URI for every call that you make to the Service Management
        /// API.  The Windows Azure Service ManagementAPI use mutual
        /// authentication of management certificates over SSL to ensure that
        /// a request made to the service is secure.  No anonymous requests
        /// are allowed.
        /// </param>
        public MediaServicesManagementClient(SubscriptionCloudCredentials credentials)
            : this()
        {
            if (credentials == null)
            {
                throw new ArgumentNullException("credentials");
            }
            this._credentials = credentials;
            
            this.Credentials.InitializeServiceClient(this);
        }
    }
    
    public partial interface IAccountOperations
    {
        /// <summary>
        /// The Create Media Services Account operation creates a new media
        /// services account in Windows Azure.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn194267.aspx
        /// for more information)
        /// </summary>
        /// <param name='parameters'>
        /// Parameters supplied to the Create Media Services Account operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The Create Media Services Account operation response.
        /// </returns>
        Task<MediaServicesAccountCreateResponse> CreateAsync(MediaServicesAccountCreateParameters parameters, CancellationToken cancellationToken);
        
        /// <summary>
        /// The Delete Media Services Account operation deletes an existing
        /// media services account in Windows Azure.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn194273.aspx
        /// for more information)
        /// </summary>
        /// <param name='accountName'>
        /// The name of the media services account.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        Task<OperationResponse> DeleteAsync(string accountName, CancellationToken cancellationToken);
        
        /// <summary>
        /// The Get Media Services Account operation gets detailed information
        /// about a media services account in Windows Azure.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn166974.aspx
        /// for more information)
        /// </summary>
        /// <param name='accountName'>
        /// The name of the Media Services account
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The Get Media Services Account operation response.
        /// </returns>
        Task<MediaServicesAccountGetResponse> GetAsync(string accountName, CancellationToken cancellationToken);
        
        /// <summary>
        /// The List Media Services Account operation gets information about
        /// all existing media services accounts associated with the current
        /// subscription in Windows Azure.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn166989.aspx
        /// for more information)
        /// </summary>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The List Media Accounts operation response.
        /// </returns>
        Task<MediaServicesAccountListResponse> ListAsync(CancellationToken cancellationToken);
        
        /// <summary>
        /// The Regenerate Media Services Account Key operation regenerates an
        /// account key for the given Media Services account in Windows Azure.
        /// (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn167010.aspx
        /// for more information)
        /// </summary>
        /// <param name='accountName'>
        /// The name of the Media Services Account
        /// </param>
        /// <param name='keyType'>
        /// The type of key to regenerate (primary or secondary)
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        Task<OperationResponse> RegenerateKeyAsync(string accountName, MediaServicesKeyType keyType, CancellationToken cancellationToken);
    }
    
    public static partial class AccountOperationsExtensions
    {
        /// <summary>
        /// The Create Media Services Account operation creates a new media
        /// services account in Windows Azure.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn194267.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.MediaServices.IAccountOperations.
        /// </param>
        /// <param name='parameters'>
        /// Parameters supplied to the Create Media Services Account operation.
        /// </param>
        /// <returns>
        /// The Create Media Services Account operation response.
        /// </returns>
        public static MediaServicesAccountCreateResponse Create(this IAccountOperations operations, MediaServicesAccountCreateParameters parameters)
        {
            try
            {
                return operations.CreateAsync(parameters).Result;
            }
            catch (AggregateException ex)
            {
                if (ex.InnerExceptions.Count > 1)
                {
                    throw;
                }
                else
                {
                    throw ex.InnerException;
                }
            }
        }
        
        /// <summary>
        /// The Create Media Services Account operation creates a new media
        /// services account in Windows Azure.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn194267.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.MediaServices.IAccountOperations.
        /// </param>
        /// <param name='parameters'>
        /// Parameters supplied to the Create Media Services Account operation.
        /// </param>
        /// <returns>
        /// The Create Media Services Account operation response.
        /// </returns>
        public static Task<MediaServicesAccountCreateResponse> CreateAsync(this IAccountOperations operations, MediaServicesAccountCreateParameters parameters)
        {
            return operations.CreateAsync(parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// The Delete Media Services Account operation deletes an existing
        /// media services account in Windows Azure.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn194273.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.MediaServices.IAccountOperations.
        /// </param>
        /// <param name='accountName'>
        /// The name of the media services account.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static OperationResponse Delete(this IAccountOperations operations, string accountName)
        {
            try
            {
                return operations.DeleteAsync(accountName).Result;
            }
            catch (AggregateException ex)
            {
                if (ex.InnerExceptions.Count > 1)
                {
                    throw;
                }
                else
                {
                    throw ex.InnerException;
                }
            }
        }
        
        /// <summary>
        /// The Delete Media Services Account operation deletes an existing
        /// media services account in Windows Azure.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn194273.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.MediaServices.IAccountOperations.
        /// </param>
        /// <param name='accountName'>
        /// The name of the media services account.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<OperationResponse> DeleteAsync(this IAccountOperations operations, string accountName)
        {
            return operations.DeleteAsync(accountName, CancellationToken.None);
        }
        
        /// <summary>
        /// The Get Media Services Account operation gets detailed information
        /// about a media services account in Windows Azure.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn166974.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.MediaServices.IAccountOperations.
        /// </param>
        /// <param name='accountName'>
        /// The name of the Media Services account
        /// </param>
        /// <returns>
        /// The Get Media Services Account operation response.
        /// </returns>
        public static MediaServicesAccountGetResponse Get(this IAccountOperations operations, string accountName)
        {
            try
            {
                return operations.GetAsync(accountName).Result;
            }
            catch (AggregateException ex)
            {
                if (ex.InnerExceptions.Count > 1)
                {
                    throw;
                }
                else
                {
                    throw ex.InnerException;
                }
            }
        }
        
        /// <summary>
        /// The Get Media Services Account operation gets detailed information
        /// about a media services account in Windows Azure.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn166974.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.MediaServices.IAccountOperations.
        /// </param>
        /// <param name='accountName'>
        /// The name of the Media Services account
        /// </param>
        /// <returns>
        /// The Get Media Services Account operation response.
        /// </returns>
        public static Task<MediaServicesAccountGetResponse> GetAsync(this IAccountOperations operations, string accountName)
        {
            return operations.GetAsync(accountName, CancellationToken.None);
        }
        
        /// <summary>
        /// The List Media Services Account operation gets information about
        /// all existing media services accounts associated with the current
        /// subscription in Windows Azure.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn166989.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.MediaServices.IAccountOperations.
        /// </param>
        /// <returns>
        /// The List Media Accounts operation response.
        /// </returns>
        public static MediaServicesAccountListResponse List(this IAccountOperations operations)
        {
            try
            {
                return operations.ListAsync().Result;
            }
            catch (AggregateException ex)
            {
                if (ex.InnerExceptions.Count > 1)
                {
                    throw;
                }
                else
                {
                    throw ex.InnerException;
                }
            }
        }
        
        /// <summary>
        /// The List Media Services Account operation gets information about
        /// all existing media services accounts associated with the current
        /// subscription in Windows Azure.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn166989.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.MediaServices.IAccountOperations.
        /// </param>
        /// <returns>
        /// The List Media Accounts operation response.
        /// </returns>
        public static Task<MediaServicesAccountListResponse> ListAsync(this IAccountOperations operations)
        {
            return operations.ListAsync(CancellationToken.None);
        }
        
        /// <summary>
        /// The Regenerate Media Services Account Key operation regenerates an
        /// account key for the given Media Services account in Windows Azure.
        /// (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn167010.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.MediaServices.IAccountOperations.
        /// </param>
        /// <param name='accountName'>
        /// The name of the Media Services Account
        /// </param>
        /// <param name='keyType'>
        /// The type of key to regenerate (primary or secondary)
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static OperationResponse RegenerateKey(this IAccountOperations operations, string accountName, MediaServicesKeyType keyType)
        {
            try
            {
                return operations.RegenerateKeyAsync(accountName, keyType).Result;
            }
            catch (AggregateException ex)
            {
                if (ex.InnerExceptions.Count > 1)
                {
                    throw;
                }
                else
                {
                    throw ex.InnerException;
                }
            }
        }
        
        /// <summary>
        /// The Regenerate Media Services Account Key operation regenerates an
        /// account key for the given Media Services account in Windows Azure.
        /// (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn167010.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.MediaServices.IAccountOperations.
        /// </param>
        /// <param name='accountName'>
        /// The name of the Media Services Account
        /// </param>
        /// <param name='keyType'>
        /// The type of key to regenerate (primary or secondary)
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<OperationResponse> RegenerateKeyAsync(this IAccountOperations operations, string accountName, MediaServicesKeyType keyType)
        {
            return operations.RegenerateKeyAsync(accountName, keyType, CancellationToken.None);
        }
    }
    
    internal partial class AccountOperations : IServiceOperations<MediaServicesManagementClient>, IAccountOperations
    {
        /// <summary>
        /// Initializes a new instance of the AccountOperations class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        internal AccountOperations(MediaServicesManagementClient client)
        {
            this._client = client;
        }
        
        private MediaServicesManagementClient _client;
        
        /// <summary>
        /// Gets a reference to the
        /// Microsoft.WindowsAzure.Management.MediaServices.MediaServicesManagementClient.
        /// </summary>
        public MediaServicesManagementClient Client
        {
            get { return this._client; }
        }
        
        /// <summary>
        /// The Create Media Services Account operation creates a new media
        /// services account in Windows Azure.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn194267.aspx
        /// for more information)
        /// </summary>
        /// <param name='parameters'>
        /// Parameters supplied to the Create Media Services Account operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The Create Media Services Account operation response.
        /// </returns>
        public async Task<MediaServicesAccountCreateResponse> CreateAsync(MediaServicesAccountCreateParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            if (parameters.AccountName == null)
            {
                throw new ArgumentNullException("parameters.AccountName");
            }
            if (parameters.AccountName.Length < 3)
            {
                throw new ArgumentOutOfRangeException("parameters.AccountName");
            }
            if (parameters.AccountName.Length > 24)
            {
                throw new ArgumentOutOfRangeException("parameters.AccountName");
            }
            if (parameters.BlobStorageEndpointUri == null)
            {
                throw new ArgumentNullException("parameters.BlobStorageEndpointUri");
            }
            if (parameters.Region == null)
            {
                throw new ArgumentNullException("parameters.Region");
            }
            if (parameters.Region.Length < 3)
            {
                throw new ArgumentOutOfRangeException("parameters.Region");
            }
            if (parameters.Region.Length > 256)
            {
                throw new ArgumentOutOfRangeException("parameters.Region");
            }
            if (parameters.StorageAccountKey == null)
            {
                throw new ArgumentNullException("parameters.StorageAccountKey");
            }
            if (parameters.StorageAccountKey.Length < 14)
            {
                throw new ArgumentOutOfRangeException("parameters.StorageAccountKey");
            }
            if (parameters.StorageAccountKey.Length > 256)
            {
                throw new ArgumentOutOfRangeException("parameters.StorageAccountKey");
            }
            if (parameters.StorageAccountName == null)
            {
                throw new ArgumentNullException("parameters.StorageAccountName");
            }
            if (parameters.StorageAccountName.Length < 3)
            {
                throw new ArgumentOutOfRangeException("parameters.StorageAccountName");
            }
            if (parameters.StorageAccountName.Length > 24)
            {
                throw new ArgumentOutOfRangeException("parameters.StorageAccountName");
            }
            foreach (char storageAccountNameChar in parameters.StorageAccountName)
            {
                if (char.IsLower(storageAccountNameChar) == false && char.IsDigit(storageAccountNameChar) == false)
                {
                    throw new ArgumentOutOfRangeException("parameters.StorageAccountName");
                }
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("parameters", parameters);
                Tracing.Enter(invocationId, this, "CreateAsync", tracingParameters);
            }
            
            // Construct URL
            string url = this.Client.BaseUri + "/" + this.Client.Credentials.SubscriptionId + "/services/mediaservices/Accounts";
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2011-10-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                XDocument requestDoc = new XDocument();
                
                XElement accountCreationRequestElement = new XElement(XName.Get("AccountCreationRequest", "http://schemas.datacontract.org/2004/07/Microsoft.Cloud.Media.Management.ResourceProvider.Models"));
                requestDoc.Add(accountCreationRequestElement);
                
                XElement accountNameElement = new XElement(XName.Get("AccountName", "http://schemas.datacontract.org/2004/07/Microsoft.Cloud.Media.Management.ResourceProvider.Models"));
                accountNameElement.Value = parameters.AccountName;
                accountCreationRequestElement.Add(accountNameElement);
                
                XElement blobStorageEndpointUriElement = new XElement(XName.Get("BlobStorageEndpointUri", "http://schemas.datacontract.org/2004/07/Microsoft.Cloud.Media.Management.ResourceProvider.Models"));
                blobStorageEndpointUriElement.Value = parameters.BlobStorageEndpointUri.ToString();
                accountCreationRequestElement.Add(blobStorageEndpointUriElement);
                
                XElement regionElement = new XElement(XName.Get("Region", "http://schemas.datacontract.org/2004/07/Microsoft.Cloud.Media.Management.ResourceProvider.Models"));
                regionElement.Value = parameters.Region;
                accountCreationRequestElement.Add(regionElement);
                
                XElement storageAccountKeyElement = new XElement(XName.Get("StorageAccountKey", "http://schemas.datacontract.org/2004/07/Microsoft.Cloud.Media.Management.ResourceProvider.Models"));
                storageAccountKeyElement.Value = parameters.StorageAccountKey;
                accountCreationRequestElement.Add(storageAccountKeyElement);
                
                XElement storageAccountNameElement = new XElement(XName.Get("StorageAccountName", "http://schemas.datacontract.org/2004/07/Microsoft.Cloud.Media.Management.ResourceProvider.Models"));
                storageAccountNameElement.Value = parameters.StorageAccountName;
                accountCreationRequestElement.Add(storageAccountNameElement);
                
                requestContent = requestDoc.ToString();
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = new MediaTypeHeaderValue("application/xml");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.Created)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.CreateFromJson(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    MediaServicesAccountCreateResponse result = new MediaServicesAccountCreateResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    JToken responseDoc = JToken.Parse(responseContent);
                    
                    if (responseDoc != null)
                    {
                        JToken accountIdValue = responseDoc["AccountId"];
                        if (accountIdValue != null)
                        {
                            string accountIdInstance = (string)accountIdValue;
                            result.AccountId = accountIdInstance;
                        }
                        
                        JToken accountNameValue = responseDoc["AccountName"];
                        if (accountNameValue != null)
                        {
                            string accountNameInstance = (string)accountNameValue;
                            result.AccountName = accountNameInstance;
                        }
                        
                        JToken subscriptionValue = responseDoc["Subscription"];
                        if (subscriptionValue != null)
                        {
                            string subscriptionInstance = (string)subscriptionValue;
                            result.SubscriptionId = subscriptionInstance;
                        }
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The Delete Media Services Account operation deletes an existing
        /// media services account in Windows Azure.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn194273.aspx
        /// for more information)
        /// </summary>
        /// <param name='accountName'>
        /// The name of the media services account.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<OperationResponse> DeleteAsync(string accountName, CancellationToken cancellationToken)
        {
            // Validate
            if (accountName == null)
            {
                throw new ArgumentNullException("accountName");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("accountName", accountName);
                Tracing.Enter(invocationId, this, "DeleteAsync", tracingParameters);
            }
            
            // Construct URL
            string url = this.Client.BaseUri + "/" + this.Client.Credentials.SubscriptionId + "/services/mediaservices/Accounts/" + accountName;
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Delete;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2011-10-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.NoContent)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.CreateFromXml(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    OperationResponse result = new OperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The Get Media Services Account operation gets detailed information
        /// about a media services account in Windows Azure.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn166974.aspx
        /// for more information)
        /// </summary>
        /// <param name='accountName'>
        /// The name of the Media Services account
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The Get Media Services Account operation response.
        /// </returns>
        public async Task<MediaServicesAccountGetResponse> GetAsync(string accountName, CancellationToken cancellationToken)
        {
            // Validate
            if (accountName == null)
            {
                throw new ArgumentNullException("accountName");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("accountName", accountName);
                Tracing.Enter(invocationId, this, "GetAsync", tracingParameters);
            }
            
            // Construct URL
            string url = this.Client.BaseUri + "/" + this.Client.Credentials.SubscriptionId + "/services/mediaservices/Accounts/" + accountName;
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2011-10-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.CreateFromJson(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    MediaServicesAccountGetResponse result = new MediaServicesAccountGetResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    JToken responseDoc = JToken.Parse(responseContent);
                    
                    if (responseDoc != null)
                    {
                        JToken accountNameValue = responseDoc["AccountName"];
                        if (accountNameValue != null)
                        {
                            string accountNameInstance = (string)accountNameValue;
                            result.AccountName = accountNameInstance;
                        }
                        
                        JToken accountKeyValue = responseDoc["AccountKey"];
                        if (accountKeyValue != null)
                        {
                            string accountKeyInstance = (string)accountKeyValue;
                            result.AccountKey = accountKeyInstance;
                        }
                        
                        JToken accountKeysValue = responseDoc["AccountKeys"];
                        if (accountKeysValue != null)
                        {
                            MediaServicesAccountGetResponse.AccountKeys accountKeysInstance = new MediaServicesAccountGetResponse.AccountKeys();
                            result.StorageAccountKeys = accountKeysInstance;
                            
                            JToken primaryValue = accountKeysValue["Primary"];
                            if (primaryValue != null)
                            {
                                string primaryInstance = (string)primaryValue;
                                accountKeysInstance.Primary = primaryInstance;
                            }
                            
                            JToken secondaryValue = accountKeysValue["Secondary"];
                            if (secondaryValue != null)
                            {
                                string secondaryInstance = (string)secondaryValue;
                                accountKeysInstance.Secondary = secondaryInstance;
                            }
                        }
                        
                        JToken accountRegionValue = responseDoc["AccountRegion"];
                        if (accountRegionValue != null)
                        {
                            string accountRegionInstance = (string)accountRegionValue;
                            result.AccountRegion = accountRegionInstance;
                        }
                        
                        JToken storageAccountNameValue = responseDoc["StorageAccountName"];
                        if (storageAccountNameValue != null)
                        {
                            string storageAccountNameInstance = (string)storageAccountNameValue;
                            result.StorageAccountName = storageAccountNameInstance;
                        }
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The List Media Services Account operation gets information about
        /// all existing media services accounts associated with the current
        /// subscription in Windows Azure.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn166989.aspx
        /// for more information)
        /// </summary>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The List Media Accounts operation response.
        /// </returns>
        public async Task<MediaServicesAccountListResponse> ListAsync(CancellationToken cancellationToken)
        {
            // Validate
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                Tracing.Enter(invocationId, this, "ListAsync", tracingParameters);
            }
            
            // Construct URL
            string url = this.Client.BaseUri + "/" + this.Client.Credentials.SubscriptionId + "/services/mediaservices/Accounts";
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2011-10-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.CreateFromXml(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    MediaServicesAccountListResponse result = new MediaServicesAccountListResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    XDocument responseDoc = XDocument.Parse(responseContent);
                    
                    XElement serviceResourcesSequenceElement = responseDoc.Element(XName.Get("ServiceResources", "http://schemas.microsoft.com/windowsazure"));
                    if (serviceResourcesSequenceElement != null)
                    {
                        foreach (XElement serviceResourcesElement in serviceResourcesSequenceElement.Elements(XName.Get("ServiceResource", "http://schemas.microsoft.com/windowsazure")))
                        {
                            MediaServicesAccountListResponse.MediaServiceAccount serviceResourceInstance = new MediaServicesAccountListResponse.MediaServiceAccount();
                            result.Accounts.Add(serviceResourceInstance);
                            
                            XElement nameElement = serviceResourcesElement.Element(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                            if (nameElement != null)
                            {
                                string nameInstance = nameElement.Value;
                                serviceResourceInstance.Name = nameInstance;
                            }
                            
                            XElement typeElement = serviceResourcesElement.Element(XName.Get("Type", "http://schemas.microsoft.com/windowsazure"));
                            if (typeElement != null)
                            {
                                string typeInstance = typeElement.Value;
                                serviceResourceInstance.Type = typeInstance;
                            }
                            
                            XElement stateElement = serviceResourcesElement.Element(XName.Get("State", "http://schemas.microsoft.com/windowsazure"));
                            if (stateElement != null)
                            {
                                string stateInstance = stateElement.Value;
                                serviceResourceInstance.State = stateInstance;
                            }
                            
                            XElement selfLinkElement = serviceResourcesElement.Element(XName.Get("SelfLink", "http://schemas.microsoft.com/windowsazure"));
                            if (selfLinkElement != null)
                            {
                                Uri selfLinkInstance = TypeConversion.TryParseUri(selfLinkElement.Value);
                                serviceResourceInstance.Uri = selfLinkInstance;
                            }
                            
                            XElement parentLinkElement = serviceResourcesElement.Element(XName.Get("ParentLink", "http://schemas.microsoft.com/windowsazure"));
                            if (parentLinkElement != null)
                            {
                                Uri parentLinkInstance = TypeConversion.TryParseUri(parentLinkElement.Value);
                                serviceResourceInstance.ParentUri = parentLinkInstance;
                            }
                            
                            XElement accountIdElement = serviceResourcesElement.Element(XName.Get("AccountId", "http://schemas.microsoft.com/windowsazure"));
                            if (accountIdElement != null)
                            {
                                string accountIdInstance = accountIdElement.Value;
                                serviceResourceInstance.AccountId = accountIdInstance;
                            }
                        }
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The Regenerate Media Services Account Key operation regenerates an
        /// account key for the given Media Services account in Windows Azure.
        /// (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn167010.aspx
        /// for more information)
        /// </summary>
        /// <param name='accountName'>
        /// The name of the Media Services Account
        /// </param>
        /// <param name='keyType'>
        /// The type of key to regenerate (primary or secondary)
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<OperationResponse> RegenerateKeyAsync(string accountName, MediaServicesKeyType keyType, CancellationToken cancellationToken)
        {
            // Validate
            if (accountName == null)
            {
                throw new ArgumentNullException("accountName");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("accountName", accountName);
                tracingParameters.Add("keyType", keyType);
                Tracing.Enter(invocationId, this, "RegenerateKeyAsync", tracingParameters);
            }
            
            // Construct URL
            string url = this.Client.BaseUri + "/" + this.Client.Credentials.SubscriptionId + "/services/mediaservices/Accounts/" + accountName + "/AccountKeys/" + keyType + "/Regenerate";
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2011-10-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.NoContent)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.CreateFromXml(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    OperationResponse result = new OperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
    }
}
