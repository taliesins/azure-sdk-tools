<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="CannotOverwriteBlockBlobWithPageBlobException" xml:space="preserve">
    <value>Cannot overwrite an existing BlockBlob with a PageBlob.</value>
  </data>
  <data name="ReadableSizeFormatBytes" xml:space="preserve">
    <value>{0:0.##} bytes</value>
  </data>
  <data name="UndefinedTransferEntryStatusException" xml:space="preserve">
    <value>The given entry status {0} is undefined.</value>
  </data>
  <data name="SmallMemoryCacheSizeLimitationException" xml:space="preserve">
    <value>MaximumCacheSize cannot be less than {0}.</value>
  </data>
  <data name="StreamMustSupportReadException" xml:space="preserve">
    <value>{0} must support Read.</value>
  </data>
  <data name="OnlySupportTwoBlobTypesException" xml:space="preserve">
    <value>Only BlockBlob and PageBlob types are supported.</value>
  </data>
  <data name="ConcurrentCountNotPositiveException" xml:space="preserve">
    <value>Concurrent thread count must be positive.</value>
  </data>
  <data name="FailedToGetSourceLastWriteTime" xml:space="preserve">
    <value>Failed to get last write time of source file.</value>
  </data>
  <data name="BlockSizeOutOfRangeException" xml:space="preserve">
    <value>BlockSize must be between {0} and {1}.</value>
  </data>
  <data name="SubfoldersNotAllowedUnderRootContainerException" xml:space="preserve">
    <value>Azure default container does not support subfolders.</value>
  </data>
  <data name="CannotRemoveSourceWithoutSourceFileException" xml:space="preserve">
    <value>Cannot remove source file without file name.</value>
  </data>
  <data name="ContainerOnlyValidForSourceException" xml:space="preserve">
    <value>The container {0} can only be used as source location.</value>
  </data>
  <data name="DataMovement_ExceptionFromCallback" xml:space="preserve">
    <value>Exception occurred in a callback.</value>
  </data>
  <data name="BlobFileSizeTooLargeException" xml:space="preserve">
    <value>File size {0} is larger than {1} maximum size {2} bytes.</value>
  </data>
  <data name="ProvideAtMostOneParameterBothProvidedException" xml:space="preserve">
    <value>Both {0} and {1} are provided. At most one of these parameters could be provided.</value>
  </data>
  <data name="FailedToRetrieveCopyStateForBlobToMonitorException" xml:space="preserve">
    <value>Failed to retrieve CopyState for blob "{0}".</value>
  </data>
  <data name="RestartableInfoCorruptedException" xml:space="preserve">
    <value>Failed to read restartable info from file.</value>
  </data>
  <data name="SourceFileHasBeenChangedException" xml:space="preserve">
    <value>Source file has been changed since the last transfer.</value>
  </data>
  <data name="ReadableSizeFormatMegaBytes" xml:space="preserve">
    <value>{0:0.##}MB</value>
  </data>
  <data name="BufferNotAllocatedThroughMemoryManagerException" xml:space="preserve">
    <value>The passed in buffer was not allocated through the MemoryManager.</value>
  </data>
  <data name="BlobFileSizeInvalidException" xml:space="preserve">
    <value>File size {0} is invalid for {1}, must be a multiple of {2}.</value>
  </data>
  <data name="PageBlob" xml:space="preserve">
    <value>PageBlob</value>
  </data>
  <data name="ProvideExactlyOneParameterBothNullException" xml:space="preserve">
    <value>Both {0} and {1} are null. Exactly one of these parameters must be provided.</value>
  </data>
  <data name="BlockBlob" xml:space="preserve">
    <value>BlockBlob</value>
  </data>
  <data name="UndefinedBlobTypeException" xml:space="preserve">
    <value>The given blob type {0} is undefined.</value>
  </data>
  <data name="ReadableSizeFormatKiloBytes" xml:space="preserve">
    <value>{0:0.##}KB</value>
  </data>
  <data name="ReadableSizeFormatTeraBytes" xml:space="preserve">
    <value>{0:0.##}TB</value>
  </data>
  <data name="LocalToLocalTransferUnsupportedException" xml:space="preserve">
    <value>Both Source and Destination are locally accessible locations. At least one of source and destination should be an Azure Storage location.</value>
  </data>
  <data name="InvalidInitialEntryStatusWhenMoveSourceIsOffException" xml:space="preserve">
    <value>The initial entry status {0} is invalid when MoveSource is off.</value>
  </data>
  <data name="OverwriteCallbackCancelTransferException" xml:space="preserve">
    <value>The target already exists. User chose not to overwrite it and canceled the transfer.</value>
  </data>
  <data name="BlobTransferCancelledException" xml:space="preserve">
    <value>The blob transfer has been cancelled.</value>
  </data>
  <data name="CannotParseAccountFromUriException" xml:space="preserve">
    <value>Unable to parse account name from {0}.</value>
  </data>
  <data name="CanOnlySetOneCredentialException" xml:space="preserve">
    <value>Only one of ({0}) or ({1}) can be set.</value>
  </data>
  <data name="ReadableSizeFormatPetaBytes" xml:space="preserve">
    <value>{0:0.##}PB</value>
  </data>
  <data name="CannotMoveSourceIfMonitoringIsTurnedOffException" xml:space="preserve">
    <value>Cannot move source unless monitoring is available.</value>
  </data>
  <data name="DownloadedMd5MismatchException" xml:space="preserve">
    <value>The MD5 hash calculated from the downloaded data does not match the MD5 hash stored in the blob's property. Please refer to help or documentation for detail.
MD5 calculated: {0}
MD5 in property: {1}</value>
  </data>
  <data name="FailedToAllocateMemoryException" xml:space="preserve">
    <value>Failed to allocate required memory.</value>
  </data>
  <data name="SourceBlobDoesNotExistException" xml:space="preserve">
    <value>Source blob does not exist.</value>
  </data>
  <data name="MismatchFoundBetweenLocalAndServerCopyIdsException" xml:space="preserve">
    <value>The local copy id is different from the one returned from the server.</value>
  </data>
  <data name="ReadableSizeFormatExaBytes" xml:space="preserve">
    <value>{0:0.##}EB</value>
  </data>
  <data name="ProvideExactlyOneParameterBothProvidedException" xml:space="preserve">
    <value>Both {0} and {1} are provided. Exactly one of these parameters must be provided.</value>
  </data>
  <data name="StreamMustSupportSeekException" xml:space="preserve">
    <value>{0} must support Seek.</value>
  </data>
  <data name="FailedToCopyBlobException" xml:space="preserve">
    <value>Failed to copy from "{0}" to "{1}". Copy status: {2}.</value>
  </data>
  <data name="FailedToGetBlobTypeException" xml:space="preserve">
    <value>Failed to retrieve the original BlobType.</value>
  </data>
  <data name="CannotMoveSourceIfSourceBlobIsNullException" xml:space="preserve">
    <value>Cannot move source unless source blob is not null.</value>
  </data>
  <data name="FailedToOpenFileException" xml:space="preserve">
    <value>Failed to open file {0}.</value>
  </data>
  <data name="TransferEntryCopyIdCannotBeNullOrEmptyException" xml:space="preserve">
    <value>TransferEntry.CopyId cannot be null or empty because we need it to verify we are monitoring the right blob copying process.</value>
  </data>
  <data name="CannotOverwritePageBlobWithBlockBlobException" xml:space="preserve">
    <value>Cannot overwrite an existing PageBlob with a BlockBlob.</value>
  </data>
  <data name="StreamMustSupportWriteException" xml:space="preserve">
    <value>{0} must support Write.</value>
  </data>
  <data name="SourceAndDestinationLocationCannotBeEqualException" xml:space="preserve">
    <value>Source and destination cannot be the same.</value>
  </data>
  <data name="StorageKeyInvalidFormatException" xml:space="preserve">
    <value>The supplied storage key ({0}) is not a valid Base64 string.</value>
  </data>
  <data name="ReadableSizeFormatGigaBytes" xml:space="preserve">
    <value>{0:0.##}GB</value>
  </data>
  <data name="TransferEntryPropertyCanBeSetOnlyOnceException" xml:space="preserve">
    <value>Property {0} of a transfer entry can be set only once.</value>
  </data>
  <data name="InvalidInitialEntryStatusForControllerException" xml:space="preserve">
    <value>The initial entry status {0} is invalid for {1}.</value>
  </data>
</root>